{"version":3,"sources":["img/logo192.png","components/About.js","components/Canvas.js","components/smart-input/SmartInput.js","components/ChartControls.js","utils/math.js","drawing/CoordinateSystem.js","drawing/HSLChart.js","components/Chart.js","utils/canvas.js","components/ExportImage.js","components/ExportHex.js","components/ExportJS.js","components/ExportModal.js","components/Editor.js","components/Presets.js","components/App.js","index.js"],"names":["module","exports","About","className","href","Canvas","props","pixelRatio","document","window","devicePixelRatio","canvasRef","useRef","setCanvasSize","current","clientWidth","width","makeSquare","clientHeight","height","undefined","onResize","useEffect","addEventListener","onLoad","removeEventListener","id","ref","SmartInput","numberRegex","inputRef","useState","value","prevInputValue","setPrevInputValue","sendValueToInput","applyConstraints","isValidInput","toString","match","num","max","Math","min","maxDecimals","round","pow","sendValueToHandler","handleChange","conversion","parseFloat","handleUserInput","newValue","handleMouseOrTouchDown","startPosition","startValue","onselectstart","onMouseOrTouchMove","e","x","clientX","touches","stepDelta","step","onmousemove","ontouchmove","onmouseup","ontouchend","style","defaultStyles","display","minWidth","flexFlow","alignItems","color","border","onMouseDown","preventDefault","onTouchStart","flexDirection","justifyContent","flexGrow","flexShrink","flexBasis","labelWidth","cursor","fontSize","padding","margin","borderTopLeftRadius","borderBottomLeftRadius","label","onClick","setSelectionRange","length","onBlur","currentValue","onChange","target","type","flex","resetButton","resetAction","updateAfterReset","borderTopRightRadius","borderBottomRightRadius","String","fromCharCode","ChartControls","section","htmlFor","curve","newCurveType","setCurve","onCurveChange","config","map","option","key","category","onParamChange","exponent","overshoot","amplitude","period","radius","unitSymbol","PI","angleStart","angleEnd","angleOffset","translateX","translateY","scaleX","scaleY","rotation","clamp","n","CoordinateSystem","canvas","options","this","defaults","nxRange","nyRange","paddingX","paddingY","orientationY","Object","assign","y","nx","ny","HSLChart","drawOrientation","text","p0","p1","p2","rotatePoint","sin","cos","cx","coords","surface","cy","ctx","fillStyle","strokeStyle","lineWidth","font","textAlign","textBaseline","beginPath","measureText","tickLength","moveTo","lineTo","fillText","stroke","range","htmlPadding","highlightColor","getContext","alpha","getWidth","endPointLineWidth","endPointRadius","arcCount","arcWidth","mouseDown","takeSnapshot","mouseOver","startPoint","dragging","error","endPoint","points","curveParamSnapshots","update","updateDisplaySettings","drawBlankChart","drawCurve","drawEndpoints","getParamSnapshots","translation","scale","drawHsChart","drawLChart","fillRect","radiusEnd","i","gradient","createRadialGradient","addColorStop","arc","fill","createLinearGradient","getHeight","resolution","prevCoords","lineSegments","start","overflow","clampStart","end","clampEnd","getCurveCoordsAt","grabbing","push","s","sx","sy","updateMouseover","isCurveOver","isStartPointOver","isEndPointOver","xDelta","yDelta","xDeltaRot","yDeltaRot","element","status","body","point","abs","find","d","Chart","paletteNeedsUpdate","setPaletteNeedsUpdate","chartCanvas","setChartCanvas","hslChart","setHslChart","setTranslateX","setTranslateY","setScaleX","setScaleY","setRotation","updateCurve","useCallback","param","setAngleStart","setAngleEnd","setAngleOffset","setVariation","setReverse","setRadius","setOverflow","setExponent","setOvershoot","setAmplitude","setPeriod","setClampBounds","updatePalettes","chart","mouseMoveUp","rect","getBoundingClientRect","left","clientY","top","updateMousePos","mouseMoveDown","mouseMoveDownClosure","setupListeners","paletteType","title","chartType","downloadCanvas","filename","Promise","resolve","reject","link","createElement","download","toDataURL","createEvent","initMouseEvent","dispatchEvent","ExportImage","imgName","setImgName","imgWidth","setImgWidth","imgHeight","setImgHeight","placeholder","newPaletteType","setPaletteType","numStops","setNumStops","parseInt","name","w","h","appendChild","palette","drawContinuousPalette","drawDiscretePalette","then","console","log","removeChild","getElementById","exportImage","ExportHex","hexArray","setHexArray","Array","hexValueAt","join","backgroundColor","ExportJS","exportPaletteParams","ExportModal","nav","setNav","exportCanvas","setExportCanvas","stops","numStopsVar","paletteTypeVar","Modal","size","show","onHide","setShow","Header","closeButton","Title","Body","setPalette","role","data-toggle","aria-controls","aria-selected","Editor","paletteRange","setPaletteRange","showModal","setShowModal","hsCurve","setHsCurve","lCurve","setLCurve","paletteCanvas","setPaletteCanvas","paletteWrapper","updateCurveType","newType","class","defaultChecked","checked","classList","add","remove","defaultValue","setStart","setEnd","Presets","selectedPalette","setSelectedPalette","presets","WarmMagma","AllAround","UnAmerican","BeyondBelief","PowerWashed","CandyPaint","StockImage","GoldfishDeluxe","PhytoPlankton","TrixSky","CoralScrub","PolarBeyond","preset","author","callback","App","ColorPalette","data-target","aria-expanded","aria-label","src","logo","aria-haspopup","aria-labelledby","ReactDOM","render"],"mappings":"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","file":"static/js/main.c6795b9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.1cbe3163.png\";","// libs\nimport React from 'react';\n\nfunction About() {\n\n    return (\n        <div className='row'>\n            <div className='col-12'>\n                <div className='palette-wrapper'>\n                    <h2>Introduction</h2>\n\n                    <p>Color is an important element in design, data visualization, and art. The right palette can help convey a message clearly or bring a visual project to life.</p>\n\n                    <p>In particular, <i>continuous</i> color palettes are useful in digital applications where color reinforces a message. Data analysts use continuous palettes to convey stories through data, and generative artists (those who make art with code) use color to express the inherit beauty in mathematics and randomness.</p>\n\n                    <p>Color Curves makes it fun and simple to create unique color palettes for art and data projects.</p>\n\n                    <p>Instead of relying on color theory, image analysis, or \"expertise\", Color Curves allows anyone to generate limitless palettes using simple geometry. It is my hope in creating this tool that palettes will make their way into even more projects, delighting artists and viewers alike.</p>\n\n                    <h2>Inspiration</h2>\n\n                    <p>Color Curves was inspired by the pioneering computer graphics researchers who invented the HSL and HSV color spaces, as well as by the work of <a href=\"https://bost.ocks.org/mike/\">Mike Bostok</a>, who introduced me to continuous color palettes by way of the <a href=\"https://github.com/d3/d3-scale-chromatic\">d3-scale-chromatic</a> library.</p>\n\n                    <h2>Resources</h2>\n                    <p>\n                        <ul>\n                            <li><a href=\"https://github.com/mracette/color-curves-app\">Documentation</a></li>\n\n                            <li><a href=\"https://github.com/mracette/color-curves-app/issues\">File a bug or feature request</a></li>\n\n                            <li><a href=\"https://www.npmjs.com/package/color-curves\">NPM package</a></li>\n                        </ul>\n                    </p>\n                    <h2>Contact</h2>\n                    <p>\n\n                        Let me know what you think of Color Curves:\n                        <ul>\n                            <li><a href=\"mailto:markracette@gmail.com\">markracette@gmail.com</a></li>\n\n                            <li><a href=\"https://twitter.com/markracette\">twitter.com/markracette</a></li>\n\n                            <li><a href=\"https://instagram.com/rgb.ig\">instagram.com/rgb.ig</a></li>\n\n                            <li><a href=\"https://github.com/mracette\">github.com/mracette</a></li>\n                        </ul>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default About;","// libs\nimport React, { useRef, useEffect } from 'react';\n\nfunction Canvas(props) {\n\n    const pixelRatio = typeof document !== 'undefined' ? window.devicePixelRatio : 1;\n\n    const canvasRef = useRef(null);\n\n    const setCanvasSize = () => {\n\n        // resize to device pixel ratio\n        canvasRef.current.clientWidth !== 0 && (canvasRef.current.width = pixelRatio * canvasRef.current.clientWidth);\n\n        // height depends on props.makeSquare\n        if (props.makeSquare) {\n            canvasRef.current.clientHeight !== 0 && (canvasRef.current.height = pixelRatio * canvasRef.current.clientWidth);\n        } else {\n            canvasRef.current.clientHeight !== 0 && (canvasRef.current.height = pixelRatio * canvasRef.current.clientHeight);\n        }\n\n        // trigger the resize callback\n        props.onResize !== undefined && props.onResize(canvasRef.current);\n\n    }\n\n    useEffect(() => {\n\n        setCanvasSize();\n\n        window.addEventListener('resize', setCanvasSize);\n\n        // trigger the onload callback\n        props.onLoad !== undefined && props.onLoad(canvasRef.current);\n\n        return () => window.removeEventListener('resize', setCanvasSize);\n\n    }, [setCanvasSize])\n\n    return (\n        <canvas\n            id={props.id}\n            className={props.className}\n            ref={canvasRef}\n        />\n    );\n\n}\n\nexport default Canvas;","// libs\nimport React, { useRef, useState, useEffect } from 'react';\n\nfunction SmartInput(props) {\n\n    const numberRegex = /^\\s*[+-]?(\\d+|\\.\\d+|\\d+\\.\\d+|\\d+\\.)(e[+-]?\\d+)?\\s*$/\n    const inputRef = useRef(null);\n    const [prevInputValue, setPrevInputValue] = useState(props.value);\n\n    useEffect(() => {\n        props.value !== undefined && sendValueToInput(applyConstraints(props.value));\n    }, [props.value])\n\n    const isValidInput = (value) => value.toString().match(numberRegex);\n\n    const applyConstraints = (num) => {\n\n        if (isValidInput(num)) {\n\n            props.max !== undefined && (num = Math.min(props.max, num));\n            props.min !== undefined && (num = Math.max(props.min, num));\n\n            if (typeof num === 'number' && typeof props.maxDecimals === 'number') {\n                return Math.round(num * Math.pow(10, props.maxDecimals)) / Math.pow(10, props.maxDecimals);\n            } else {\n                return num;\n            }\n\n        } else {\n\n            return num;\n\n        }\n\n    }\n\n    const sendValueToInput = (value) => {\n        inputRef.current.value = value;\n    }\n\n    const sendValueToHandler = (value) => {\n        // ensure handler exists\n        if (props.handleChange) {\n            // convert if necessary\n            if (props.conversion) {\n                props.handleChange(parseFloat(value * props.conversion));\n            } else {\n                props.handleChange(parseFloat(value));\n            }\n        }\n    }\n\n    const handleClick = () => {\n        const value = inputRef.current.value;\n        inputRef.current.setSelectionRange(0, value.length);\n    }\n\n    const handleOnBlur = (currentValue) => {\n        if (isValidInput(currentValue)) {\n            sendValueToHandler(currentValue);\n        } else {\n            sendValueToHandler(prevInputValue);\n            sendValueToInput(prevInputValue);\n        }\n    }\n\n    const handleUserInput = (newValue) => {\n\n        if (isValidInput(newValue)) {\n\n            newValue = applyConstraints(newValue);\n\n            // send to change handler\n            sendValueToHandler(newValue);\n\n            // store this value as the last valid value\n            setPrevInputValue(newValue);\n\n            // always send to input\n            sendValueToInput(newValue);\n\n        } else {\n\n            // always send to input\n            sendValueToInput(newValue);\n\n        }\n\n\n    }\n\n    const handleMouseOrTouchDown = (startPosition, startValue) => {\n\n        // disable selections while the mouse is down\n        document.onselectstart = () => false;\n\n        const onMouseOrTouchMove = (e) => {\n\n            const x = e.clientX || (e.touches ? e.touches[0].clientX : 0);\n\n            // capture the movement and compare to startPosition\n            const delta = parseFloat(x - startPosition);\n\n            // multiply the delta by the step\n            const stepDelta = delta * (props.step || 1);\n\n            // get new value\n            let newValue = startValue + stepDelta;\n\n            handleUserInput(newValue);\n\n        }\n\n        document.onmousemove = (e) => onMouseOrTouchMove(e);\n        document.ontouchmove = (e) => {\n            onMouseOrTouchMove(e)\n        };\n\n        // remove listeners\n        document.onmouseup = () => {\n            document.onselectstart = null;\n            document.onmousemove = null;\n        }\n\n        document.ontouchend = () => {\n            document.onselectstart = null;\n            document.ontouchmove = null;\n        }\n\n    }\n\n    return (\n        <div\n            className='smart-input border'\n            style={\n                (props.defaultStyles !== false) && {\n                    display: 'flex',\n                    minWidth: '0%',\n                    flexFlow: 'row nowrap',\n                    alignItems: 'center',\n                    height: '1.9rem',\n                    width: '100%',\n                    color: '#555',\n                    border: '1px solid #CCC',\n                    border: 'none',\n                    borderRadius: '4px'\n                }}\n        >\n            <div\n                className='smart-input-label'\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    const startPosition = parseFloat(e.clientX);\n                    const startValue = parseFloat(inputRef.current.value);\n                    handleMouseOrTouchDown(startPosition, startValue);\n                }}\n                onTouchStart={(e) => {\n                    e.preventDefault();\n                    const startPosition = parseFloat(e.touches[0].clientX);\n                    const startValue = parseFloat(inputRef.current.value);\n                    handleMouseOrTouchDown(startPosition, startValue);\n                }}\n                style={\n                    (props.defaultStyles !== false) && {\n                        display: 'flex',\n                        minWidth: '0%',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        flexGrow: '0',\n                        flexShrink: '0',\n                        flexBasis: typeof props.labelWidth === 'number' ?\n                            props.labelWidth * 100 + '%' :\n                            props.labelWidth,\n                        height: '100%',\n                        cursor: 'ew-resize',\n                        fontSize: '0.875rem',\n                        padding: '0px 12px',\n                        margin: '0',\n                        borderTopLeftRadius: '3px',\n                        borderBottomLeftRadius: '3px'\n                    }}\n            >\n                <span>\n                    {props.label}\n                </span>\n            </div>\n            <input\n                className='smart-input-text'\n                ref={inputRef}\n                onClick={handleClick}\n                onBlur={(e) => {\n                    const value = inputRef.current.value;\n                    handleOnBlur(value);\n                }}\n                onChange={(e) => {\n                    const value = e.target.value;\n                    handleUserInput(value);\n                }}\n                type='text'\n                style={\n                    (props.defaultStyles !== false) && {\n                        flex: '0 1 auto',\n                        minWidth: '0%',\n                        width: '100%',\n                        height: '100%',\n                        fontSize: '0.875rem',\n                        padding: '0px 12px',\n                        margin: '0',\n                        border: 'none'\n                    }}\n            >\n            </input>\n            {props.resetButton &&\n                <button\n                    type=\"button\"\n                    className=\"reset-input-button\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        props.resetAction && props.resetAction();\n                        if (props.updateAfterReset !== false) { handleUserInput(props.value) };\n                    }}\n                    style={\n                        (props.defaultStyles !== false) && {\n                            display: 'flex',\n                            minWidth: '0%',\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            flexGrow: '0',\n                            flexShrink: '0',\n                            flexBasis: '2rem',\n                            height: '100%',\n                            cursor: 'pointer',\n                            fontSize: '0.875rem',\n                            padding: '0px 12px',\n                            margin: '0',\n                            border: 'none',\n                            borderTopRightRadius: '3px',\n                            borderBottomRightRadius: '3px'\n                        }}\n                >\n                    {String.fromCharCode(0x21ba)}\n                </button>\n            }\n        </div>\n    )\n\n}\n\nexport default SmartInput;","// libs\nimport React from 'react';\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\nfunction ChartControls(props) {\n\n    const onCurveChange = (newCurveType) => {\n\n        props.setCurve(newCurveType);\n\n    }\n\n    return (\n\n        <div id='chart-controls' className='col-12'>\n\n            {/* FORM */}\n            {props.section === 'top' && (<form>\n\n                <div className='form-group'>\n\n                    {/* CURVE OPTIONS LINE 1 */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Curve</label>\n                        <div className='col-lg-5 col-9'>\n                            <select\n                                id='type-select'\n                                className='form-control form-control-sm'\n                                value={props.curve.type}\n                                onChange={(e) => {\n                                    const newCurveType = e.target.value;\n                                    onCurveChange(newCurveType);\n                                }}>\n                                {props.config.map((option) => {\n                                    return <option key={option.id} value={option.id}> {option.display} </option>\n                                })}\n                            </select>\n                        </div>\n\n                        {/* CURVE VARIATION */}\n                        {props.curve.category === 'function' && props.curve.type !== 'linear' && (<>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Variation</label>\n                            <div className='col-lg-3 col-9'>\n                                <select\n                                    id='variation-select'\n                                    className='form-control form-control-sm'\n                                    onChange={(e) => {\n                                        const value = e.target.value;\n                                        props.onParamChange('variation', value);\n                                    }}>\n                                    <option value='in'>In</option>\n                                    <option value='out'>Out</option>\n                                    <option value='in-out'>In-Out</option>\n                                </select>\n                            </div>\n                        </>)}\n\n                    </div>\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'polynomial' &&\n                        <div className='row justify-content-end'>\n\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Exponent</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"e\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={0.01}\n                                    value={props.curve.exponent}\n                                    resetButton={true}\n                                    resetAction={() => props.onParamChange('exponent')}\n                                    handleChange={(value) => props.onParamChange('exponent', value)}\n                                />\n                            </div>\n                        </div>}\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'back' &&\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Overshoot</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"s\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    value={props.curve.overshoot}\n                                    resetButton={true}\n                                    resetAction={() => { props.onParamChange('overshoot') }}\n                                    handleChange={(value) => props.onParamChange('overshoot', value)}\n                                />\n                            </div>\n                        </div>}\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'elastic' && <>\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Amplitude</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"a\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={1}\n                                    value={props.curve.amplitude}\n                                    resetButton={true}\n                                    resetAction={() => { props.onParamChange('amplitude') }}\n                                    handleChange={(value) => props.onParamChange('amplitude', value)}\n                                />\n                            </div>\n                        </div>\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Period</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"p\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={0.01}\n                                    value={props.curve.period}\n                                    resetButton={true}\n                                    resetAction={() => { props.onParamChange('period') }}\n                                    handleChange={(value) => props.onParamChange('period', value)}\n                                />\n                            </div>\n                        </div>\n                    </>}\n\n\n                    {/* CURVE OPTIONS LINE 2 */}\n                    <div className='row'>\n\n                        {/* CURVE DIRECTION */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='direction-select'>Direction</label>\n                        <div className='col-lg-5 col-9'>\n                            <select\n                                id='direction-select'\n                                className='form-control form-control-sm'\n                                onChange={(e) => {\n                                    const value = e.target.value === 'reverse';\n                                    props.onParamChange('reverse', value);\n                                }}>\n                                <option value='normal'>Normal</option>\n                                <option value='reverse'>Reverse</option>\n                            </select>\n                        </div>\n\n                        {/* CURVE OVERFLOW */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='off-grid-select'>Overflow</label>\n                        <div className='col-lg-3 col-9'>\n                            <select\n                                id='overflow-select'\n                                className='form-control form-control-sm'\n                                onChange={(e) => {\n                                    const value = e.target.value;\n                                    props.onParamChange('overflow', value);\n                                }}>\n                                <option value='clamp'>Clamp</option>\n                                <option value='project'>Project</option>\n                            </select>\n                        </div>\n\n                    </div>\n\n                </div>\n\n                {/* CONDITIONAL ARC PARAMETERS */}\n                {props.curve.type === 'arc' && <div className='form-group'>\n\n                    {/* RADIUS */}\n                    <div className='row'>\n\n                        {/* RADIUS */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Radius</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='r'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.radius}\n                                resetButton={true}\n                                resetAction={() => { props.onParamChange('radius', props.curve.radius) }}\n                                handleChange={(value) => props.onParamChange('radius', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* BOUNDS */}\n                    <div className='row'>\n\n                        {/* ANGLE START */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Range</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={<>{String.fromCharCode(0xfeff0398)}<sub>0</sub></>}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleStart / Math.PI}\n                                resetButton={true}\n                                resetAction={() => { props.onParamChange('angleStart') }}\n                                handleChange={(value) => props.onParamChange('angleStart', value)}\n                            />\n                        </div>\n\n                        {/* ANGLE END */}\n                        <div className='col-lg-5 col-9 ml-auto'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={<>{String.fromCharCode(0xfeff0398)}<sub>1</sub></>}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleEnd / Math.PI}\n                                resetButton={true}\n                                resetAction={() => { props.onParamChange('angleEnd') }}\n                                handleChange={(value) => props.onParamChange('angleEnd', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* ANGLE OFFSET */}\n                    <div className='row'>\n\n                        {/* ANGLE START */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Offset</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={String.fromCharCode(0xfeff0398)}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleOffset / Math.PI}\n                                resetButton={true}\n                                resetAction={() => { props.onParamChange('angleOffset') }}\n                                handleChange={(value) => props.onParamChange('angleOffset', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                </div>}\n\n            </form>)}\n\n\n            {props.section === 'bottom' && (<form>\n                <div className='form-group'>\n\n                    {/* TRANSLATION */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Translate</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='X'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.translateX}\n                                resetButton={true}\n                                updateAfterReset={false}\n                                resetAction={() => { props.onParamChange('translateX') }}\n                                handleChange={(value) => props.onParamChange('translateX', value)}\n                            />\n                        </div>\n\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='Y'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.translateY}\n                                resetButton={true}\n                                updateAfterReset={false}\n                                resetAction={() => { props.onParamChange('translateY') }}\n                                handleChange={(value) => props.onParamChange('translateY', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* SCALE */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Scale</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='X'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.scaleX}\n                                resetButton={true}\n                                updateAfterReset={false}\n                                resetAction={() => { props.onParamChange('scaleX') }}\n                                handleChange={(value) => props.onParamChange('scaleX', value)}\n                            />\n                        </div>\n\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='Y'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.scaleY}\n                                resetButton={true}\n                                updateAfterReset={false}\n                                resetAction={() => { props.onParamChange('scaleY') }}\n                                handleChange={(value) => props.onParamChange('scaleY', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* ROTATION */}\n                    <div className='row'>\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Rotate</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={String.fromCharCode(0xfeff0398)}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.rotation / Math.PI}\n                                resetButton={true}\n                                updateAfterReset={false}\n                                resetAction={() => { props.onParamChange('rotate') }}\n                                handleChange={(value) => props.onParamChange('rotate', value)}\n                            />\n                        </div>\n                    </div>\n\n                </div>\n\n            </form>)}\n\n        </div >\n\n    );\n\n}\n\nexport default ChartControls;","export const clamp = (n, min, max) => {\n    return Math.min(max, Math.max(min, n));\n}\n\nexport const cartToPolar = (x, y) => {\n    return {\n        r: Math.sqrt(x * x + y * y),\n        theta: Math.atan2(y, x)\n    };\n}","import { clamp } from '../utils/math';\n\nexport class CoordinateSystem {\n\n    /**\n     * Creates a canvas coordinate system.\n     * @param {object} canvas The canvas to map the coordinate system to\n     * @param {object} [options] Optional properties of the system\n     * @param {object} [options.nxRange = [-1, 1]] An array that represents the bounds of the normalized x axis\n     * @param {object} [options.nyRange = [-1, 1]] An array that represents the bounds of the normalized y axis\n     * @param {boolean} [options.clamp = false] Whether or not to clamp coordinate that are outside of the bounds\n     * @param {number} [options.padding = 0] Defines padding as a proportion of the canvas width\n     * @param {number} [options.paddingX] Defines X padding as a proportion of the canvas width (if defined, overrides options.padding)\n     * @param {number} [options.paddingY] Defines Y padding as a proportion of the canvas height (if defined, overrides options.padding)\n     * @param {number} [options.orientationY = 'up'] Defines the direction of positive Y (either 'up' or 'down').\n     */\n\n    constructor(canvas, options) {\n\n        this.canvas = canvas;\n\n        const defaults = {\n            nxRange: [-1, 1],\n            nyRange: [-1, 1],\n            padding: 0,\n            paddingX: undefined,\n            paddingY: undefined,\n            orientationY: 'down'\n        };\n\n        Object.assign(this, { ...defaults, ...options });\n\n    }\n\n    /**\n     * Maps a normalized x-value to a canvas x-value\n     * @param {object} n A normalized x-value in the range [0, 1]\n     * @param {number} [options.padding] Defines padding as a proportion of the canvas width (if defined, overrides padding settings for the system)\n     */\n\n    nx(n, options = {}) {\n\n        let padding;\n\n        this.clamp && (n = clamp(n, this.nxRange[0], this.nxRange[1]));\n\n        if (typeof options.padding === 'number') {\n            padding = options.padding * this.canvas.width;\n        } else {\n            padding = (this.paddingX || this.padding) * this.canvas.width;\n        }\n\n        return padding + ((n - this.nxRange[0]) / (this.nxRange[1] - this.nxRange[0])) * (this.canvas.width - 2 * padding);\n\n    }\n\n    /**\n     * Maps a canvas x-value to a normalized x-value\n     * @param {object} n A canvas x-value in the range [0, canvas.width]\n     * @param {number} [options.padding] Defines padding as a proportion of the canvas width (if defined, overrides padding settings for the system)\n     */\n\n    xn(x, options = {}) {\n\n        let padding;\n\n        if (typeof options.padding === 'number') {\n            padding = options.padding * this.canvas.width;\n        } else {\n            padding = (this.paddingX || this.padding) * this.canvas.width;\n        }\n\n        return (x - padding) / (this.canvas.width - padding * 2)\n\n    }\n\n    /**\n     * Maps a normalized y-value to a canvas y-value\n     * @param {object} n A normalized y-value in the range [0, 1]\n     * @param {number} [options.padding] Defines padding as a proportion of the canvas width (if defined, overrides padding settings for the system)\n     * @param {number} [options.paddingY] Defines padding as a proportion of the canvas height (if defined, overrides padding settings for the system)\n     */\n\n    ny(n, options = {}) {\n\n        let padding;\n\n        this.clamp && (n = clamp(n, this.nyRange[0], this.nyRange[1]));\n\n        if (typeof options.paddingY === 'number') {\n            padding = options.paddingY * this.canvas.height;\n        } else if (typeof options.padding === 'number') {\n            padding = options.padding * this.canvas.width;\n        } else {\n            padding = (typeof this.paddingY === 'number') ?\n                (this.paddingY * this.canvas.height) :\n                (this.padding * this.canvas.width);\n        }\n\n        if (this.orientationY === 'down') {\n            return padding + ((n - this.nyRange[0]) / (this.nyRange[1] - this.nyRange[0])) * (this.canvas.height - 2 * padding);\n        } else if (this.orientationY === 'up') {\n            return this.canvas.height - padding - ((n - this.nyRange[0]) / (this.nyRange[1] - this.nyRange[0])) * (this.canvas.height - 2 * padding);\n        }\n\n    }\n\n    /**\n     * Maps a canvas y-value to a normalized y-value\n     * @param {object} n A canvas y-value in the range [0, canvas.height]\n     * @param {number} [options.padding] Defines padding as a proportion of the canvas height (if defined, overrides padding settings for the system)\n     */\n\n    yn(y, options = {}) {\n\n        let padding;\n\n        if (typeof options.paddingY === 'number') {\n            padding = options.paddingY * this.canvas.height;\n        } else if (typeof options.padding === 'number') {\n            padding = options.padding * this.canvas.width;\n        } else {\n            padding = (typeof this.paddingY === 'number') ?\n                (this.paddingY * this.canvas.height) :\n                (this.padding * this.canvas.width);\n        }\n\n        if (this.orientationY === 'down') {\n            return (y - padding) / (this.canvas.height - padding * 2)\n        } else if (this.orientationY === 'up') {\n            return (this.canvas.height - y - padding) / (this.canvas.height - padding * 2)\n        }\n\n    }\n\n    getWidth() {\n        return this.nx(this.nxRange[1]) - this.nx(this.nxRange[0]);\n    }\n\n    getHeight() {\n        if (this.orientationY === 'down') {\n            return this.ny(this.nyRange[1]) - this.ny(this.nyRange[0]);\n        } else if (this.orientationY === 'up') {\n            return this.ny(this.nyRange[0]) - this.ny(this.nyRange[1]);\n        } else {\n            return undefined;\n        }\n    }\n\n}","import { CoordinateSystem } from './CoordinateSystem';\n\nexport class HSLChart {\n\n    constructor(canvas, curve, type, onParamChange) {\n\n        this.onParamChange = onParamChange;\n\n        const range = type === 'unitCircle' ? [-1, 1] : [0, 1];\n\n        this.padding = 0.07;\n        this.htmlPadding = 0.15; // from CSS\n        this.highlightColor = 'hsl(0, 0%, 25%)';\n\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d', { alpha: false });\n        this.curve = curve;\n        this.type = type;\n        this.coords = new CoordinateSystem(canvas, {\n            nxRange: range,\n            nyRange: range,\n            padding: this.padding,\n            orientationY: 'up'\n        });\n\n        // display settings\n\n        this.lineWidth = this.coords.getWidth() / 170;\n        this.endPointLineWidth = this.coords.getWidth() / 80;\n        this.endPointRadius = this.coords.getWidth() / 60;\n        this.tickLength = this.coords.getWidth() / 50;\n        this.font = `${this.canvas.width * this.padding / 2}px Arial`;\n\n        // color wheel parameters\n        this.arcCount = 256;\n        this.arcWidth = - Math.PI * 2 / this.arcCount;\n\n        this.mouseDown = false;\n        this.takeSnapshot = false;\n\n        // mouseover state held here\n        this.mouseOver = {\n            startPoint: {\n                cx: null,\n                cy: null,\n                mouseOver: false,\n                dragging: false,\n                error: this.endPointRadius\n            },\n            endPoint: {\n                cx: null,\n                cy: null,\n                mouseOver: false,\n                dragging: false,\n                error: this.endPointRadius\n            },\n            curve: {\n                points: [],\n                mouseOver: false,\n                dragging: false,\n                error: 5\n            }\n        }\n\n        this.curveParamSnapshots = {\n            translateX: null,\n            translateY: null,\n            scaleX: null,\n            scaleY: null\n        }\n\n        this.update();\n\n        window.addEventListener('resize', () => this.updateDisplaySettings())\n\n    }\n\n    update() {\n        this.drawBlankChart();\n        this.drawCurve();\n        this.drawEndpoints();\n        this.drawOrientation();\n    }\n\n    updateDisplaySettings() {\n        this.lineWidth = this.coords.getWidth() / 170;\n        this.endPointLineWidth = this.coords.getWidth() / 80;\n        this.endPointRadius = this.coords.getWidth() / 60;\n        this.tickLength = this.coords.getWidth() / 50;\n        this.font = `${this.canvas.width * this.padding / 2}px Arial`;\n    }\n\n    setCurve(curve) {\n        this.curve = curve;\n        this.getParamSnapshots();\n    }\n\n    getParamSnapshots() {\n        this.curveParamSnapshots.translateX = this.curve.translation.x;\n        this.curveParamSnapshots.translateY = this.curve.translation.y;\n        this.curveParamSnapshots.scaleX = this.curve.scale.x;\n        this.curveParamSnapshots.scaleY = this.curve.scale.y;\n        this.curveParamSnapshots.rotation = this.curve.rotation;\n    }\n\n    drawBlankChart() {\n        if (this.type === 'unitCircle') {\n            this.drawHsChart();\n        } else if (this.type === 'unitSquare') {\n            this.drawLChart();\n        }\n    }\n\n    drawHsChart() {\n\n        // fill background\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // other parameters\n        const cx = this.coords.nx(0);\n        const cy = this.coords.ny(0);\n        const r = this.coords.getWidth() / 2;\n\n        const radiusStart = 0;\n        const radiusEnd = r;\n\n        // fill chart\n        for (let i = 0; i < this.arcCount; i++) {\n\n            const gradient = this.ctx.createRadialGradient(\n                this.coords.nx(0),\n                this.coords.ny(0),\n                0,\n                this.coords.nx(0),\n                this.coords.ny(0),\n                this.coords.getWidth() / 2\n            );\n\n            gradient.addColorStop(0, `hsl(${360 * i / this.arcCount}, 0%, 50%)`);\n            gradient.addColorStop(1, `hsl(${360 * i / this.arcCount}, 100%, 50%)`);\n\n            this.ctx.fillStyle = gradient;\n\n            const angleStart = i * this.arcWidth;\n            const angleEnd = i * this.arcWidth + this.arcWidth;\n\n            this.ctx.beginPath();\n            this.ctx.arc(cx, cy, radiusStart, angleStart, angleEnd + this.arcWidth, true);\n            this.ctx.arc(cx, cy, radiusEnd, angleEnd + this.arcWidth, angleStart, false);\n            this.ctx.fill();\n        }\n\n    }\n\n    drawLChart() {\n\n        // fill background\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, this.canvas.height, this.canvas.width);\n\n        // make gradient\n        const gradient = this.ctx.createLinearGradient(\n            this.coords.nx(0),\n            this.coords.ny(1),\n            this.coords.nx(0),\n            this.coords.ny(0)\n        );\n        gradient.addColorStop(0, 'hsl(0, 0%, 100%');\n        gradient.addColorStop(1, 'hsl(0, 0%, 0%');\n\n        // fill chart\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(\n            this.coords.nx(0),\n            this.coords.ny(0),\n            this.coords.getWidth(),\n            -1 * this.coords.getHeight()\n        );\n\n    }\n\n    drawCurve(resolution) {\n\n        const lineSegments = resolution || 128;\n        const points = [];\n\n        this.ctx.lineWidth = this.lineWidth;\n\n        let prevCoords;\n\n        const start = this.curve.overflow === 'clamp' ?\n            this.curve.clampStart : 0;\n\n        const end = this.curve.overflow === 'clamp' ?\n            this.curve.clampEnd : 1\n\n        for (let i = 0; i <= lineSegments; i++) {\n\n            this.ctx.beginPath();\n\n            const coords = this.curve.getCurveCoordsAt(start + (i / lineSegments) * (end - start));\n\n            this.ctx.strokeStyle = (this.mouseOver.curve.mouseOver || this.mouseOver.curve.grabbing)\n                ? this.highlightColor : 'black';\n\n            if (i === 0) {\n                this.ctx.moveTo(this.coords.nx(coords.x), this.coords.ny(coords.y));\n            } else {\n                this.ctx.moveTo(this.coords.nx(prevCoords.x), this.coords.ny(prevCoords.y));\n                this.ctx.lineTo(this.coords.nx(coords.x), this.coords.ny(coords.y));\n            }\n\n            points.push([this.coords.nx(coords.x), this.coords.ny(coords.y)]);\n\n            this.ctx.stroke();\n\n            prevCoords = coords;\n\n        }\n\n        this.mouseOver.curve.points = points;\n\n    }\n\n    drawEndpoints() {\n\n        let s, e;\n\n        if (this.curve.overflow === 'clamp') {\n\n            // use clamp start/end\n            s = this.curve.getCurveCoordsAt(this.curve.clampStart);\n            e = this.curve.getCurveCoordsAt(this.curve.clampEnd);\n\n        } else {\n\n            // use 0 and 1\n            s = this.curve.getCurveCoordsAt(0);\n            e = this.curve.getCurveCoordsAt(1);\n\n        }\n\n        this.ctx.lineWidth = this.endPointLineWidth\n\n        this.ctx.strokeStyle = (this.mouseOver.startPoint.mouseOver || this.mouseOver.startPoint.grabbing)\n            ? this.highlightColor : 'black';\n\n        this.ctx.beginPath();\n        this.ctx.fillStyle = \"lightgreen\";\n        this.ctx.arc(this.coords.nx(s.x), this.coords.ny(s.y), this.endPointRadius, 0, Math.PI * 2);\n        this.ctx.stroke();\n        this.ctx.fill();\n\n        this.mouseOver.startPoint.cx = this.coords.nx(s.x);\n        this.mouseOver.startPoint.cy = this.coords.ny(s.y);\n\n        this.ctx.strokeStyle = (this.mouseOver.endPoint.mouseOver || this.mouseOver.endPoint.grabbing)\n            ? this.highlightColor : 'black';\n\n        this.ctx.beginPath();\n        this.ctx.fillStyle = \"palevioletred\";\n        this.ctx.moveTo(this.coords.nx(e.x), this.coords.ny(e.y));\n        this.ctx.arc(this.coords.nx(e.x), this.coords.ny(e.y), this.endPointRadius, 0, Math.PI * 2);\n        this.ctx.stroke();\n        this.ctx.fill();\n\n        this.mouseOver.endPoint.cx = this.coords.nx(e.x);\n        this.mouseOver.endPoint.cy = this.coords.ny(e.y);\n\n    }\n\n    drawOrientation = () => {\n\n        const rotatePoint = (x, y) => {\n\n            // negative rotation because y orientation is reversed\n            const sin = Math.sin(-this.curve.rotation);\n            const cos = Math.cos(-this.curve.rotation);\n            const cx = this.coords.nx(this.curve.surface.cx);\n            const cy = this.coords.ny(this.curve.surface.cy);\n            const xRot = (x - cx) * cos - (y - cy) * sin + cx;\n            const yRot = (x - cx) * sin + (y - cy) * cos + cy;\n\n            return {\n                x: xRot,\n                y: yRot\n            };\n\n        }\n\n        this.ctx.fillStyle = 'black';\n        this.ctx.strokeStyle = 'black';\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.font = this.font;\n        this.ctx.textAlign = \"center\";\n        this.ctx.textBaseline = \"middle\";\n\n        let x, y, text, p0, p1, p2;\n        this.ctx.beginPath();\n\n        text = this.ctx.measureText(\"+X\").width;\n        x = this.coords.nx(this.coords.nxRange[1])\n        y = this.coords.ny(this.curve.surface.cy);\n        p0 = rotatePoint(x - this.tickLength, y);\n        p1 = rotatePoint(x + this.tickLength, y);\n        p2 = rotatePoint(x + text, y);\n        this.ctx.moveTo(p0.x, p0.y);\n        this.ctx.lineTo(p1.x, p1.y);\n        this.ctx.fillText(\"+X\", p2.x, p2.y);\n\n        text = this.ctx.measureText(\"+X\").width;\n        x = this.coords.nx(this.curve.surface.cx)\n        y = this.coords.ny(this.coords.nyRange[1]);\n        p0 = rotatePoint(x, y - this.tickLength);\n        p1 = rotatePoint(x, y + this.tickLength);\n        p2 = rotatePoint(x, y - text);\n        this.ctx.moveTo(p0.x, p0.y);\n        this.ctx.lineTo(p1.x, p1.y);\n        this.ctx.fillText(\"+Y\", p2.x, p2.y);\n\n        text = this.ctx.measureText(\"+X\").width;\n        x = this.coords.nx(this.coords.nxRange[0])\n        y = this.coords.ny(this.curve.surface.cy);\n        p0 = rotatePoint(x - this.tickLength, y);\n        p1 = rotatePoint(x + this.tickLength, y);\n        p2 = rotatePoint(x - text, y);\n        this.ctx.moveTo(p0.x, p0.y);\n        this.ctx.lineTo(p1.x, p1.y);\n        this.ctx.fillText(\"-X\", p2.x, p2.y);\n\n        text = this.ctx.measureText(\"+X\").width;\n        x = this.coords.nx(this.curve.surface.cx)\n        y = this.coords.ny(this.coords.nyRange[0]);\n        p0 = rotatePoint(x, y - this.tickLength);\n        p1 = rotatePoint(x, y + this.tickLength);\n        p2 = rotatePoint(x, y + text);\n        this.ctx.moveTo(p0.x, p0.y);\n        this.ctx.lineTo(p1.x, p1.y);\n        this.ctx.fillText(\"-Y\", p2.x, p2.y);\n\n        this.ctx.stroke();\n    }\n\n    updateMousePos(x, y, sx, sy) {\n\n        const mouseDown = (typeof sx !== 'undefined' && typeof sy !== 'undefined');\n\n        this.updateMouseover('curve', this.isCurveOver(x, y), mouseDown);\n        this.updateMouseover('startPoint', this.isStartPointOver(x, y), mouseDown);\n        this.updateMouseover('endPoint', this.isEndPointOver(x, y), mouseDown);\n\n        // this is the initial mousedown event, take a snapshot of curve params\n        if (mouseDown && !this.mouseDown) {\n\n            this.getParamSnapshots();\n\n            // identify which element is being grabbed\n            if (this.mouseOver.curve.mouseOver) { this.mouseOver.curve.grabbing = true; }\n            if (this.mouseOver.startPoint.mouseOver) { this.mouseOver.startPoint.grabbing = true; }\n            if (this.mouseOver.endPoint.mouseOver) { this.mouseOver.endPoint.grabbing = true; }\n\n        } else if (!mouseDown && this.mouseDown) {\n            // set all grabs to false if this is an initial mouseup event\n            this.mouseOver.curve.grabbing = false;\n            this.mouseOver.startPoint.grabbing = false;\n            this.mouseOver.endPoint.grabbing = false;\n        }\n\n        this.mouseDown = mouseDown;\n\n        if (this.mouseDown) {\n\n            let xDelta = (this.coords.nxRange[1] - this.coords.nxRange[0]) * (x - sx) / this.coords.getWidth();\n            let yDelta = (this.coords.nyRange[1] - this.coords.nyRange[0]) * (y - sy) / (-1 * this.coords.getHeight());\n\n            let xDeltaRot = Math.cos(this.curve.rotation) * xDelta + Math.sin(this.curve.rotation) * yDelta;\n            let yDeltaRot = Math.cos(this.curve.rotation) * yDelta - Math.sin(this.curve.rotation) * xDelta;\n\n            if (this.mouseOver.startPoint.grabbing && this.curve.category !== 'geometry') {\n                this.onParamChange('scaleX', this.curveParamSnapshots.scaleX - xDeltaRot);\n                this.onParamChange('scaleY', this.curveParamSnapshots.scaleY - yDeltaRot);\n                this.onParamChange('translateX', this.curveParamSnapshots.translateX + xDeltaRot);\n                this.onParamChange('translateY', this.curveParamSnapshots.translateY + yDeltaRot);\n            } else if (this.mouseOver.endPoint.grabbing && this.curve.category !== 'geometry') {\n                this.onParamChange('scaleX', this.curveParamSnapshots.scaleX + xDeltaRot);\n                this.onParamChange('scaleY', this.curveParamSnapshots.scaleY + yDeltaRot);\n            } else if (this.mouseOver.curve.grabbing) {\n                this.onParamChange('translateX', this.curveParamSnapshots.translateX + xDeltaRot);\n                this.onParamChange('translateY', this.curveParamSnapshots.translateY + yDeltaRot);\n            }\n\n        }\n\n    }\n\n    updateMouseover(element, status, mouseDown) {\n\n        // endpoints override curve\n        if ((element === 'startPoint' || element === 'endPoint') && status) {\n            this.mouseOver.curve.mouseOver = false;\n        }\n\n        // if true update accordingly\n        if (status) {\n            this.mouseOver[element].mouseOver = status;\n\n            // if element goes from true -> false, chart needs an update\n        } else if (this.mouseOver[element].mouseOver) {\n            this.mouseOver[element].mouseOver = false;\n            document.body.style.cursor = 'default';\n            this.update();\n        }\n\n        if (status || mouseDown) {\n            document.body.style.cursor = 'grab';\n            this.update();\n        }\n\n    }\n\n    isCurveOver(x, y) {\n        return this.mouseOver.curve.points.map((point) => {\n            return (\n                Math.abs(point[0] - x) <= this.mouseOver.curve.error &&\n                Math.abs(point[1] - y) <= this.mouseOver.curve.error\n            );\n        }).find((d) => d === true)\n    }\n\n    isStartPointOver(x, y) {\n        return (\n            Math.abs(this.mouseOver.startPoint.cx - x) <= this.mouseOver.startPoint.error &&\n            Math.abs(this.mouseOver.startPoint.cy - y) <= this.mouseOver.startPoint.error\n        );\n    }\n\n    isEndPointOver(x, y) {\n        return (\n            Math.abs(this.mouseOver.endPoint.cx - x) <= this.mouseOver.endPoint.error &&\n            Math.abs(this.mouseOver.endPoint.cy - y) <= this.mouseOver.endPoint.error\n        );\n    }\n\n}","// libs\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\n\n// components\nimport ChartControls from './ChartControls';\nimport Canvas from './Canvas';\n\n// other\nimport { HSLChart } from '../drawing/HSLChart';\n\nfunction Chart(props) {\n\n    const [paletteNeedsUpdate, setPaletteNeedsUpdate] = useState(false);\n    const [chartCanvas, setChartCanvas] = useState(null);\n    const [hslChart, setHslChart] = useState(null);\n\n    // painful but necessary due to shallow compare of props.curve\n    const [translateX, setTranslateX] = useState(props.curve.translation.x);\n    const [translateY, setTranslateY] = useState(props.curve.translation.y);\n    const [scaleX, setScaleX] = useState(props.curve.scale.x);\n    const [scaleY, setScaleY] = useState(props.curve.scale.y);\n    const [rotation, setRotation] = useState(props.curve.rotation);\n\n    const updateCurve = () => {\n        hslChart && hslChart.update();\n    }\n\n    const onParamChange = useCallback((param, value) => {\n\n        switch (param) {\n            case 'angleStart': props.curve.setAngleStart(value); break;\n            case 'angleEnd': props.curve.setAngleEnd(value); break;\n            case 'angleOffset': props.curve.setAngleOffset(value); break;\n            case 'variation': props.curve.setVariation(value); break;\n            case 'translateX': props.curve.setTranslateX(value); setTranslateX(props.curve.translation.x); break;\n            case 'translateY': props.curve.setTranslateY(value); setTranslateY(props.curve.translation.y); break;\n            case 'scaleX': props.curve.setScaleX(value); setScaleX(props.curve.scale.x); break;\n            case 'scaleY': props.curve.setScaleY(value); setScaleY(props.curve.scale.y); break;\n            case 'rotate': props.curve.setRotation(value); setRotation(props.curve.rotation); break;\n            case 'reverse': props.curve.setReverse(value); break;\n            case 'radius': props.curve.setRadius(value); break;\n            case 'overflow': props.curve.setOverflow(value); break;\n            case 'exponent': props.curve.setExponent(value); break;\n            case 'overshoot': props.curve.setOvershoot(value); break;\n            case 'amplitude': props.curve.setAmplitude(value); break;\n            case 'period': props.curve.setPeriod(value); break;\n            default: break;\n        }\n\n        // update clamping bounds\n        if (props.curve.overflow === 'clamp') props.curve.setClampBounds();\n\n        updateCurve();\n        props.updatePalettes();\n\n    }, [props.updatePalettes, props.curve]);\n\n    const setupListeners = (chart) => {\n\n        const mouseMoveUp = (e) => {\n            const rect = chartCanvas.getBoundingClientRect();\n            const x = (e.clientX - rect.left) * window.devicePixelRatio || 1;\n            const y = (e.clientY - rect.top) * window.devicePixelRatio || 1;\n            chart.updateMousePos(x, y);\n        }\n\n        const mouseDown = (e) => {\n            const mouseMoveDownClosure = () => {\n\n                const rect = chartCanvas.getBoundingClientRect();\n                const sx = (e.clientX - rect.left) * window.devicePixelRatio || 1;\n                const sy = (e.clientY - rect.top) * window.devicePixelRatio || 1;\n\n                const mouseMoveDown = (e) => {\n                    const x = (e.clientX - rect.left) * window.devicePixelRatio || 1;\n                    const y = (e.clientY - rect.top) * window.devicePixelRatio || 1;\n                    chart.updateMousePos(x, y, sx, sy);\n                }\n\n                const mouseUp = (e) => {\n                    document.removeEventListener('mousemove', mouseMoveDown);\n\n                    // add new\n                    chartCanvas.addEventListener('mousemove', mouseMoveUp);\n                }\n\n                // add new \n                document.addEventListener('mousemove', mouseMoveDown);\n                document.addEventListener('mouseup', mouseUp);\n            }\n\n            chartCanvas.removeEventListener('mousemove', mouseMoveUp);\n            mouseMoveDownClosure();\n\n        }\n\n        // add new\n        chartCanvas.addEventListener('mousemove', mouseMoveUp);\n        chartCanvas.addEventListener('mousedown', mouseDown);\n\n    }\n\n    // create a new chart class for each canvas/curve combination\n    useEffect(() => {\n\n        if (chartCanvas) {\n            if (!hslChart) {\n                const chart = new HSLChart(chartCanvas, props.curve, props.curve.surface.type, onParamChange)\n                setHslChart(chart);\n                setupListeners(chart);\n                chart.update();\n            } else {\n                hslChart.setCurve(props.curve);\n                hslChart.onParamChange = onParamChange;\n                hslChart.update();\n            }\n\n        }\n\n    }, [chartCanvas, onParamChange]);\n\n    useEffect(() => {\n        if (paletteNeedsUpdate) {\n            props.updatePalettes(props.paletteType);\n            setPaletteNeedsUpdate(false);\n        }\n    }, [paletteNeedsUpdate, props.paletteType, props.updatePalettes])\n\n    return (\n\n        <div className='chart col-md-6'>\n\n            <div className='material-static chart-wrapper'>\n\n                <div className='row border-bottom'>\n\n                    <div className='col-md-12'>\n\n                        <h2>{props.title}</h2>\n\n                    </div>\n\n                </div>\n\n                <ChartControls\n                    section=\"top\"\n                    chartType={props.chartType}\n                    config={props.config}\n                    curve={props.curve}\n                    setCurve={props.setCurve}\n                    onParamChange={onParamChange}\n                />\n\n                <div className='row'>\n\n                    <div className='col-md-12'>\n\n                        <Canvas\n                            className='chart'\n                            onLoad={canvas => setChartCanvas(canvas)}\n                            onResize={() => updateCurve()}\n                            makeSquare={true}\n                        />\n\n                    </div>\n\n                </div>\n\n                <ChartControls\n                    section=\"bottom\"\n                    chartType={props.chartType}\n                    config={props.config}\n                    curve={props.curve}\n                    setCurve={props.setCurve}\n                    onParamChange={onParamChange}\n                    translateX={translateX}\n                    translateY={translateY}\n                    scaleX={scaleX}\n                    scaleY={scaleY}\n                    rotation={rotation}\n                />\n\n            </div>\n\n        </div>\n\n    );\n\n}\n\nexport default Chart;","export const downloadCanvas = (canvas, filename) => {\n\n    return new Promise((resolve, reject) => {\n\n        // create an \"off-screen\" anchor tag\n        const link = document.createElement('a');\n\n        link.download = filename + '.png';\n        link.href = canvas.toDataURL(\"image/png;base64\");\n\n        // fire moust event to trigger download\n        const e = document.createEvent(\"MouseEvents\");\n\n        e.initMouseEvent(\"click\", true, true, window,\n            0, 0, 0, 0, 0, false, false, false,\n            false, 0, null);\n\n        link.dispatchEvent(e);\n\n        resolve();\n\n    })\n\n}\n\nexport const logoGen = (size) => {\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = size;\n    canvas.height = size;\n\n    const lineWidth = size / 20;\n    const radius = (size / 2) - lineWidth;\n    const innerRadius = radius / 3.5;\n\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = '#000000';\n\n    const slices = 16;\n    const arcLength = - Math.PI * 2 / slices;\n\n    // fill inner circle with black\n    ctx.fillStyle = 'black';\n    ctx.arc(size / 2, size / 2, innerRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    for (let i = 0; i < 16; i++) {\n\n        ctx.fillStyle = `hsl(${(i / slices) * 360}, 100%, 50%)`;\n\n        const start = i * arcLength;\n        const end = i * arcLength + arcLength;\n\n        ctx.beginPath();\n        ctx.arc(size / 2, size / 2, radius, start, end, true);\n        if (i === slices - 1) {\n            ctx.lineWidth *= 0.5;\n        }\n        ctx.arc(size / 2, size / 2, innerRadius, end, start, false);\n        ctx.fill();\n        ctx.stroke();\n\n    }\n\n    // smooth out inner and outer borders\n    ctx.lineWidth = lineWidth;\n    ctx.beginPath();\n    ctx.arc(size / 2, size / 2, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(size / 2, size / 2, innerRadius, 0, Math.PI * 2);\n    ctx.stroke();\n\n    return canvas;\n\n}","// libs\nimport React, { useState, useEffect } from 'react';\nimport { downloadCanvas } from '../utils/canvas'\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\nfunction ExportImage(props) {\n\n    const [imgName, setImgName] = useState('');\n    const [imgWidth, setImgWidth] = useState(500);\n    const [imgHeight, setImgHeight] = useState(500);\n\n    useEffect(() => {\n        setImgName('colorcurve');\n    }, []);\n\n    const exportImage = (name, w, h) => {\n\n        const canvas = document.createElement('canvas');\n        canvas.id = 'export-canvas';\n        document.body.appendChild(canvas);\n        canvas.width = w;\n        canvas.height = h;\n        canvas.style.width = w;\n        canvas.style.height = h;\n\n        if (props.paletteType === 'continuous') {\n            props.palette.drawContinuousPalette(canvas, 128);\n        } else if (props.paletteType === 'discrete') {\n            props.palette.drawDiscretePalette(canvas, props.numStops);\n        }\n\n        downloadCanvas(canvas, name).then(() => {\n            console.log('downloading', canvas);\n            document.body.removeChild(document.getElementById('export-canvas'));\n        });\n\n    }\n    return (<>\n\n        <div className='row mt-3'>\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Name</label>\n            <div className='col-lg-4'>\n                <input\n                    id='export-image-name'\n                    className='form-control form-control-sm'\n                    placeholder='colorcurve.png'\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        setImgName(value);\n                    }} />\n            </div>\n        </div>\n\n        <div className='row'>\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Type</label>\n            <div className='col-lg-2'>\n                <select\n                    id='type-select'\n                    className='form-control form-control-sm'\n                    value={props.paletteType}\n                    onChange={(e) => {\n                        const newPaletteType = e.target.value;\n                        props.setPaletteType(newPaletteType);\n                    }}>\n                    <option value='continuous'>Continuous</option>\n                    <option value='discrete'>Discrete</option>\n                </select>\n            </div>\n            {props.paletteType === 'discrete' &&\n                <div className='col-lg-2'>\n                    <SmartInput\n                        labelWidth={.33}\n                        label='Num'\n                        step={1}\n                        min={1}\n                        max={256}\n                        maxDecimals={0}\n                        value={props.numStops}\n                        handleChange={(value) => props.setNumStops(parseInt(value))}\n                    />\n                </div>}\n        </div>\n\n\n        <div className='row'>\n\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Size</label>\n            <div className='col-lg-2'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='W'\n                    step={1}\n                    min={1}\n                    max={1080}\n                    maxDecimals={0}\n                    unitSymbol={'px'}\n                    value={imgWidth}\n                    handleChange={(value) => setImgWidth(parseInt(value))}\n                />\n            </div>\n\n            <div className='col-lg-2'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='H'\n                    step={1}\n                    min={1}\n                    max={1080}\n                    maxDecimals={0}\n                    unitSymbol={'px'}\n                    value={imgHeight}\n                    handleChange={(value) => setImgHeight(parseInt(value))}\n                />\n            </div>\n\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-5 d-flex'>\n                <button\n                    onClick={() => exportImage(imgName, imgWidth, imgHeight)}\n                    type=\"button\"\n                    className=\"btn btn-primary flex-grow-1\"\n                >\n                    Download Image\n            </button>\n            </div>\n        </div>\n\n    </>)\n\n}\n\nexport default ExportImage;","// libs\nimport React, { useState, useEffect, useRef } from 'react';\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\nfunction ExportHex(props) {\n\n    const [hexArray, setHexArray] = useState([]);\n\n    useEffect(() => {\n\n        if (props.palette) {\n            const hexArray = new Array(props.numStops).fill(null).map((d, i) => {\n                return props.palette.hexValueAt((i + 0.5) / props.numStops);\n            });\n            setHexArray(hexArray);\n        }\n\n    }, [props.palette])\n\n    return (<>\n\n        <div className='row mt-3'>\n            <div className='col-lg-4'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='Num'\n                    step={1}\n                    min={1}\n                    max={256}\n                    maxDecimals={0}\n                    value={props.numStops}\n                    handleChange={(value) => {\n                        value = parseInt(value);\n                        props.setNumStops(parseInt(value))\n                        const hexArray = new Array(value).fill(null).map((d, i) => {\n                            return props.palette.hexValueAt((i + 0.5) / value);\n                        });\n                        setHexArray(hexArray);\n                    }}\n                />\n            </div>\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-12'>\n                <p>All Hex Values:</p>\n                <div className='code-block p-2'>\n                    <code>{hexArray.join(', ')}</code>\n                </div>\n            </div>\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-12'>\n                <p>\n                    Single Hex Values:\n                </p>\n                <div className='col-lg-12'>\n                    {hexArray && hexArray.map((d) => {\n                        return (\n                            <div className='row p-1'>\n                                <div\n                                    className='hex-square col-lg-1 col-6'\n                                    style={{\n                                        backgroundColor: d\n                                    }}\n                                />\n                                <div className='col-lg-2 col-6'>\n                                    {d}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n\n    </>)\n\n}\n\nexport default ExportHex;","// libs\nimport React from 'react';\n\nfunction ExportJS(props) {\n\n    return (<>\n\n        <div className='row mt-3'>\n\n            <div className='col-12'>\n                Import module\n                </div>\n            <div className='col-12 code-block p-2'>\n\n                <code>\n\n                    {\"import { ColorPalette } from 'color-curves'\"}<br /><br />\n                    {\"const palette = new ColorPalette(\" + props.palette.exportPaletteParams() + \");\"}\n\n                </code>\n\n            </div>\n\n        </div>\n\n        <div className='row mt-1'>\n\n            <div className='col-12'>\n                CommonJS\n            </div>\n            <div className='col-12 code-block p-2'>\n\n                <code>\n                    {`const ColorCurves = require('color-curves')`}<br /><br />\n                    {\"const palette = new ColorCurves.ColorPalette(\" + props.palette.exportPaletteParams() + \");\"}\n                </code>\n\n            </div>\n\n        </div>\n\n        <div className='row mt-1'>\n\n            <div className='col-12'>\n                HTML\n                </div>\n            <div className='col-12 code-block p-2'>\n\n                <code>\n                    {`<script src=\"http://unpkg.com/color-curves\"></script>`}<br /><br />\n                    {\"const palette = new ColorCurves.ColorPalette(\" + props.palette.exportPaletteParams() + \");\"}\n                </code>\n\n            </div>\n\n        </div>\n\n        <div className='row mt-3 p-2'>\n\n            <div className='col-12'>\n\n                For additional information on importing Color Curves, see the <a href=\"https://github.com/mracette/color-curves-app\">documentation</a>.\n\n                </div>\n\n        </div>\n\n    </>)\n\n}\n\nexport default ExportJS;","// libs\nimport React, { useState, useEffect, useRef } from 'react';\nimport Modal from 'react-bootstrap/Modal';\n\n// components\nimport Canvas from '../components/Canvas';\nimport ExportImage from '../components/ExportImage';\nimport ExportHex from '../components/ExportHex';\nimport ExportJS from '../components/ExportJS';\n\nfunction ExportModal(props) {\n\n    // component versions of numstops and palettetype do not affect the editor/global values\n    const [numStops, setNumStops] = useState(12);\n    const [paletteType, setPaletteType] = useState('continuous');\n    const [nav, setNav] = useState('image');\n    const [exportCanvas, setExportCanvas] = useState(null);\n\n    const updatePalettes = (canvas, paletteType, stops) => {\n\n        if (nav !== 'hex') {\n\n            if (paletteType === 'continuous') {\n                props.palette.drawContinuousPalette(canvas);\n            } else if (paletteType === 'discrete') {\n                props.palette.drawDiscretePalette(canvas, stops);\n            }\n\n        } else if (nav === 'hex') {\n\n            props.palette.drawDiscretePalette(canvas, stops);\n\n        }\n\n    }\n\n    useEffect(() => {\n        if (exportCanvas) {\n            const numStopsVar = props.numStops || numStops;\n            const paletteTypeVar = props.paletteType || paletteType;\n            updatePalettes(exportCanvas, paletteTypeVar, numStopsVar);\n        }\n    }, [exportCanvas, props.palette, props.numStops, numStops, props.paletteType, paletteType, nav, updatePalettes])\n\n    return (\n        <Modal\n            size='lg'\n            show={props.show}\n            onHide={() => props.setShow(false)}\n        >\n\n            <Modal.Header closeButton>\n                <Modal.Title id=\"example-modal-sizes-title-lg\">Export Palette</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n\n                <div className='row'>\n                    <div className='col-12'>\n                        <Canvas\n                            className='palette preset'\n                            onLoad={canvas => setExportCanvas(canvas)}\n                        />\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12'>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={() => {\n                                props.setPalette(props.palette);\n                                props.setNav('editor');\n                                props.setShow(false);\n                            }}\n                        >\n                            Open in editor\n                        </button>\n                    </div>\n                </div>\n\n                <nav className='mt-3'>\n                    <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n                        <a className={`nav-item nav-link ${nav === 'image' && 'active'}`} onClick={() => setNav('image')} id=\"export-nav-image\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-home\" aria-selected={`${nav === 'image'}`}>Image</a>\n                        <a className={`nav-item nav-link ${nav === 'hex' && 'active'}`} onClick={() => setNav('hex')} id=\"export-nav-hex\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-profile\" aria-selected={`${nav === 'image'}`}>Hex</a>\n                        <a className={`nav-item nav-link ${nav === 'js' && 'active'}`} onClick={() => setNav('js')} id=\"export-nav-js\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-contact\" aria-selected={`${nav === 'image'}`}>JS</a>\n                    </div>\n                </nav>\n\n                <div className='row'>\n\n                    <div className='col-lg-12'>\n\n                        {nav === 'image' &&\n                            <ExportImage\n                                updatePalettes={() => updatePalettes(exportCanvas, props.paletteType, props.numStops)}\n                                palette={props.palette}\n                                paletteType={props.paletteType || paletteType}\n                                setPaletteType={props.setPaletteType || setPaletteType}\n                                numStops={props.numStops || numStops}\n                                setNumStops={props.setNumStops || setNumStops}\n                            />}\n\n                        {nav === 'hex' &&\n                            <ExportHex\n                                palette={props.palette}\n                                numStops={props.numStops || numStops}\n                                setNumStops={props.setNumStops || setNumStops}\n                            />}\n\n                        {nav === 'js' &&\n                            <ExportJS\n                                palette={props.palette}\n                            />}\n\n                    </div></div>\n\n            </Modal.Body>\n\n        </Modal>\n    )\n\n}\n\nexport default ExportModal;","// libs\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { ColorPalette } from 'color-curves';\n\n// components\nimport Canvas from './Canvas';\nimport Chart from './Chart';\nimport SmartInput from './smart-input/SmartInput';\nimport ExportModal from './ExportModal';\n\nfunction Editor(props) {\n\n  const config = [\n    {\n      id: 'arc',\n      category: 'geometry',\n      display: 'Geometry: Arc'\n    },\n    {\n      id: 'linear',\n      category: 'function',\n      display: 'Function: Linear'\n    },\n    {\n      id: 'polynomial',\n      category: 'function',\n      display: 'Function: Polynomial'\n    },\n    {\n      id: 'sinusoidal',\n      category: 'function',\n      display: 'Function: Sinusoidal'\n    },\n    {\n      id: 'exponential',\n      category: 'function',\n      display: 'Function: Exponential'\n    },\n    {\n      id: 'elastic',\n      category: 'function',\n      display: 'Function: Elastic'\n    },\n    {\n      id: 'back',\n      category: 'function',\n      display: 'Function: EaseBack'\n    },\n    {\n      id: 'bounce',\n      category: 'function',\n      display: 'Function: Bounce'\n    }\n  ];\n\n  const [paletteType, setPaletteType] = useState('continuous');\n  const [numStops, setNumStops] = useState(6);\n  const [paletteRange, setPaletteRange] = useState([0, 1]);\n  const [showModal, setShowModal] = useState(false);\n\n  // use default color palette and curve\n  const [hsCurve, setHsCurve] = useState(props.palette.hsCurve);\n  const [lCurve, setLCurve] = useState(props.palette.lCurve);\n  const [paletteCanvas, setPaletteCanvas] = useState(null);\n\n  // initialize refs\n  const paletteWrapper = useRef(null);\n\n  const updateCurveType = ((curve, newType) => {\n\n    let defaults = false;\n\n    if (curve === 'hsCurve') {\n\n      if (newType === 'arc' || hsCurve.type === 'arc') {\n        defaults = true\n      }\n\n      props.palette.setHsCurve(newType, defaults);\n\n      setHsCurve(props.palette.hsCurve);\n\n    } else if (curve === 'lCurve') {\n\n      if (newType === 'arc' || lCurve.type === 'arc') {\n        defaults = true\n      }\n\n      props.palette.setLCurve(newType, defaults);\n\n      setLCurve(props.palette.lCurve);\n\n    }\n\n  })\n\n  const updatePalettes = useCallback(() => {\n\n    if (paletteType === 'continuous' && paletteCanvas !== null) {\n\n      props.palette.drawContinuousPalette(paletteCanvas);\n\n    } else if (paletteType === 'discrete' && paletteCanvas !== null) {\n\n      props.palette.drawDiscretePalette(paletteCanvas, numStops);\n\n    }\n\n  }, [paletteType, paletteCanvas, props.palette, numStops])\n\n  useEffect(() => {\n    updatePalettes(paletteType);\n  }, [paletteType, updatePalettes])\n\n  useEffect(() => {\n    setPaletteRange([props.palette.start, props.palette.end])\n    setHsCurve(props.palette.hsCurve);\n    setLCurve(props.palette.lCurve);\n  }, [props.palette])\n\n  return (\n\n    <>\n\n      <div ref={paletteWrapper} className='material-static palette-wrapper sticky-top'>\n\n        <div className='row border-bottom'>\n          <div className='col-auto align-items-center d-flex align-items-center'>\n            <h2>Palette</h2>\n            <button type=\"button\"\n              class=\"btn mb-8 btn-light btn-sm\"\n              style={{\n                \"margin-bottom\": \"8px\",\n                \"margin-left\": \"8px\"\n              }}\n              onClick={() => {\n                setShowModal(!showModal);\n              }}\n              type=\"button\"\n            >\n              Export\n          </button>\n          </div>\n          <div className='col-auto ml-auto d-flex'>\n            <form className='m-auto'>\n              <div className=\"custom-control custom-switch\">\n                <input\n                  type=\"checkbox\"\n                  id='pinned-switch'\n                  className=\"custom-control-input\"\n                  defaultChecked={true}\n                  onChange={(e) => {\n                    const sticky = e.target.checked;\n                    if (sticky) {\n                      paletteWrapper.current.classList.add('sticky-top');\n                    } else {\n                      paletteWrapper.current.classList.remove('sticky-top');\n                    }\n                  }}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"pinned-switch\">Pinned</label>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <form>\n\n          {/* PALETTE OPTIONS LINE 1 */}\n          <div className='row'>\n\n            {/* PALETTE TYPE */}\n            <label className='col-lg-1 col-2 col-form-label-sm' htmlFor='type-select'>Type</label>\n            <div className='col-lg-2 col-5'>\n              <select\n                id='type-select'\n                className='form-control form-control-sm'\n                defaultValue={paletteType}\n                onChange={(e) => {\n                  const newPaletteType = e.target.value;\n                  setPaletteType(newPaletteType);\n                }}>\n                <option value='continuous'>Continuous</option>\n                <option value='discrete'>Discrete</option>\n              </select>\n            </div>\n\n            {/* NUM STOPS */}\n            {paletteType === 'discrete' &&\n              <div className='col-lg-2 col-5'>\n                <SmartInput\n                  labelWidth={.33}\n                  label='Num'\n                  step={1}\n                  min={1}\n                  max={256}\n                  maxDecimals={0}\n                  value={numStops}\n                  handleChange={(value) => setNumStops(parseInt(value))}\n                />\n              </div>\n            }\n\n          </div>\n\n          {/* PALETTE OPTIONS LINE 2 */}\n          <div className='row'>\n\n            {/* PALETTE TYPE */}\n            <label className='col-lg-1 col-2 col-form-label-sm' htmlFor='type-select'>Range</label>\n\n            <div className='col-lg-2 col-5'>\n              <SmartInput\n                labelWidth={.33}\n                label='Start'\n                step={.01}\n                min={0}\n                max={paletteRange[1]}\n                maxDecimals={2}\n                value={paletteRange[0]}\n                handleChange={(value) => {\n                  props.palette.setStart(parseFloat(value));\n                  setPaletteRange([parseFloat(value), paletteRange[1]]);\n                }}\n              />\n            </div>\n\n            <div className='col-lg-2 col-5'>\n              <SmartInput\n                labelWidth={.33}\n                label='End'\n                step={.01}\n                min={paletteRange[0]}\n                max={1}\n                maxDecimals={2}\n                value={paletteRange[1]}\n                handleChange={(value) => {\n                  props.palette.setEnd(parseFloat(value));\n                  setPaletteRange([paletteRange[0], parseFloat(value)]);\n                }}\n              />\n            </div>\n\n          </div>\n\n        </form>\n\n        <div className='row'>\n          <div className='col-12'>\n            <Canvas\n              onLoad={(canvasRef) => setPaletteCanvas(canvasRef)}\n              onResize={updatePalettes}\n              className='palette editor-palette'\n            />\n          </div>\n        </div>\n\n        <ExportModal\n          show={showModal}\n          setShow={setShowModal}\n          palette={props.palette}\n          numStops={numStops}\n          setNumStops={setNumStops}\n          paletteType={paletteType}\n          setPaletteType={setPaletteType}\n        />\n\n      </div>\n\n      <div className='row' id='charts'>\n\n        <Chart\n          title='Hue + Saturation'\n          setCurve={(type) => updateCurveType('hsCurve', type)}\n          curve={hsCurve}\n          config={config}\n          updatePalettes={updatePalettes}\n        />\n\n        <Chart\n          title='Lightness'\n          setCurve={(type) => updateCurveType('lCurve', type)}\n          curve={lCurve}\n          config={config}\n          updatePalettes={updatePalettes}\n        />\n\n      </div>\n\n    </>\n\n  );\n\n}\n\nexport default Editor;","// libs\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap';\n\n// components\nimport Canvas from './Canvas';\nimport ExportModal from './ExportModal';\n\n// palettes\nimport {\n    WarmMagma,\n    AllAround,\n    BeyondBelief,\n    UnAmerican,\n    CandyPaint,\n    GoldfishDeluxe,\n    PhytoPlankton,\n    TrixSky,\n    PowerWashed,\n    CoralScrub,\n    PolarBeyond,\n    // OnVacation,\n    StockImage\n} from 'color-curves';\n\nfunction Presets(props) {\n\n    const [showModal, setShowModal] = useState(false);\n    const [selectedPalette, setSelectedPalette] = useState(null);\n\n    const presets = [\n        new WarmMagma(),\n        new AllAround(),\n        // new OnVacation(),\n        new UnAmerican(),\n        new BeyondBelief(),\n        new PowerWashed(),\n        new CandyPaint(),\n        new StockImage(),\n        new GoldfishDeluxe(),\n        new PhytoPlankton(),\n        new TrixSky(),\n        new CoralScrub(),\n        new PolarBeyond()\n    ];\n\n    return (<>\n        {presets.map((preset, i) => {\n            return (\n                <div\n                    onClick={(e) => {\n                        setSelectedPalette(preset);\n                        setShowModal(true);\n                    }}\n                    className='material palette-wrapper'>\n                    <h4>{preset.name}</h4>\n                    <h6>by {preset.author}</h6>\n                    <Canvas\n                        className='palette preset'\n                        callback={(canvas) => preset.drawContinuousPalette(canvas, 128)}\n                        onResize={(canvas) => preset.drawContinuousPalette(canvas, 128)}\n                    />\n                    <Canvas\n                        className='palette preset'\n                        callback={(canvas) => preset.drawDiscretePalette(canvas, 6)}\n                        onResize={(canvas) => preset.drawDiscretePalette(canvas, 6)}\n                    />\n                </div>\n            )\n        })}\n        <ExportModal\n            setNav={props.setNav}\n            show={showModal}\n            setShow={setShowModal}\n            palette={selectedPalette}\n            setPalette={props.setPalette}\n        /></>\n    );\n\n}\n\nexport default Presets;\n","// libs\nimport React, { useState, useRef, useEffect } from 'react';\nimport { ColorPalette } from 'color-curves';\nimport 'bootstrap';\n\n// components\nimport About from './About';\nimport Editor from './Editor'\nimport Presets from './Presets';\n\n// styles\nimport 'typeface-poppins';\nimport '../styles/app.scss';\n\n// other\nimport logo from '../img/logo192.png';\n\nfunction App() {\n\n  const [darkMode, setDarkMode] = useState(false);\n  const [nav, setNav] = useState('editor');\n  const [palette, setPalette] = useState(new ColorPalette());\n\n  return (<>\n\n    <nav\n      className={`navbar navbar-expand-lg navbar-dark ${nav !== \"editor\" ? \"sticky-top\" : \"\"}`}\n      style={{ backgroundColor: '#232F34' }}\n    >\n\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <img src={logo} className=\"logo\" onClick={() => setNav('editor')}></img>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className={`nav-item ${nav === 'editor' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('editor')} href=\"JavaScript:Void(0);\">Editor <span className=\"sr-only\">(current)</span></a>\n          </li>\n          <li className={`nav-item ${nav === 'presets' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('presets')} href=\"JavaScript:Void(0);\">Presets</a>\n          </li>\n          <li className={`nav-item ${nav === 'about' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('about')} href=\"JavaScript:Void(0);\">About</a>\n          </li>\n          <li className=\"nav-item dropdown\">\n            <a className=\"nav-link dropdown-toggle\" href=\"JavaScript:Void(0);\" id=\"theme-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              Theme\n            </a>\n            <div className=\"dropdown-menu\" aria-labelledby=\"theme-dropdown\">\n              <a className=\"dropdown-item active\" href=\"JavaScript:Void(0);\">Light</a>\n              <a className=\"dropdown-item disabled\" href=\"JavaScript:Void(0);\">Dark (coming soon)</a>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </nav>\n\n    <div className='container' id='app'>\n      <div className=\"tab-content\">\n        <div className={`tab-pane fade ${nav === 'editor' ? 'show active' : ''}`} id=\"home\" role=\"tabpanel\" aria-labelledby=\"editor-button\">\n          <Editor\n            palette={palette}\n            setPalette={setPalette}\n          />\n        </div>\n        <div className={`tab-pane fade ${nav === 'presets' ? 'show active' : ''}`} id=\"presets\" role=\"tabpanel\" aria-labelledby=\"presets-button\">\n          <Presets\n            setNav={setNav}\n            setPalette={setPalette}\n          />\n        </div>\n        <div className={`tab-pane fade ${nav === 'about' ? 'show active' : ''}`} id=\"about\" role=\"tabpanel\" aria-labelledby=\"about-button\">\n          <About />\n        </div>\n      </div>\n    </div>\n\n  </>);\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
{"version":3,"sources":["img/logo192.png","lib/js/surfaces/UnitSquare.js","lib/js/surfaces/UnitCircle.js","lib/utils/math.js","lib/js/Curve.js","lib/js/geometries/Arc.js","lib/js/functions/Function.js","lib/js/functions/Linear.js","lib/js/functions/Polynomial.js","lib/js/functions/Sinusoidal.js","lib/js/functions/Exponential.js","lib/js/functions/Elastic.js","lib/js/functions/Back.js","lib/js/functions/Bounce.js","lib/utils/color.js","lib/utils/common.js","lib/js/ColorPalette.js","components/About.js","components/Canvas.js","components/smart-input/SmartInput.js","components/ChartControls.js","drawing/normalize.js","drawing/drawEndPoints.js","drawing/drawOrientation.js","drawing/drawCurve.js","drawing/drawBlankChart.js","components/Chart.js","lib/palettes/AllAround.js","lib/utils/canvas.js","components/ExportImage.js","components/ExportHex.js","components/ExportJS.js","components/ExportModal.js","components/Editor.js","lib/palettes/WarmMagma.js","lib/palettes/BeyondBelief.js","lib/palettes/UnAmerican.js","lib/palettes/CandyPaint.js","lib/palettes/GoldfishDeluxe.js","lib/palettes/PhytoPlankton.js","lib/palettes/TrixSky.js","lib/palettes/PowerWashed.js","lib/palettes/CoralScrub.js","lib/palettes/PolarBeyond.js","lib/palettes/StockImage.js","components/Presets.js","components/App.js","index.js"],"names":["module","exports","UnitSquare","this","type","cx","cy","x0","x1","y0","y1","x","y","UnitCircle","r","cartToPolar","Math","sqrt","theta","atan2","Curve","options","overflow","reverse","rotation","scale","surface","translation","isCurve","setOverflow","setReverse","setRotation","setScale","setSurface","setTranslation","console","warn","prevCoords","resolution","clampStart","clampEnd","i","coords","getCurveCoordsAt","clamped","setScaleX","setScaleY","setTranslateX","setTranslateY","n","category","fn","error","getFnCoordsAt","sin","cos","xRot","yRot","outOfBounds","min","max","polarCoords","cartCoordsClamped","Arc","radius","angleStart","angleEnd","PI","angleOffset","setRadius","setAngleStart","setAngleEnd","setAngleOffset","setFunction","arcAngle","Function","Linear","Polynomial","variation","exponent","setExponent","setVariation","e","d3","Sinusoidal","Exponential","Elastic","amplitude","period","setAmplitude","setPeriod","a","p","Back","overshoot","setOvershoot","s","Bounce","hslToRgb","h","l","rgb1","c","abs","hp","isNaN","m","round","g","b","validJson","o","JSON","parse","ColorPalette","hsCurve","lCurve","setHsCurve","setLCurve","updateCurveClampBound","start","end","name","author","setStart","setEnd","setName","setAuthor","initializeCurve","precision","pDigits","parseFloat","toFixed","Object","assign","entries","map","k","v","curveParamsSet","getParamSet","lCurveParams","hsCurveParams","forEach","param","undefined","paletteParamsSet","paletteParams","stringify","canvas","numStops","ctx","getContext","stops","hsl","hslValueAt","fillStyle","fillRect","width","height","gradient","createLinearGradient","addColorStop","curveType","setClampBounds","hsStart","hsEnd","lStart","lEnd","hsCartCoords","hsPolarCoords","hue","sat","lCartCoords","getColorValues","printHsl","printRgb","toString","slice","rgbToHex","About","className","href","Canvas","props","canvasRef","useRef","useEffect","current","clientWidth","clientHeight","listen","window","addEventListener","onResize","callback","removeEventListener","id","ref","SmartInput","numberRegex","inputRef","useState","value","prevInputValue","setPrevInputValue","sendValueToInput","applyConstraints","isValidInput","match","num","maxDecimals","pow","sendValueToHandler","handleChange","conversion","handleUserInput","newValue","handleMouseOrTouchDown","startPosition","startValue","document","onselectstart","onMouseOrTouchMove","clientX","touches","stepDelta","step","onmousemove","ontouchmove","onmouseup","ontouchend","style","defaultStyles","display","flexFlow","alignItems","color","border","onMouseDown","preventDefault","onTouchStart","flexDirection","justifyContent","flexGrow","flexShrink","flexBasis","labelWidth","cursor","fontSize","padding","margin","backgroundColor","borderTopLeftRadius","borderBottomLeftRadius","label","onClick","setSelectionRange","length","onBlur","currentValue","onChange","target","flex","borderRadius","resetButton","resetAction","borderTopRightRadius","borderBottomRightRadius","String","fromCharCode","ChartControls","onParamChange","curve","updateCurve","htmlFor","newCurveType","setCurve","onCurveChange","config","option","key","unitSymbol","nxCircle","nxSquare","nyCircle","nySquare","offset","drawEndPoints","nx","ny","lineWidth","beginPath","arc","stroke","fill","moveTo","drawHsOrientation","rotatePoint","font","textAlign","textBaseline","measureText","p0","p1","p2","lineTo","fillText","drawLOrientation","drawHsCurve","alpha","strokeStyle","drawLCurve","drawHsChart","arcWidth","arcPadding","radiusEnd","createRadialGradient","drawLChart","fillRectGradient","Chart","updatePalettes","title","chartType","AllAround","downloadCanvas","filename","Promise","resolve","reject","link","createElement","download","toDataURL","createEvent","initMouseEvent","dispatchEvent","ExportImage","imgName","setImgName","imgWidth","setImgWidth","imgHeight","setImgHeight","placeholder","paletteType","newPaletteType","setPaletteType","setNumStops","parseInt","then","removeProperty","exportImage","exportCanvas","ExportHex","hexArray","setHexArray","palette","Array","d","hexValueAt","join","ExportJS","exportPaletteParams","ExportModal","nav","setNav","drawContinuousPalette","drawDiscretePalette","numStopsVar","paletteTypeVar","Modal","size","show","onHide","setShow","Header","closeButton","Title","Body","setPalette","role","data-toggle","aria-controls","aria-selected","Editor","paletteRange","setPaletteRange","showModal","setShowModal","paletteCanvas","setPaletteCanvas","paletteWrapper","updateCurveType","useCallback","newType","defaultChecked","checked","classList","add","remove","defaultValue","WarmMagma","BeyondBelief","UnAmerican","CandyPaint","GoldfishDeluxe","PhytoPlankton","TrixSky","PowerWashed","CoralScrub","PolarBeyond","StockImage","Presets","selectedPalette","setSelectedPalette","presets","preset","App","class","data-target","aria-expanded","aria-label","src","logo","aria-haspopup","aria-labelledby","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6f228198.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.1cbe3163.png\";","/**\n * A square with sides of length 1 and a center point at (0.5, 0.5)\n */\n\nexport default class UnitSquare {\n\n    constructor() {\n        this.type = 'unitSquare';\n        this.cx = 0.5;\n        this.cy = 0.5;\n        this.x0 = 0;\n        this.x1 = 1;\n        this.y0 = 0;\n        this.y1 = 1;\n    }\n\n    static outOfBounds(x, y) {\n        return x < 0 || x > 1 || y < 0 || y > 1;\n    }\n\n}\n","/**\n * A circle with a radius of 1 and a center point at (0, 0)\n */\n\nexport default class UnitCircle {\n\n    constructor() {\n        this.type = 'unitCircle';\n        this.cx = 0;\n        this.cy = 0;\n        this.r = 1;\n    }\n\n    static outOfBounds(x, y) {\n        return x * x + y * y > 1;\n    }\n\n}\n","export const cartToPolar = (x, y) => {\n    return {\n        r: Math.sqrt(x * x + y * y),\n        theta: Math.atan2(y, x)\n    };\n}\n\nexport const polarToCart = (r, theta) => {\n    return {\n        x: r * Math.cos(theta),\n        y: r * Math.sin(theta)\n    };\n}\n\nexport const degToRad = (deg) => {\n    return deg * Math.PI / 180;\n}\n\nexport const radToDeg = (rad) => {\n    return rad * 180 / Math.PI;\n}","\nimport UnitSquare from '../js/surfaces/UnitSquare';\nimport UnitCircle from '../js/surfaces/UnitCircle';\nimport { cartToPolar, polarToCart } from '../utils/math';\n\n/**\n * Represents a relationship between a 1-dimensional input bounded by [0, 1] and a 2-dimensional\n * output bounded by the perimeter of the surface on which the curve lies.\n * \n * The surface must be either a unit circle (to represent the Hue-Saturation space) or a \n * unit square (to represent the lightness space).\n * \n * Curves are not instantiated directly.\n */\n\nexport default class Curve {\n\n    /**\n     * Creates a new Curve.\n     * @param {object} [options] Optional properties of the curve\n     * @param {object} [options.overflow] Defines how to adjust output that extends past the surface perimeter\n     * @param {boolean} [options.reverse] Whether to reverse the direction of the curve\n     * @param {number} [options.rotation] Z-axis rotation of the curve in radians\n     * @param {object} [options.scale] 2-dimensional scale of the curve\n     * @param {number} [options.scale.x] Translation along the local X axis\n     * @param {number} [options.scale.y] Translation along the local Y axis\n     * @param {string} [options.surface] The surface on which to draw the curve\n     * @param {object} [options.translation] 2-dimensional translation of the curve\n     * @param {number} [options.translation.x] Translation along the local X axis\n     * @param {number} [options.translation.y] Translation along the local Y axis\n     */\n\n    constructor(options) {\n\n        const {\n            overflow,\n            reverse,\n            rotation,\n            scale,\n            surface,\n            translation\n        } = options;\n\n        this.isCurve = true;\n        this.surface = {};\n        this.scale = {};\n        this.translation = {};\n\n        this.setOverflow(overflow);\n        this.setReverse(reverse);\n        this.setRotation(rotation);\n        this.setScale(scale);\n        this.setSurface(surface);\n        this.setTranslation(translation);\n\n    }\n\n    static getParamSet() {\n\n        const paramsList = [\n            'type', 'overflow', 'reverse', // curve\n            'translation', 'translateX', 'translateY', 'scale', 'scaleX', 'scaleY', 'rotation', // tranformations\n            'angleStart', 'angleEnd', 'angleOffset', 'radius', // arc\n            'variation', // function\n            'exponent', // poly\n            'amplitude', 'period', // elastic\n            'overshoot' // back\n        ];\n\n        return paramsList\n\n    }\n\n    /**\n     * Set the curve's surface.\n     * @param {object|string} surface The surface on which to draw the curve\n     */\n\n    setSurface(surface = 'unitSquare') {\n\n        if (surface === 'unitSquare') {\n\n            this.surface = new UnitSquare();\n\n        } else if (surface === 'unitCircle') {\n\n            this.surface = new UnitCircle();\n\n        } else {\n\n            console.warn(\n                \"Invalid surface type. Options are 'unitCircle' (for H/S components) or 'unitSquare' (for L component). \",\n                \"Using unitSquare instead.\"\n            );\n\n            surface = new UnitSquare();\n\n        }\n\n    }\n\n    /**\n     * Samples the curve and sets clampStart and clampEnd to the input values where the curve intersects the perimeter. If the \n     * outputs at 0 or 1 are inside of the surface then the clampStart and clampEnd are set to 0 and 1, respectively.\n     * @param {number} [resolution = 128] Number of samples used to determine the clamp bounds\n     */\n\n    setClampBounds(resolution = 128) {\n\n        let prevCoords;\n        let clampStart = null;\n        let clampEnd = null;\n        let i = 0;\n\n        while (i <= resolution && (clampStart === null || clampEnd === null)) {\n\n            const coords = this.getCurveCoordsAt(i / resolution);\n\n            if (i === 0) {\n\n                // if the starting point is inside the surface, then the clamp start is the same as the start\n                if (!coords.clamped) clampStart = i / resolution;\n\n            } else {\n\n                // set start clamp if the prev point is outside the surface, but the current point is inside\n                if (clampStart === null && prevCoords.clamped && !coords.clamped) {\n                    clampStart = i / resolution;\n                }\n\n                // set end clamp if the prev point is inside the surface, but the current point is outside\n                if (clampEnd === null && !prevCoords.clamped && coords.clamped) {\n                    clampEnd = i / resolution;\n                }\n\n            }\n\n            // if the entire curve is outside of the surface, set the clampEnd to 0\n            if (i === resolution && coords.clamped && clampStart === null && clampEnd === null) {\n                clampEnd = 0;\n            }\n\n            prevCoords = coords\n            i++;\n\n        }\n\n        this.clampStart = clampStart === null ? 0 : clampStart;\n        this.clampEnd = clampEnd === null ? 1 : clampEnd;\n\n    }\n\n    /**\n     * Sets the overflow behavior.\n     * @param {string} [overflow = 'clamp'] Method for adjusting output that extends past the surface perimeter\n     */\n\n    setOverflow(overflow = 'clamp') {\n\n        if (overflow === 'clamp' || overflow === 'project') {\n\n            this.overflow = overflow;\n\n        } else {\n\n            console.warn(\"Overflow value must be either 'clamp' or 'project'. Using clamp.\");\n            this.overflow = 'clamp';\n\n        }\n\n    }\n\n    /**\n     * Sets the reverse flag.\n     * @param {boolean} [reverse = false] Whether to reverse the direction of the curve\n     */\n\n    setReverse(reverse = false) {\n\n        this.reverse = reverse;\n\n    }\n\n    /**\n     * Sets the rotation of the curve\n     * @param {boolean} [rotation = 0] Z-Axis rotation of the curve in radians\n     */\n\n    setRotation(rotation = 0) {\n\n        this.rotation = rotation;\n\n    }\n\n    /**\n     * Sets the scale of the curve\n     * @param {object} [options.scale] 2-dimensional scale of the curve\n     * @param {number} [options.scale.x] Scale along the local X axis\n     * @param {number} [options.scale.y] Scale along the local Y axis\n     */\n\n    setScale(scale) {\n\n        if (typeof scale === 'object' && typeof scale.x === 'number') {\n\n            this.setScaleX(scale.x);\n\n        } else {\n\n            this.setScaleX();\n\n        }\n\n        if (typeof scale === 'object' && typeof scale.y === 'number') {\n\n            this.setScaleY(scale.y);\n\n        } else {\n\n            this.setScaleY();\n\n        }\n\n    }\n\n    /**\n     * Sets the X scale of the curve. Default depends on the surface type.\n     * @param {number} [x] Scale along the local X axis\n     */\n\n    setScaleX(x) {\n\n        if (typeof x === 'number') {\n\n            this.scale.x = x;\n\n        } else {\n\n            this.scale.x = 1;\n\n        }\n\n    }\n\n    /**\n     * Sets the Y scale of the curve. Default depends on the surface type.\n     * @param {number} [y] Scale along the local Y axis\n     */\n\n    setScaleY(y) {\n\n        if (typeof y === 'number') {\n\n            this.scale.y = y;\n\n        } else {\n\n            this.scale.y = 1;\n\n        }\n\n    }\n\n    /**\n     * Sets the translation of the curve\n     * @param {object} [options.translation] 2-dimensional translation of the curve\n     * @param {number} [options.translation.x] Translation along the local X axis\n     * @param {number} [options.translation.y] Translation along the local Y axis\n     */\n\n    setTranslation(translation) {\n\n        if (typeof translation === 'object' && typeof translation.x === 'number') {\n\n            this.setTranslateX(translation.x);\n\n        } else {\n\n            this.setTranslateX();\n\n        }\n\n        if (typeof translation === 'object' && typeof translation.y === 'number') {\n\n            this.setTranslateY(translation.y);\n\n        } else {\n\n            this.setTranslateY();\n\n        }\n\n    }\n\n    /**\n     * Sets the translation of the curve along the local X axis. The default values depends on the surface type.\n     * @param {number} [x] Translation along the local X axis\n     */\n\n    setTranslateX(x) {\n\n        if (typeof x === 'number') {\n\n            this.translation.x = x;\n\n        } else if (this.surface.type === 'unitSquare') {\n\n            this.translation.x = 0.5;\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            this.translation.x = 0;\n\n        }\n\n    }\n\n    /**\n     * Sets the translation of the curve along the local Y axis. The default values depends on the surface type.\n     * @param {number} [y] Translation along the local Y axis\n     */\n\n    setTranslateY(y) {\n\n        if (typeof y === 'number') {\n\n            this.translation.y = y;\n\n        } else if (this.surface.type === 'unitSquare') {\n\n            this.translation.y = 0.5;\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            this.translation.y = 0;\n\n        }\n\n    }\n\n    /**\n     * Returns the x and y coordinates associated with a number n in the range [0, 1].\n     * @param {object} n A number between 0 and 1 representing the proportion of the curve to traverse\n     * @returns {object.<string, number>} The x and y coordinates of the function at a point n\n     */\n\n    getFnCoordsAt(n) {\n\n        if (this.category === 'geometry') {\n\n            return this.fn(n);\n\n        } else if (this.category === 'function') {\n\n            return { x: n, y: this.fn(n) }\n\n        }\n\n    }\n\n\n    /**\n     * Applies transformation to the coordinates of the underlying function for the curve. Returns an object containing\n     * the new x and y coordinates and well as a 'clamped' flag that is true for coordinates outside of the surface perimeter.\n     * @param {object} n A number between 0 and 1 representing the proportion of the curve to traverse\n     * @returns {object.<string, number|boolean>} The x and y coordinates of the curve at a point n\n     */\n\n    getCurveCoordsAt(n) {\n\n        if (n < 0 || n > 1) {\n            console.error('n must be a number in the range [0, 1]');\n            return null;\n        }\n\n        // take mirror of n if reversed\n        if (this.reverse) n = (1 - n);\n\n        // get x and y from the curve's function\n        let { x, y } = this.getFnCoordsAt(n);\n\n        // scale each point\n        x *= this.scale.x;\n        y *= this.scale.y;\n\n        // translate each point\n        x += this.translation.x;\n        y += this.translation.y;\n\n        // rotate around surface center\n        const sin = Math.sin(this.rotation);\n        const cos = Math.cos(this.rotation);\n        const xRot = ((x - this.surface.cx) * cos - (y - this.surface.cy) * sin + this.surface.cx);\n        const yRot = ((x - this.surface.cy) * sin + (y - this.surface.cy) * cos + this.surface.cy);\n\n        // clamp methodology depends on the surface type\n        if (this.surface.type === 'unitSquare') {\n\n            const clamped = UnitSquare.outOfBounds(xRot, yRot);\n            const xClamp = Math.min(1, Math.max(0, xRot));\n            const yClamp = Math.min(1, Math.max(0, yRot));\n\n            return {\n                x: xClamp,\n                y: yClamp,\n                clamped\n            };\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            // convert to polar in order to clamp the radius\n            const clamped = UnitCircle.outOfBounds(xRot, yRot);\n            const polarCoords = cartToPolar(xRot, yRot);\n            const cartCoordsClamped = polarToCart(Math.max(-1, Math.min(1, polarCoords.r)), polarCoords.theta);\n\n            return {\n                x: cartCoordsClamped.x,\n                y: cartCoordsClamped.y,\n                clamped\n            };\n\n        }\n\n    }\n\n}","import Curve from '../Curve';\n\n/**\n * Represents a segment of a circle\n * @extends Curve\n */\n\nexport default class Arc extends Curve {\n\n    /**\n     * Creates a new Arc.\n     * @param {object} [options] Optional properties of the arc\n     * @param {number} [options.radius] Radius of the arc\n     * @param {number} [options.angleStart = 0] The angle in radians of the segment start\n     * @param {number} [options.angleEnd = 2PI] The angle in radians of the segment end\n     * @param {number} [options.angleOffset = 0] The degrees in radians by which the angleStart and angleEnd are offset\n     * @param {...*} [curveOptions] See {@link Curve}\n     */\n\n    constructor(options) {\n\n        const {\n            radius,\n            angleStart = 0,\n            angleEnd = Math.PI * 2,\n            angleOffset = 0\n        } = options\n\n        super({...options});;\n\n        this.type = 'arc';\n        this.category = 'geometry';\n        this.fn = null;\n\n        this.setRadius(radius);\n        this.setAngleStart(angleStart);\n        this.setAngleEnd(angleEnd);\n        this.setAngleOffset(angleOffset);\n\n        this.setFunction();\n\n    }\n\n    setFunction() {\n\n        this.fn = (n) => {\n\n            const arcAngle = n * (this.angleEnd - this.angleStart);\n            const theta = this.angleOffset + this.angleStart + arcAngle;\n\n            return {\n                x: this.radius * Math.cos(theta),\n                y: this.radius * Math.sin(theta)\n            };\n\n        }\n\n    }\n\n    /**\n     * Sets the radius of the arc. If no value is passed a default is set based on the surface type.\n     * @param {object} [radius] Radius of the arc\n     */\n\n    setRadius(radius) {\n\n        if(typeof radius === 'number') {\n\n            this.radius = radius;\n\n        } else if(this.surface.type === 'unitSquare') {\n\n            this.setRadius(0.25);\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            this.setRadius(0.5);\n            \n        }\n\n    }\n\n    /**\n     * Sets the angle in radians of the ending point of the segment.\n     * @param {object} [angleStart = 0] The angle in radians\n     */\n\n    setAngleStart(angleStart = 0) {\n\n        this.angleStart = angleStart;\n\n    }\n\n    /**\n     * Sets the angle in radians of the starting point of the segment.\n     * @param {object} [angleEnd = 0] The angle in radians\n     */\n\n    setAngleEnd(angleEnd = 0) {\n\n        this.angleEnd = angleEnd;\n\n    }\n\n    /**\n     * Sets the degrees in radians by which the angleStart and angleEnd are offset\n     * @param {object} [angleOffset = 0] The degrees in radians\n     */\n\n    setAngleOffset(angleOffset = 0) {\n\n        this.angleOffset = angleOffset;\n\n    }\n\n}","import Curve from '../Curve';\n\n/**\n * Represents a generic function that can be further extended by a child class that specified a 1:1 relationship between a \n * single input and single output\n * @extends Curve\n * @param {object} [options] Optional properties of the function\n */\n\nexport default class Function extends Curve {\n\n    constructor(options = {}) {\n\n        super({ ...options });\n\n        const {\n            scale,\n            translation\n        } = options;\n\n        this.category = 'function';\n\n        this.fn = (n) => n;\n\n        // override parents default settings\n        this.setTranslation(translation);\n        this.setScale(scale);\n\n    }\n\n    setScaleY(y) {\n\n        if (typeof y === 'number') {\n\n            this.scale.y = y;\n\n        } else if (this.surface.type === 'unitSquare') {\n\n            this.scale.y = 0.5;\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            this.scale.y = Math.sin(Math.PI * (9 / 8)) * -2;\n\n        }\n\n    }\n\n    setScaleX(x) {\n\n        if (typeof x === 'number') {\n\n            this.scale.x = x;\n\n        } else if (this.surface.type === 'unitSquare') {\n\n            this.scale.x = 1;\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            this.scale.x = Math.cos(Math.PI * (9 / 8)) * -2;\n\n        }\n\n    }\n\n    setTranslateX(x) {\n\n        if (typeof x === 'number') {\n\n            this.translation.x = x;\n\n        } else if (this.surface.type === 'unitSquare') {\n\n            this.translation.x = 0;\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            this.translation.x = Math.cos(Math.PI * (9 / 8));\n\n        }\n\n    }\n\n    setTranslateY(y) {\n\n        if (typeof y === 'number') {\n\n            this.translation.y = y;\n\n        } else if (this.surface.type === 'unitSquare') {\n\n            this.translation.y = 0.25;\n\n        } else if (this.surface.type === 'unitCircle') {\n\n            this.translation.y = Math.sin(Math.PI * (9 / 8));\n\n        }\n\n    }\n\n}","import Function from './Function';\n\n/**\n * Creates a linear curve.\n * @extends Function\n * @param {object} [options] Optional properties of the function\n */\n\nexport default class Linear extends Function {\n\n    constructor(options) {\n        \n        super({...options});\n\n        this.type = 'linear';\n\n    }\n\n}","import Function from './Function';\nimport * as d3 from 'd3-ease';\n\n/**\n * Creates an ease \"elastic\" curve.\n * @extends Function\n * @param {object} [options] Optional properties of the function\n * @param {string} [options.exponent] The exponent of the function\n */\n\nexport default class Polynomial extends Function {\n\n    constructor(options) {\n\n        const {\n            variation,\n            exponent\n        } = options;\n        \n        super({...options});\n\n        this.type = 'polynomial';\n        this.fn = null;\n\n\n        this.setExponent(exponent);\n        this.setVariation(variation);\n\n    }\n\n    setExponent(e = 3) {\n\n        if(e > 0) {\n\n            this.exponent = e;\n            this.setFunction();\n\n        } else {\n\n            console.error('Exponent must be a number greater than 0');\n\n        }\n\n    }\n\n    /**\n     * Sets the easing variation. See https://easings.net/\n     * @param {string} variation The curve variation ('in', 'out', or 'in-out')\n     */\n\n    setVariation(variation = 'in') {\n\n        if(variation === 'in' || variation === 'out' || variation === 'in-out'){\n\n            this.variation = variation;\n            this.setFunction();\n\n        } else {\n\n            console.warn(\"variation must be 'in', 'out', or 'in-out'\");\n\n        }\n\n    }\n\n    /**\n     * Assigns a function to this class that maps input to output\n     */\n\n    setFunction() {\n\n        switch(this.variation) {\n            case 'in': this.fn = d3.easePolyIn.exponent(this.exponent); break;\n            case 'out': this.fn = d3.easePolyOut.exponent(this.exponent); break;\n            case 'in-out': this.fn = d3.easePolyInOut.exponent(this.exponent); break;\n            default: break;\n        }\n        \n    }\n\n}","import Function from './Function';\nimport * as d3 from 'd3-ease';\n\n/**\n * Creates an ease \"sinusoidal\" curve.\n * @extends Function\n * @param {object} [options] Optional properties of the function\n * @param {string} [options.variation] The contour of the function (see https://easings.net)\n */\n\nexport default class Sinusoidal extends Function {\n\n    constructor(options) {\n\n        const {\n            variation\n        } = options;\n        \n        super({...options});\n\n        this.type = 'sinusoidal';\n        this.fn = null;\n\n        this.setVariation(variation);\n\n    }\n\n    /**\n     * Sets the easing variation. See https://easings.net/\n     * @param {string} variation The curve variation ('in', 'out', or 'in-out')\n     */\n\n    setVariation(variation = 'in') {\n\n        if(variation === 'in' || variation === 'out' || variation === 'in-out'){\n\n            this.variation = variation;\n            this.setFunction();\n\n        } else {\n\n            console.warn(\"variation must be 'in', 'out', or 'in-out'\");\n\n        }\n\n    }\n\n    /**\n     * Assigns a function to this class that maps input to output\n     */\n\n    setFunction() {\n\n        switch(this.variation) {\n            case 'in': this.fn = d3.easeSinIn; break;\n            case 'out': this.fn = d3.easeSinOut; break;\n            case 'in-out': this.fn = d3.easeSinInOut; break;\n            default: break;\n        }\n\n    }\n\n}","import Function from './Function';\nimport * as d3 from 'd3-ease';\n\n/**\n * Creates an ease \"exponential\" curve.\n * @extends Function\n * @param {object} [options] Optional properties of the function\n * @param {string} [options.variation] The contour of the function (see https://easings.net)\n */\n\nexport default class Exponential extends Function {\n\n    constructor(options) {\n\n        const {\n            variation\n        } = options;\n        \n        super({...options});\n\n        this.type = 'exponential';\n        this.fn = null;\n\n        this.setVariation(variation);\n\n    }\n\n    /**\n     * Sets the easing variation. See https://easings.net/\n     * @param {string} variation The curve variation ('in', 'out', or 'in-out')\n     */\n\n    setVariation(variation = 'in') {\n\n        if(variation === 'in' || variation === 'out' || variation === 'in-out'){\n\n            this.variation = variation;\n            this.setFunction();\n\n        } else {\n\n            console.warn(\"variation must be 'in', 'out', or 'in-out'\");\n\n        }\n\n    }\n\n    /**\n     * Assigns a function to this class that maps input to output\n     */\n\n    setFunction() {\n\n        switch(this.variation) {\n            case 'in': this.fn = d3.easeExpIn; break;\n            case 'out': this.fn = d3.easeExpOut; break;\n            case 'in-out': this.fn = d3.easeExpInOut; break;\n            default: break;\n        }\n\n    }\n\n}","import Function from './Function';\nimport * as d3 from 'd3-ease';\n\n/**\n * Creates an \"elastic\" function.\n * @extends Function\n * @param {object} [options] Optional properties of the function\n * @param {string} [options.amplitude] The amplitude of the function\n * @param {number} [options.period] The period of the function\n */\n\nexport default class Elastic extends Function {\n\n    constructor(options) {\n\n        const {\n            variation,\n            amplitude,\n            period\n        } = options;\n        \n        super({...options});\n\n        this.type = 'elastic';\n        this.fn = null;\n\n        this.setAmplitude(amplitude);\n        this.setPeriod(period);\n        this.setVariation(variation);\n\n    }\n\n    setAmplitude(a = 1) {\n\n        if(a >= 1) {\n\n            this.amplitude = a;\n            this.setFunction();\n\n        } else {\n\n            console.error('Amplitude must be a number greater than 1');\n\n        }\n\n    }\n\n    setPeriod(p = 0.3) {\n\n        if(p > 0) {\n\n            this.period = p;\n            this.setFunction();\n            \n        } else {\n\n            console.error('Period must be a number greater than 0.');\n\n        }\n    }\n\n    /**\n     * Sets the easing variation. See https://easings.net/\n     * @param {string} variation The curve variation ('in', 'out', or 'in-out')\n     */\n\n    setVariation(variation = 'in') {\n\n        if(variation === 'in' || variation === 'out' || variation === 'in-out'){\n\n            this.variation = variation;\n            this.setFunction();\n\n        } else {\n\n            console.warn(\"variation must be 'in', 'out', or 'in-out'\");\n\n        }\n\n    }\n\n    /**\n     * Assigns a function to this class that maps input to output\n     */\n\n    setFunction() {\n\n        switch(this.variation) {\n            case 'in': this.fn = d3.easeElasticIn.amplitude(this.amplitude).period(this.period); break;\n            case 'out': this.fn = d3.easeElasticOut.amplitude(this.amplitude).period(this.period); break;\n            case 'in-out': this.fn = d3.easeElasticInOut.amplitude(this.amplitude).period(this.period); break;\n            default: break;\n        }\n        \n    }\n\n}","import Function from './Function';\nimport * as d3 from 'd3-ease';\n\n/**\n * Creates an \"ease back\" function.\n * @extends Function\n * @param {object} [options] Optional properties of the function\n * @param {string} [options.variation] The contour of the function (see https://easings.net)\n * @param {number} [options.overshoot] The degree to which the function \"overshoots\"\n */\n\nexport default class Back extends Function {\n\n    constructor(options) {\n\n        const {\n            variation,\n            overshoot\n        } = options;\n        \n        super({...options});\n\n        this.type = 'back';\n        this.fn = null;\n\n        this.setOvershoot(overshoot);\n        this.setVariation(variation);\n\n    }\n\n    setOvershoot(s = 1.70158) {\n\n        this.overshoot = s;\n        this.setFunction();\n\n    }\n\n    /**\n     * Sets the easing variation. See https://easings.net/\n     * @param {string} variation The curve variation ('in', 'out', or 'in-out')\n     */\n\n    setVariation(variation = 'in') {\n\n        if(variation === 'in' || variation === 'out' || variation === 'in-out'){\n\n            this.variation = variation;\n            this.setFunction();\n\n        } else {\n\n            console.warn(\"variation must be 'in', 'out', or 'in-out'\");\n\n        }\n\n    }\n\n    /**\n     * Assigns a function to this class that maps input to output\n     */\n\n    setFunction() {\n\n        switch(this.variation) {\n            case 'in': this.fn = d3.easeBackIn.overshoot(this.overshoot); break;\n            case 'out': this.fn = d3.easeBackOut.overshoot(this.overshoot); break;\n            case 'in-out': this.fn = d3.easeBackInOut.overshoot(this.overshoot); break;\n            default: break;\n        }\n\n    }\n\n}","import Function from './Function';\nimport * as d3 from 'd3-ease';\n\n/**\n * Creates an ease \"bounce\" curve.\n * @extends Function\n * @param {object} [options] Optional properties of the function\n * @param {string} [options.variation] The contour of the function (see https://easings.net)\n */\n\nexport default class Bounce extends Function {\n\n    constructor(options) {\n\n        const {\n            variation\n        } = options;\n        \n        super({...options});\n\n        this.type = 'bounce';\n        this.fn = null;\n\n        this.setVariation(variation);\n\n    }\n\n    /**\n     * Sets the easing variation. See https://easings.net/\n     * @param {string} variation The curve variation ('in', 'out', or 'in-out')\n     */\n\n    setVariation(variation = 'in') {\n\n        if(variation === 'in' || variation === 'out' || variation === 'in-out'){\n\n            this.variation = variation;\n            this.setFunction();\n\n        } else {\n\n            console.warn(\"variation must be 'in', 'out', or 'in-out'\");\n\n        }\n\n    }\n\n    /**\n     * Assigns a function to this class that maps input to output\n     */\n\n    setFunction() {\n\n        switch(this.variation) {\n            case 'in': this.fn = d3.easeBounceIn; break;\n            case 'out': this.fn = d3.easeBounceOut; break;\n            case 'in-out': this.fn = d3.easeBounceInOut; break;\n            default: break;\n        }\n\n    }\n\n}","/* \n    This code is based on https://en.wikipedia.org/wiki/HSL_and_HSV\n    Free to use for any purpose. No attribution needed.\n    For a helpful explanation on HSL and RGB conversion, see:\n    https://stackoverflow.com/a/39147465/3064334\n*/\n\nexport const rgbToHsl = (r, g, b) => {\n\n    /**\n     * Converts an RGB color value to HSL.\n     * Returns h value in the set [0, 359].\n     * Returns s and l values in the set [0, 1].\n     *\n     * @param   {number}  r       The red color value in the range [0, 255]\n     * @param   {number}  g       The green color value in the range [0, 255]\n     * @param   {number}  b       The blue color value in the range [0, 255]\n     * @return  {Object}          The HSL representation\n     */\n\n    r /= 255; g /= 255; b /= 255;\n    let max = Math.max(r, g, b);\n    let min = Math.min(r, g, b);\n    let d = max - min;\n    let h;\n    if (d === 0) h = 0;\n    else if (max === r) h = (g - b) / d % 6;\n    else if (max === g) h = (b - r) / d + 2;\n    else if (max === b) h = (r - g) / d + 4;\n    let l = (min + max) / 2;\n    let s = d === 0 ? 0 : d / (1 - Math.abs(2 * l - 1));\n    return {h: h * 60, s, l};\n\n}\n  \nexport const hslToRgb = (h, s, l) => {\n\n    /**\n     * Converts an HSL color value to RGB.\n     * Returns r, g, and b values in the set [0, 255].\n     *\n     * @param   {number}  h       The hue value as a degree\n     * @param   {number}  s       The saturation value in the range [0, 1]\n     * @param   {number}  l       The lightness color value in the range [0, 1]\n     * @return  {Object}          The RGB representation\n     */\n\n    if(h < 0) h = (h % 360) + 360;\n    else h = (h % 360);\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let hp = h / 60.0;\n    let x = c * (1 - Math.abs((hp % 2) - 1));\n    let rgb1;\n    if (isNaN(h)) rgb1 = [0, 0, 0];\n    else if (hp <= 1) rgb1 = [c, x, 0];\n    else if (hp <= 2) rgb1 = [x, c, 0];\n    else if (hp <= 3) rgb1 = [0, c, x];\n    else if (hp <= 4) rgb1 = [0, x, c];\n    else if (hp <= 5) rgb1 = [x, 0, c];\n    else if (hp <= 6) rgb1 = [c, 0, x];\n    let m = l - c * 0.5;\n    return {\n        r: Math.round(255 * (rgb1[0] + m)),\n        g: Math.round(255 * (rgb1[1] + m)),\n        b: Math.round(255 * (rgb1[2] + m))\n    };\n}\n\nexport const rgbToHex = (r, g, b) => {\n\n    /**\n     * Converts an RGB color value to a hexadecimal string.\n     * Returns hex value in the range [#000000, #FFFFFF].\n     * See: https://stackoverflow.com/a/5624139/3064334\n     *\n     * @param   {number}  r       The red color value in the range [0, 255]\n     * @param   {number}  g       The green color value in the range [0, 255]\n     * @param   {number}  b       The blue color value in the range [0, 255]\n     * @return  {String}          The hex representation\n     */\n\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n\n}\n\nexport const hexToRgb = (hex) => {\n\n    /**\n     * Converts a hexadecimal string to an RGB color value.\n     * Returns r, g, and b values in the set [0, 255].\n     * See: https://stackoverflow.com/a/5624139/3064334\n     *\n     * @param   {String}  hex     The hex value in the range [#000000, #FFFFFF]\n     * @return  {Object}          The rgb representation\n     */\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n    \n}\n    \nexport const printHsl = (h, s, l) => {\n\n/**\n * Prints an HSL color in standard CSS format\n * See: https://drafts.csswg.org/css-color/#the-hsl-notation\n *\n * @param   {number}  h       The hue value as a number\n * @param   {number}  s       The saturation value in the range [0, 1]\n * @param   {number}  l       The lightness color value in the range [0, 1]\n * @return  {String}          The HSL color string\n */\n\n return `hsl(${h}, ${s*100}%, ${l*100}%)`;\n\n}\n\nexport const printRgb = (r, g, b) => {\n\n    /**\n     * Prints an RGB color in standard CSS format\n     * See: https://drafts.csswg.org/css-color/#the-hsl-notation\n     *\n     * @param   {number}  r       The red color value in the range [0, 255]\n     * @param   {number}  g       The green color value in the range [0, 255]\n     * @param   {number}  b       The blue color value in the range [0, 255]\n     * @return  {String}          The RGB color string\n     */\n    \n     return `rgb(${r}, ${g}, ${b})`;\n    \n    }","export const validJson = (x) => {\n    try {\n        const o = JSON.parse(x);\n        if (o && typeof o === \"object\") {\n            return o;\n        }\n    }\n    catch (e) { }\n    return false;\n};","import Curve from '../js/Curve';\nimport Arc from '../js/geometries/Arc';\nimport Linear from '../js/functions/Linear';\nimport Polynomial from '../js/functions/Polynomial';\nimport Sinusoidal from '../js/functions/Sinusoidal';\nimport Exponential from '../js/functions/Exponential';\nimport Elastic from '../js/functions/Elastic';\nimport Back from '../js/functions/Back';\nimport Bounce from '../js/functions/Bounce';\n\nimport { cartToPolar, radToDeg } from '../utils/math';\nimport { hslToRgb, rgbToHex, printRgb, printHsl } from '../utils/color';\nimport { validJson } from '../utils/common';\n\n/**\n * A continuous color palette created by overlaying curves onto surfaces in the HSL color space.\n * \n * A ColorPalette has exactly two curves. The \"hs\" curve maps to hue and saturation values and lies in a unit circle\n * in the HS space. The \"l\" curve maps it's y-coordinate to lightness, and lies in a unit square in the L space.\n */\n\nexport default class ColorPalette {\n\n    /**\n     * Creates a new Color Palette.\n     * @param {object|string} [hsCurve] The curve object or curve type of the \"hs\" curve\n     * @param {object|string} [lCurve] The curve object or curve type of the \"l\" curve\n     * @param {object} [options = {}] Optional properties of the color palette\n     * @param {number} [options.start] Starts the palette at a certain point along the curve\n     * @param {number} [options.end] Ends the palette at a certain point along the curve\n     */\n\n    constructor(hsCurve, lCurve, options = {}) {\n\n        this.setHsCurve(validJson(hsCurve) || hsCurve);\n        this.setLCurve(validJson(lCurve) || lCurve);\n        this.updateCurveClampBound();\n\n        const {\n            start,\n            end,\n            name,\n            author\n        } = (validJson(options) || options);\n\n        this.setStart(start);\n        this.setEnd(end);\n        this.setName(name);\n        this.setAuthor(author);\n\n    }\n\n    static getParamSet() {\n\n        return ['start', 'end', 'name', 'author'];\n\n    }\n\n    /**\n     * Sets a name for this palette\n     * @param {string} [name] A name for this palette\n     */\n    setName(name) {\n\n        if (typeof name === 'string') {\n\n            this.name = name;\n\n        } else {\n\n            this.name = null;\n\n        }\n\n    }\n\n    /**\n     * Sets a name for this palette\n     * @param {string} [author] A name for this palette\n     */\n    setAuthor(author) {\n\n        if (typeof author === 'string') {\n\n            this.author = author;\n\n        } else {\n\n            this.author = null;\n\n        }\n\n    }\n\n    /**\n     * Sets the \"hs\" (hue-saturation) curve for this palette.\n     * @param {object|string} [hsCurve] An object or string describing the \"hs\" curve. See {@link Curve}\n     */\n\n    setHsCurve(hsCurve) {\n\n        if (hsCurve && hsCurve.isCurve) {\n\n            if (hsCurve.surface.type === 'unitCircle') {\n\n                this.hsCurve = hsCurve;\n\n            } else {\n\n                console.error(\"Due to the nature of the HSL colorspace, the hsCurve is required to have a surface of type 'unitCircle'.\")\n\n            }\n\n        } else if (typeof hsCurve === 'object') {\n\n            this.hsCurve = this.initializeCurve(hsCurve.type, { surface: 'unitCircle', ...hsCurve });\n\n        } else if (typeof hsCurve === 'string') {\n\n            this.hsCurve = this.initializeCurve(hsCurve, { surface: 'unitCircle' });\n\n        } else {\n\n            this.hsCurve = this.initializeCurve('exponential', { surface: 'unitCircle' });\n\n        }\n\n    }\n\n    /**\n     * Sets the \"l\" (lightness) curve for this palette.\n     * @param {object|string} [lCurve] An object or string describing the \"hs\" curve. See {@link Curve}\n     */\n\n    setLCurve(lCurve) {\n\n        if (lCurve && lCurve.isCurve) {\n\n            if (lCurve.surface.type === 'unitSquare') {\n\n                this.lCurve = lCurve;\n\n            } else {\n\n                console.error(\"Due to the nature of the HSL colorspace, the lCurve is required to have a surface of type 'unitSquare'.\")\n\n            }\n\n        } else if (typeof lCurve === 'object') {\n\n            this.lCurve = this.initializeCurve(lCurve.type, { surface: 'unitSquare', ...lCurve });\n\n        } else if (typeof lCurve === 'string') {\n\n            this.lCurve = this.initializeCurve(lCurve, { surface: 'unitSquare' });\n\n        } else {\n\n            this.lCurve = this.initializeCurve('linear', { surface: 'unitSquare' });\n\n        }\n\n    }\n\n    /**\n     * Returns a JSON representation of this palette, including representations for each of its curves and the palette itself.\n     * The returned string consists of three comma-separated JSON objects which map to hsCurve, lCurve, and paletteParams in the ColorPalette constructor.\n     * @param {number} [precision] The number of decimals to include in numerical parameters.\n     * @returns {string} The JSON representation of this palette.\n     */\n\n    exportPaletteParams(precision) {\n\n        const p = precision || 3;\n\n        // helper function to convert params to fixed digits\n        const pDigits = (x) => {\n\n            switch (typeof x) {\n                case 'number': return parseFloat(x.toFixed(p));\n                case 'object': return Object.assign({}, ...Object.entries(x).map(([k, v]) => ({ [k]: pDigits(v) })));\n                default: return x;\n            }\n\n        }\n\n        // get the set of all curve params, and make a collection of defined params for each curve\n        const curveParamsSet = Curve.getParamSet();\n\n        const lCurveParams = {};\n        const hsCurveParams = {};\n\n        curveParamsSet.forEach((param) => {\n\n            if (this.hsCurve[param] !== undefined && this.hsCurve[param] !== null) {\n\n                (hsCurveParams[param] = pDigits(this.hsCurve[param]));\n\n            }\n\n            if (this.lCurve[param] !== undefined && this.lCurve[param] !== null) {\n\n                (lCurveParams[param] = pDigits(this.lCurve[param]));\n\n            }\n\n        });\n\n        // get the set of all palette params, and make a collection of defined params for this palette\n        const paletteParamsSet = ColorPalette.getParamSet();\n\n        const paletteParams = {};\n\n        paletteParamsSet.forEach((param) => {\n\n            if (this[param] !== undefined && this[param] !== null) {\n\n                (paletteParams[param] = pDigits(this[param]));\n\n            }\n\n        });\n\n        return `\n            '${JSON.stringify(hsCurveParams)}', \\\n            '${JSON.stringify(lCurveParams)}', \\\n            '${JSON.stringify(paletteParams)}'`;\n\n    }\n\n    /**\n     * Sets the start point for the palette's curves\n     * @param {number} [start] A number in the range [0, 1]. Not to exceed the palette's end point.\n     */\n\n    setStart(start) {\n\n        if (typeof start === 'number') {\n\n            this.start = start;\n\n        } else {\n\n            this.start = 0;\n\n        }\n\n    }\n\n    /**\n     * Sets the end point for the palette's curves\n     * @param {number} [end] A number in the range [0, 1]. Not to be exceeded by the palette's start point.\n     */\n\n    setEnd(end) {\n\n        if (typeof end === 'number') {\n\n            this.end = end;\n\n        } else {\n\n            this.end = 1;\n\n        }\n\n    }\n\n    /**\n     * Draws a representation of the palette using evenly spaced stops.\n     * @param {object} canvas An HTML canvas on which to draw the palette.\n     * @param {number} numStops The number of distinct colors to use in the drawing.\n     */\n\n    drawDiscretePalette(canvas, numStops) {\n\n        this.updateCurveClampBound();\n\n        const ctx = canvas.getContext('2d');\n        const stops = numStops || 12;\n\n        for (let i = 0; i < stops; i++) {\n\n            // get hsl values\n            const hsl = this.hslValueAt((i + 0.5) / stops);\n\n            ctx.fillStyle = hsl;\n            ctx.fillRect(i * canvas.width / stops, 0, canvas.width * 1.1 / stops, canvas.height);\n\n        }\n\n    }\n\n    /**\n     * Draws a representation of the palette using a continuous gradient.\n     * @param {object} canvas An HTML canvas on which to draw the palette.\n     * @param {number} [resolution = 32] The number of sub-gradients to use.\n     */\n\n    drawContinuousPalette(canvas, resolution) {\n\n        this.updateCurveClampBound();\n\n        const ctx = canvas.getContext('2d');\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n        const stops = resolution || 32;\n\n        // draw continuous palette\n        for (let i = 0; i <= stops; i++) {\n\n            // get hsl values\n            const hsl = this.hslValueAt(i / stops);\n\n            // add a gradient stop\n            gradient.addColorStop(i / stops, hsl);\n\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    }\n\n    /**\n     * Helper function that builds a curve from a specified string.\n     * @param {string} curveType A string that maps to one of the supported curve types.\n     * @param {object} [options] Options for the curve. See {@link Curve}.\n     */\n\n    initializeCurve(curveType, options) {\n\n        switch (curveType) {\n\n            case 'arc': return new Arc({ ...options });\n            case 'linear': return new Linear({ ...options });\n            case 'polynomial': return new Polynomial({ ...options });\n            case 'sinusoidal': return new Sinusoidal({ ...options });\n            case 'exponential': return new Exponential({ ...options });\n            case 'elastic': return new Elastic({ ...options });\n            case 'back': return new Back({ ...options });\n            case 'bounce': return new Bounce({ ...options });\n            default:\n                console.warn('Specified curve type is not supported. Using default (linear) instead.');\n                return new Linear({ ...options });\n\n        }\n\n    }\n\n    /**\n     * Helper function to set the clamp bounds for both curves in the palette. This method should be run before\n     * after changing the parameters - but before getting a color value - for palette that use curves of overflow type 'clamp'\n     */\n\n    updateCurveClampBound() {\n\n        this.hsCurve.overflow === 'clamp' && this.hsCurve.setClampBounds();\n        this.lCurve.overflow === 'clamp' && this.lCurve.setClampBounds();\n\n    }\n\n    /**\n     * Samples the HS and L curves, and converts their cartesian coordinates to hue, saturation, and lightness values\n     * @param {number} n A number in the range [0, 1] that represents the proportion of each curve to traverse before sampling\n     * @returns {object} The hue, saturation, and lightness values of the palette at the point n\n     */\n\n    getColorValues(n) {\n\n        const hsStart = this.hsCurve.overflow === 'clamp' ? Math.max(this.start, this.hsCurve.clampStart) : this.start;\n        const hsEnd = this.hsCurve.overflow === 'clamp' ? Math.min(this.end, this.hsCurve.clampEnd) : this.end;\n        const lStart = this.lCurve.overflow === 'clamp' ? Math.max(this.start, this.lCurve.clampStart) : this.start;\n        const lEnd = this.lCurve.overflow === 'clamp' ? Math.min(this.end, this.lCurve.clampEnd) : this.end;\n\n        // get hue and saturation values from the hsCurve\n        const hsCartCoords = this.hsCurve.getCurveCoordsAt(hsStart + n * (hsEnd - hsStart));\n        const hsPolarCoords = cartToPolar(hsCartCoords.x, hsCartCoords.y);\n        const hue = radToDeg(hsPolarCoords.theta) % 360;\n        const sat = Math.max(0, Math.min(1, hsPolarCoords.r));\n\n        // get lightness values from the lightCurve\n        const lCartCoords = this.lCurve.getCurveCoordsAt(lStart + n * (lEnd - lStart));\n        const lightness = Math.max(0, Math.min(1, lCartCoords.y));\n\n        return {\n            h: hue,\n            s: sat,\n            l: lightness\n        };\n\n    }\n\n    /**\n     * Gets the HSL values at the given point in the palette's range.\n     * @param {number} n A number in the range [0, 1] that represents the proportion of each curve to traverse before sampling\n     * @returns {string} The HSL string of the color at the point n\n     */\n\n    hslValueAt(n) {\n\n        const { h, s, l } = this.getColorValues(n);\n        return printHsl(h, s, l);\n\n    }\n\n    /**\n     * Gets the RGB values at the given point in the palette's range.\n     * @param {number} n A number in the range [0, 1] that represents the proportion of each curve to traverse before sampling\n     * @returns {string} The RGB string of the color at the point n\n     */\n\n    rgbValueAt(n) {\n\n        const { h, s, l } = this.getColorValues(n);\n        const { r, g, b } = hslToRgb(h, s, l);\n        return printRgb(r, g, b);\n\n    }\n\n    /**\n     * Gets the hex values at the given point in the palette's range.\n     * @param {number} n A number in the range [0, 1] that represents the proportion of each curve to traverse before sampling\n     * @returns {string} The hex string of the color at the point n\n     */\n\n    hexValueAt(n) {\n\n        const { h, s, l } = this.getColorValues(n);\n        const { r, g, b } = hslToRgb(h, s, l);\n        return rgbToHex(r, g, b);\n\n\n    }\n\n}","// libs\nimport React from 'react';\n\nfunction About() {\n\n    return (\n        <div className='palette-wrapper'>\n            <h2>Introduction</h2>\n\n            <p>Color is an extremely important element in design, data visualization, and art. The right palette can help convey a message clearly, or help bring a visual project to life.</p>\n\n            <p>In particular, <i>continuous</i> color palettes are useful in digital applications where color reinforces a message. Data analysts use continuous palette to convey stories through data, and generative artists (those who make art with code) use color to express the inherit beauty in mathematics and randomness.</p>\n\n            <p>Color Curves makes it fun and simple to create unique color palettes for art and data projects.</p>\n\n            <p>Instead of relying on color theory, image analysis, or \"expertise\", Color Curves allows anyone to generate limitless palettes using simple geometry.</p>\n\n            <p>It is my hope in creating this tool that pleasing palettes will make their way into even more projects, delighting artists and viewers alike.</p>\n\n            <h2>Inspiration</h2>\n\n            <p>Color Curves was inspired by the pioneering computer graphics researchers who invented the HSL and HSV color spaces, as well as by the work of <a href=\"https://bost.ocks.org/mike/\">Mike Bostok</a>, who introduced me to continuous color palettes by way of the fantastic <a href=\"https://github.com/d3/d3-scale-chromatic\">d3-scale-chromatic</a> library.</p>\n\n            <h2>Contact</h2>\n\n            Let me know what you think of Color Curves!\n\n            <li><a href=\"mailto:markracette@gmail.com\">markracette@gmail.com</a></li>\n\n            <li><a href=\"twitter.com/markracette\">twitter.com/markracette</a></li>\n\n            <li><a href=\"instagram.com/rgb.ig\">instagram.com/rgb.ig</a></li>\n        </div>\n    );\n\n}\n\nexport default About;","// libs\nimport React, { useRef, useEffect } from 'react';\n\nfunction Canvas(props) {\n\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n\n        canvasRef.current.clientWidth !== 0 && (canvasRef.current.width = canvasRef.current.clientWidth);\n        canvasRef.current.clientHeight !== 0 && (canvasRef.current.height = canvasRef.current.clientHeight);\n\n        const listen = window.addEventListener('resize', () => {\n            canvasRef.current.clientWidth !== 0 && (canvasRef.current.width = canvasRef.current.clientWidth);\n            canvasRef.current.clientHeight !== 0 && (canvasRef.current.height = canvasRef.current.width);\n            props.onResize !== undefined && props.onResize(canvasRef.current);\n        })\n\n        props.callback !== undefined && props.callback(canvasRef.current);\n\n        return () => {\n            window.removeEventListener('resize', listen);\n        }\n\n    }, [props.onResize, props.callback, canvasRef])\n\n    return (\n        <canvas\n            id={props.id}\n            className={props.className}\n            ref={canvasRef}\n        />\n    );\n\n}\n\nexport default Canvas;","// libs\nimport React, { useRef, useState, useEffect } from 'react';\n\nfunction SmartInput(props) {\n\n    const numberRegex = /^\\s*[+-]?(\\d+|\\.\\d+|\\d+\\.\\d+|\\d+\\.)(e[+-]?\\d+)?\\s*$/\n    const inputRef = useRef(null);\n    const [prevInputValue, setPrevInputValue] = useState(props.value);\n\n    useEffect(() => {\n        props.value !== undefined && sendValueToInput(applyConstraints(props.value));\n    }, [props.value])\n\n    const isValidInput = (value) => value.toString().match(numberRegex);\n\n    const applyConstraints = (num) => {\n\n        if (isValidInput(num)) {\n\n            props.max !== undefined && (num = Math.min(props.max, num));\n            props.min !== undefined && (num = Math.max(props.min, num));\n\n            if (typeof num === 'number' && typeof props.maxDecimals === 'number') {\n                return Math.round(num * Math.pow(10, props.maxDecimals)) / Math.pow(10, props.maxDecimals);\n            } else {\n                return num;\n            }\n\n        } else {\n\n            return num;\n\n        }\n\n    }\n\n    const sendValueToInput = (value) => {\n        inputRef.current.value = value;\n    }\n\n    const sendValueToHandler = (value) => {\n        // ensure handler exists\n        if (props.handleChange) {\n            // convert if necessary\n            if (props.conversion) {\n                props.handleChange(parseFloat(value * props.conversion));\n            } else {\n                props.handleChange(parseFloat(value));\n            }\n        }\n    }\n\n    const handleClick = (e) => {\n        e.preventDefault();\n        const value = inputRef.current.value;\n        inputRef.current.setSelectionRange(0, value.length);\n    }\n\n    const handleOnBlur = (currentValue) => {\n        if (isValidInput(currentValue)) {\n            sendValueToHandler(currentValue);\n        } else {\n            sendValueToHandler(prevInputValue);\n            sendValueToInput(prevInputValue);\n        }\n    }\n\n    const handleUserInput = (newValue) => {\n\n        if (isValidInput(newValue)) {\n\n            newValue = applyConstraints(newValue);\n\n            // send to change handler\n            sendValueToHandler(newValue);\n\n            // store this value as the last valid value\n            setPrevInputValue(newValue);\n\n            // always send to input\n            sendValueToInput(newValue);\n\n        } else {\n\n            // always send to input\n            sendValueToInput(newValue);\n\n        }\n\n\n    }\n\n    const handleMouseOrTouchDown = (startPosition, startValue) => {\n\n        // disable selections while the mouse is down\n        document.onselectstart = () => false;\n\n        const onMouseOrTouchMove = (e) => {\n\n            const x = e.clientX || (e.touches ? e.touches[0].clientX : 0);\n\n            // capture the movement and compare to startPosition\n            const delta = parseFloat(x - startPosition);\n\n            // multiply the delta by the step\n            const stepDelta = delta * (props.step || 1);\n\n            // get new value\n            let newValue = startValue + stepDelta;\n\n            handleUserInput(newValue);\n\n        }\n\n        document.onmousemove = (e) => onMouseOrTouchMove(e);\n        document.ontouchmove = (e) => {\n            onMouseOrTouchMove(e)\n        };\n\n        // remove listeners\n        document.onmouseup = () => {\n            document.onselectstart = null;\n            document.onmousemove = null;\n        }\n\n        document.ontouchend = () => {\n            document.onselectstart = null;\n            document.ontouchmove = null;\n        }\n\n    }\n\n    return (\n        <div\n            className='smart-input border'\n            style={\n                (props.defaultStyles !== false) && {\n                    display: 'flex',\n                    flexFlow: 'row nowrap',\n                    alignItems: 'center',\n                    height: '1.9rem',\n                    width: '100%',\n                    color: '#555',\n                    border: '1px solid #CCC',\n                    border: 'none',\n                    borderRadius: '4px'\n                }}\n        >\n            <div\n                className='smart-input-label'\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    const startPosition = parseFloat(e.clientX);\n                    const startValue = parseFloat(inputRef.current.value);\n                    handleMouseOrTouchDown(startPosition, startValue);\n                }}\n                onTouchStart={(e) => {\n                    e.preventDefault();\n                    const startPosition = parseFloat(e.touches[0].clientX);\n                    const startValue = parseFloat(inputRef.current.value);\n                    handleMouseOrTouchDown(startPosition, startValue);\n                }}\n                style={\n                    (props.defaultStyles !== false) && {\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        flexGrow: '0',\n                        flexShrink: '0',\n                        flexBasis: typeof props.labelWidth === 'number' ?\n                            props.labelWidth * 100 + '%' :\n                            props.labelWidth,\n                        height: '100%',\n                        cursor: 'ew-resize',\n                        fontSize: '0.875rem',\n                        padding: '0px 12px',\n                        margin: '0',\n                        backgroundColor: '#EEE',\n                        borderTopLeftRadius: '4px',\n                        borderBottomLeftRadius: '4px'\n                    }}\n            >\n                <span>\n                    {props.label}\n                </span>\n            </div>\n            <input\n                className='smart-input-text'\n                ref={inputRef}\n                onClick={handleClick}\n                onBlur={(e) => {\n                    const value = inputRef.current.value;\n                    handleOnBlur(value);\n                }}\n                onChange={(e) => {\n                    const value = e.target.value;\n                    handleUserInput(value);\n                }}\n                type='text'\n                style={\n                    (props.defaultStyles !== false) && {\n                        flex: '0 1 auto',\n                        width: '100%',\n                        height: '100%',\n                        fontSize: '0.875rem',\n                        padding: '0px 12px',\n                        margin: '0',\n                        border: 'none',\n                        borderRadius: '4px'\n                    }}\n            >\n            </input>\n            {props.resetButton &&\n                <button\n                    type=\"button\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        props.resetAction && props.resetAction();\n                    }}\n                    style={\n                        (props.defaultStyles !== false) && {\n                            display: 'flex',\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            flexGrow: '0',\n                            flexShrink: '0',\n                            flexBasis: '2rem',\n                            height: '100%',\n                            cursor: 'pointer',\n                            fontSize: '0.875rem',\n                            padding: '0px 12px',\n                            margin: '0',\n                            border: 'none',\n                            backgroundColor: '#EEE',\n                            borderTopRightRadius: '4px',\n                            borderBottomRightRadius: '4px'\n                        }}\n                >\n                    {String.fromCharCode(0x21ba)}\n                </button>\n            }\n        </div>\n    )\n\n}\n\nexport default SmartInput;","// libs\nimport React, { useState, useEffect } from 'react';\nimport Curve from '../lib/js/Curve';\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\n\nfunction ChartControls(props) {\n\n    const onCurveChange = (newCurveType) => {\n\n        props.setCurve(newCurveType);\n\n    }\n\n    const onParamChange = (param, value) => {\n\n        switch (param) {\n            case 'angleStart': props.curve.setAngleStart(value); break;\n            case 'angleEnd': props.curve.setAngleEnd(value); break;\n            case 'angleOffset': props.curve.setAngleOffset(value); break;\n            case 'variation': props.curve.setVariation(value); break;\n            case 'translateX': props.curve.setTranslateX(value); break;\n            case 'translateY': props.curve.setTranslateY(value); break;\n            case 'scaleX': props.curve.setScaleX(value); break;\n            case 'scaleY': props.curve.setScaleY(value); break;\n            case 'rotate': props.curve.setRotation(value); break;\n            case 'reverse': props.curve.setReverse(value); break;\n            case 'radius': props.curve.setRadius(value); break;\n            case 'overflow': props.curve.setOverflow(value); break;\n            case 'exponent': props.curve.setExponent(value); break;\n            case 'overshoot': props.curve.setOvershoot(value); break;\n            case 'amplitude': props.curve.setAmplitude(value); break;\n            case 'period': props.curve.setPeriod(value); break;\n            default: break;\n        }\n\n        // update clamping bounds\n        if (props.curve.overflow === 'clamp') props.curve.setClampBounds();\n\n        props.updateCurve();\n\n    };\n\n    return (\n\n        <div id='chart-controls' className='col-12'>\n\n            {/* FORM */}\n            <form>\n\n                <div className='form-group'>\n\n                    {/* CURVE OPTIONS LINE 1 */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Curve</label>\n                        <div className='col-lg-5 col-9'>\n                            <select\n                                id='type-select'\n                                className='form-control form-control-sm'\n                                value={props.curve.type}\n                                onChange={(e) => {\n                                    const newCurveType = e.target.value;\n                                    onCurveChange(newCurveType);\n                                }}>\n                                {props.config.map((option) => {\n                                    return <option key={option.id} value={option.id}> {option.display} </option>\n                                })}\n                            </select>\n                        </div>\n\n                        {/* CURVE VARIATION */}\n                        {props.curve.category === 'function' && props.curve.type !== 'linear' && (<>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Variation</label>\n                            <div className='col-lg-3 col-9'>\n                                <select\n                                    id='variation-select'\n                                    className='form-control form-control-sm'\n                                    value={props.curve.variation}\n                                    onChange={(e) => {\n                                        const value = e.target.value;\n                                        onParamChange('variation', value);\n                                    }}>\n                                    <option value='in'>In</option>\n                                    <option value='out'>Out</option>\n                                    <option value='in-out'>In-Out</option>\n                                </select>\n                            </div>\n                        </>)}\n\n                    </div>\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'polynomial' &&\n                        <div className='row justify-content-end'>\n\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Exponent</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"e\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={0.01}\n                                    value={props.curve.exponent}\n                                    resetButton={true}\n                                    resetAction={() => {\n                                        props.curve.setExponent();\n                                        onParamChange('exponent', props.curve.exponent);\n                                    }}\n                                    handleChange={(value) => onParamChange('exponent', value)}\n                                />\n                            </div>\n                        </div>}\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'back' &&\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Overshoot</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"s\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    value={props.curve.overshoot}\n                                    resetButton={true}\n                                    resetAction={() => {\n                                        props.curve.setOvershoot();\n                                        onParamChange('overshoot', props.curve.overshoot);\n                                    }}\n                                    handleChange={(value) => onParamChange('overshoot', value)}\n                                />\n                            </div>\n                        </div>}\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'elastic' && <>\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Amplitude</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"a\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={1}\n                                    value={props.curve.amplitude}\n                                    resetButton={true}\n                                    resetAction={() => {\n                                        props.curve.setAmplitude();\n                                        onParamChange('amplitude', props.curve.amplitude);\n                                    }}\n                                    handleChange={(value) => onParamChange('amplitude', value)}\n                                />\n                            </div>\n                        </div>\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Period</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"p\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={0.01}\n                                    value={props.curve.period}\n                                    resetButton={true}\n                                    resetAction={() => {\n                                        props.curve.setPeriod();\n                                        onParamChange('period', props.curve.period);\n                                    }}\n                                    handleChange={(value) => onParamChange('period', value)}\n                                />\n                            </div>\n                        </div>\n                    </>}\n\n\n                    {/* CURVE OPTIONS LINE 2 */}\n                    <div className='row'>\n\n                        {/* CURVE DIRECTION */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='direction-select'>Direction</label>\n                        <div className='col-lg-5 col-9'>\n                            <select\n                                id='direction-select'\n                                className='form-control form-control-sm'\n                                value={props.curve.reverse ? 'reverse' : 'normal'}\n                                onChange={(e) => {\n                                    const value = e.target.value !== 'normal';\n                                    onParamChange('reverse', value);\n                                }}>\n                                <option value='normal'>Normal</option>\n                                <option value='reverse'>Reverse</option>\n                            </select>\n                        </div>\n\n                        {/* CURVE OVERFLOW */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='off-grid-select'>Overflow</label>\n                        <div className='col-lg-3 col-9'>\n                            <select\n                                id='overflow-select'\n                                className='form-control form-control-sm'\n                                value={props.curve.overflow}\n                                onChange={(e) => {\n                                    const value = e.target.value;\n                                    onParamChange('overflow', value);\n                                }}>\n                                <option value='clamp'>Clamp</option>\n                                <option value='project'>Project</option>\n                            </select>\n                        </div>\n\n                    </div>\n\n                </div>\n\n                {/* CONDITIONAL ARC PARAMETERS */}\n                {props.curve.type === 'arc' && <div className='form-group'>\n\n                    {/* RADIUS */}\n                    <div className='row'>\n\n                        {/* RADIUS */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Radius</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='r'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.radius}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setRadius();\n                                    onParamChange('radius', props.curve.radius);\n                                }}\n                                handleChange={(value) => onParamChange('radius', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* BOUNDS */}\n                    <div className='row'>\n\n                        {/* ANGLE START */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Range</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={<>{String.fromCharCode(0xfeff0398)}<sub>0</sub></>}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleStart / Math.PI}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setAngleStart();\n                                    onParamChange('angleStart', props.curve.angleStart);\n                                }}\n                                handleChange={(value) => onParamChange('angleStart', value)}\n                            />\n                        </div>\n\n                        {/* ANGLE END */}\n                        <div className='col-lg-5 col-9 ml-auto'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={<>{String.fromCharCode(0xfeff0398)}<sub>1</sub></>}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleEnd / Math.PI}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setAngleEnd();\n                                    onParamChange('angleEnd', props.curve.angleEnd);\n                                }}\n                                handleChange={(value) => onParamChange('angleEnd', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* ANGLE OFFSET */}\n                    <div className='row'>\n\n                        {/* ANGLE START */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Offset</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={String.fromCharCode(0xfeff0398)}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleOffset / Math.PI}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setAngleOffset();\n                                    onParamChange('angleOffset', props.curve.angleOffset);\n                                }}\n                                handleChange={(value) => onParamChange('angleOffset', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                </div>}\n\n                <div className='form-group'>\n\n                    {/* TRANSLATION */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Translate</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='X'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.translation.x}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setTranslateX();\n                                    onParamChange('translateX', props.curve.translation.x);\n                                }}\n                                handleChange={(value) => onParamChange('translateX', value)}\n                            />\n                        </div>\n\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='Y'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.translation.y}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setTranslateY();\n                                    onParamChange('translateY', props.curve.translation.y);\n                                }}\n                                handleChange={(value) => onParamChange('translateY', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* SCALE */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Scale</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='X'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.scale.x}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setScaleX();\n                                    onParamChange('scaleX', props.curve.scale.x);\n                                }}\n                                handleChange={(value) => onParamChange('scaleX', value)}\n                            />\n                        </div>\n\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='Y'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.scale.y}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setScaleY();\n                                    onParamChange('scaleY', props.curve.scale.y);\n                                }}\n                                handleChange={(value) => onParamChange('scaleY', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* ROTATION */}\n                    <div className='row'>\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Rotate</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={String.fromCharCode(0xfeff0398)}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.rotation / Math.PI}\n                                resetButton={true}\n                                resetAction={() => {\n                                    props.curve.setRotation();\n                                    onParamChange('rotate', props.curve.rotation);\n                                }}\n                                handleChange={(value) => onParamChange('rotate', value)}\n                            />\n                        </div>\n                    </div>\n\n                </div>\n\n            </form>\n\n        </div>\n\n    );\n\n}\n\nexport default ChartControls;","/**\n * Converts x coordinates on a unit circle to x coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit circle\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit circle coordinate to one on the canvas\n */\n\nexport const nxCircle = (canvas, padding) => (x) => {\n\n    const width = canvas.width * (1 - 2 * padding);\n    const offset = canvas.width * padding;\n\n    return offset + width / 2 + x * width / 2;\n\n    }\n\n/**\n * Converts x coordinates on a unit square to x coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit square\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit square coordinate to one on the canvas\n */\n\nexport const nxSquare = (canvas, padding) => (x) => {\n\n    const offset = canvas.width * padding;\n    const width = canvas.width * (1 - 2 * padding);\n\n    return offset + x * width;\n\n}\n\n/**\n * Converts y coordinates on a unit square to y coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit square\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit square coordinate to one on the canvas\n */\n\nexport const nyCircle = (canvas, padding) => (y) => {\n\n    const height = canvas.height * (1 - 2 * padding);\n    const offset = canvas.height * padding;\n\n    return offset + height / 2 - y * height / 2;\n\n    }\n\n/**\n * Converts y coordinates on a unit square to y coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit square\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit square coordinate to one on the canvas\n */\n\nexport const nySquare = (canvas, padding) => (y) => {\n\n    const offset = canvas.height * padding;\n    const height = canvas.height * (1 - 2 * padding);\n\n    return offset + height - y * height;\n\n}","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nconst drawEndPoints = (curve, canvas, padding) => {\n\n    let nx, ny;\n\n    switch (curve.surface.type) {\n        case 'unitCircle':\n            nx = nxCircle(canvas, padding);\n            ny = nyCircle(canvas, padding);\n            break;\n        case 'unitSquare':\n            nx = nxSquare(canvas, padding);\n            ny = nySquare(canvas, padding);\n            break;\n        default:\n            console.error('Invalid surface type. Must be \"unitCircle\" or \"unitSquare\"');\n            return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    let s, e;\n\n    if (curve.overflow === 'clamp') {\n\n        // use clamp start/end\n        s = curve.getCurveCoordsAt(curve.clampStart);\n        e = curve.getCurveCoordsAt(curve.clampEnd);\n\n    } else {\n\n        // use 0 and 1\n        s = curve.getCurveCoordsAt(0);\n        e = curve.getCurveCoordsAt(1);\n\n    }\n\n    ctx.lineWidth = canvas.width / 100;\n\n    ctx.beginPath();\n    ctx.fillStyle = \"lightgreen\";\n    ctx.arc(nx(s.x), ny(s.y), canvas.width / 100, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.fill();\n\n    ctx.beginPath();\n    ctx.fillStyle = \"palevioletred\";\n    ctx.moveTo(nx(e.x), ny(e.y));\n    ctx.arc(nx(e.x), ny(e.y), canvas.width / 100, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.fill();\n\n}\n\nexport default drawEndPoints;","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nexport const drawHsOrientation = (curve, canvas, padding) => {\n\n    const nx = nxCircle(canvas, padding);\n    const ny = nyCircle(canvas, padding);\n\n    const rotatePoint = (x, y) => {\n\n        const sin = Math.sin(curve.rotation);\n        const cos = Math.cos(curve.rotation);\n\n        const xRot = (x - curve.surface.cx) * cos - (y - curve.surface.cy) * sin + curve.surface.cx;\n        const yRot = (x - curve.surface.cx) * sin + (y - curve.surface.cy) * cos + curve.surface.cy;\n\n        return {\n            x: xRot,\n            y: yRot\n        };\n\n    }\n\n    const tickLength = 0.03 // proportion of canvas\n    const fontSize = 14;\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = canvas.width / 200;\n\n    ctx.beginPath();\n    ctx.fillStyle = 'black';\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    // +X\n    let width = ctx.measureText(\"+X\").width;\n    let p0 = rotatePoint(1 - tickLength, 0);\n    let p1 = rotatePoint(1 + tickLength, 0);\n    let p2 = rotatePoint(1 + tickLength + 2 * width / canvas.width, 0);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+X\", nx(p2.x), ny(p2.y));\n\n    // +Y\n    width = ctx.measureText(\"+Y\").width;\n    p0 = rotatePoint(0, 1 - tickLength);\n    p1 = rotatePoint(0, 1 + tickLength);\n    p2 = rotatePoint(0, 1 + tickLength + 2 * width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+Y\", nx(p2.x), ny(p2.y));\n\n    // -X\n    width = ctx.measureText(\"-X\").width;\n    p0 = rotatePoint(-1 - tickLength, 0);\n    p1 = rotatePoint(-1 + tickLength, 0);\n    p2 = rotatePoint(-1 - tickLength - 2 * width / canvas.width, 0);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-X\", nx(p2.x), ny(p2.y));\n\n    // -Y\n    width = ctx.measureText(\"-Y\").width;\n    p0 = rotatePoint(0, -1 - tickLength);\n    p1 = rotatePoint(0, -1 + tickLength);\n    p2 = rotatePoint(0, -1 - tickLength - 2 * width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-Y\", nx(p2.x), ny(p2.y));\n\n    ctx.stroke();\n\n}\n\nexport const drawLOrientation = (curve, canvas, padding) => {\n\n    const nx = nxSquare(canvas, padding);\n    const ny = nySquare(canvas, padding);\n\n    const rotatePoint = (x, y) => {\n\n        const sin = Math.sin(curve.rotation);\n        const cos = Math.cos(curve.rotation);\n\n        const xRot = (x - curve.surface.cx) * cos - (y - curve.surface.cy) * sin + curve.surface.cx;\n        const yRot = (x - curve.surface.cx) * sin + (y - curve.surface.cy) * cos + curve.surface.cy;\n\n        return {\n            x: xRot,\n            y: yRot\n        };\n\n    }\n\n    const tickLength = 0.03 // proportion of canvas\n    const fontSize = 14;\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = canvas.width / 200;\n\n    ctx.beginPath();\n    ctx.fillStyle = 'black';\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    // +X\n    let width = ctx.measureText(\"+X\").width;\n    let p0 = rotatePoint(1 - tickLength / 2, 0.5);\n    let p1 = rotatePoint(1 + tickLength / 2, 0.5);\n    let p2 = rotatePoint(1 + tickLength / 2 + width / canvas.width, 0.5);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+X\", nx(p2.x), ny(p2.y));\n\n    // +Y\n    width = ctx.measureText(\"+Y\").width;\n    p0 = rotatePoint(0.5, 1 - tickLength / 2);\n    p1 = rotatePoint(0.5, 1 + tickLength / 2);\n    p2 = rotatePoint(0.5, 1 + tickLength / 2 + width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+Y\", nx(p2.x), ny(p2.y));\n\n    // -X\n    width = ctx.measureText(\"-X\").width;\n    p0 = rotatePoint(0 - tickLength / 2, 0.5);\n    p1 = rotatePoint(0 + tickLength / 2, 0.5);\n    p2 = rotatePoint(0 - tickLength / 2 - width / canvas.width, 0.5);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-X\", nx(p2.x), ny(p2.y));\n\n    // -Y\n    width = ctx.measureText(\"-Y\").width;\n    p0 = rotatePoint(0.5, 0 - tickLength / 2);\n    p1 = rotatePoint(0.5, 0 + tickLength / 2);\n    p2 = rotatePoint(0.5, 0 - tickLength / 2 - width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-Y\", nx(p2.x), ny(p2.y));\n\n}","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nexport const drawHsCurve = (curve, canvas, padding) => {\n\n    const lineSegments = 128;\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n    ctx.lineWidth = canvas.width / 180;\n\n    // get functions to normalize coordinate systems\n    const nx = nxCircle(canvas, padding);\n    const ny = nyCircle(canvas, padding);\n\n    // set clamp bounds if necessary\n    curve.overflow === 'clamp' && curve.setClampBounds();\n\n    let prevCoords;\n\n    const start = curve.overflow === 'clamp' ?\n        curve.clampStart : 0;\n\n    const end = curve.overflow === 'clamp' ?\n        curve.clampEnd : 1\n\n    for (let i = 0; i <= lineSegments; i++) {\n\n        ctx.beginPath();\n\n        const coords = curve.getCurveCoordsAt(start + (i / lineSegments) * (end - start));\n\n        ctx.strokeStyle = 'black';\n\n        if (i === 0) {\n            ctx.moveTo(nx(coords.x), ny(coords.y));\n        } else {\n            ctx.moveTo(nx(prevCoords.x), ny(prevCoords.y));\n            ctx.lineTo(nx(coords.x), ny(coords.y));\n        }\n\n        ctx.stroke();\n\n        prevCoords = coords;\n\n    }\n\n}\n\nexport const drawLCurve = (curve, canvas, padding) => {\n\n    const lineSegments = 128;\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n    ctx.lineWidth = canvas.width / 180;\n\n    // get functions to normalize coordinate systems\n    const nx = nxSquare(canvas, padding);\n    const ny = nySquare(canvas, padding);\n\n    // set clamp bounds if necessary\n    curve.overflow === 'clamp' && curve.setClampBounds();\n\n    let prevCoords;\n\n    for (let i = 0; i <= lineSegments; i++) {\n\n        ctx.beginPath();\n\n        const coords = curve.getCurveCoordsAt(i / lineSegments);\n\n        ctx.strokeStyle = 'black';\n\n        if (curve.overflow === 'project' || !coords.clamped) {\n\n            if (i === 0) {\n                ctx.moveTo(nx(coords.x), ny(coords.y));\n            } else {\n                ctx.moveTo(nx(prevCoords.x), ny(prevCoords.y));\n                ctx.lineTo(nx(coords.x), ny(coords.y));\n            }\n\n            ctx.stroke();\n\n        }\n\n        prevCoords = coords;\n\n    }\n\n}","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nexport const drawHsChart = (curve, canvas, padding) => {\n\n    const nx = nxCircle(canvas, padding);\n    const ny = nyCircle(canvas, padding);\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n\n    // fill background\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // color wheel parameters\n    const arcCount = 256;\n    const arcWidth = - Math.PI * 2 / arcCount;\n    const arcPadding = arcWidth;\n\n    // other parameters\n    const cx = nx(0);\n    const cy = ny(0);\n    const r = nx(0) - padding * nx(0) * 2;\n\n    // fill chart gradient\n    for (let i = 0; i < arcCount; i++) {\n\n        const radiusStart = 0;\n        const radiusEnd = r;\n\n        const angleStart = i * arcWidth;\n        const angleEnd = i * arcWidth + arcWidth;\n\n        const gradient = ctx.createRadialGradient(cx, cy, 0, cx, cy, r);\n        gradient.addColorStop(0, `hsl(${360 * i / arcCount}, 0%, 50%)`);\n        gradient.addColorStop(1, `hsl(${360 * i / arcCount}, 100%, 50%)`);\n        ctx.fillStyle = gradient;\n\n        ctx.beginPath();\n        ctx.arc(cx, cy, radiusStart, angleStart, angleEnd + arcPadding, true);\n        ctx.arc(cx, cy, radiusEnd, angleEnd + arcPadding, angleStart, false);\n        ctx.fill();\n\n    }\n\n}\n\nexport const drawLChart = (curve, canvas, padding) => {\n\n    const nx = nxSquare(canvas, padding);\n    const ny = nySquare(canvas, padding);\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n\n    // fill background\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n\n    // fill chart gradient\n    const fillRectGradient = ctx.createLinearGradient(\n        nx(0),\n        ny(1),\n        nx(0),\n        ny(0)\n    );\n    fillRectGradient.addColorStop(0, 'hsl(0, 0%, 100%');\n    fillRectGradient.addColorStop(1, 'hsl(0, 0%, 0%');\n    ctx.fillStyle = fillRectGradient;\n    ctx.fillRect(\n        nx(0),\n        ny(1),\n        nx(1) - padding * nx(1),\n        ny(0) - padding * ny(0));\n\n}","// libs\nimport React, { useEffect, useRef } from 'react';\n\n// components\nimport ChartControls from './ChartControls';\n\n// other\nimport drawEndPoints from '../drawing/drawEndPoints';\nimport { drawHsOrientation, drawLOrientation } from '../drawing/drawOrientation';\nimport { drawHsCurve, drawLCurve } from '../drawing/drawCurve';\nimport { drawHsChart, drawLChart } from '../drawing/drawBlankChart';\n\nfunction Chart(props) {\n\n    const canvasRef = useRef(null);\n\n    const padding = .07;\n\n    const updateCurve = () => {\n\n        switch (props.curve.surface.type) {\n\n            case 'unitCircle':\n                drawHsChart(props.curve, canvasRef.current, padding);\n                drawHsCurve(props.curve, canvasRef.current, padding);\n                drawHsOrientation(props.curve, canvasRef.current, padding);\n                drawEndPoints(props.curve, canvasRef.current, padding);\n                break;\n\n            case 'unitSquare':\n                drawLChart(props.curve, canvasRef.current, padding);\n                drawLCurve(props.curve, canvasRef.current, padding);\n                drawLOrientation(props.curve, canvasRef.current, padding);\n                drawEndPoints(props.curve, canvasRef.current, padding);\n                break;\n\n        }\n\n        props.updatePalettes();\n\n    }\n\n    useEffect(() => {\n        canvasRef.current.width = canvasRef.current.clientWidth;\n        canvasRef.current.height = canvasRef.current.width;\n        updateCurve();\n\n        const listen = window.addEventListener('resize', () => {\n            canvasRef.current.width = canvasRef.current.clientWidth;\n            canvasRef.current.height = canvasRef.current.width;\n            updateCurve();\n        })\n\n        return () => {\n            window.removeEventListener('resize', listen);\n        }\n\n    }, [])\n\n    useEffect(() => {\n\n        updateCurve();\n\n    }, [props.curve]);\n\n    return (\n\n        <div className='chart col-md-6'>\n\n            <div className='material-static chart-wrapper'>\n\n                <div className='row border-bottom'>\n\n                    <div className='col-md-12'>\n\n                        <h2>{props.title}</h2>\n\n                    </div>\n\n                </div>\n\n                <ChartControls\n                    chartType={props.chartType}\n                    config={props.config}\n                    curve={props.curve}\n                    setCurve={props.setCurve}\n                    updateCurve={updateCurve}\n                />\n\n                <div className='row'>\n\n                    <div className='col-md-12'>\n\n                        <canvas\n                            className='chart'\n                            ref={canvasRef}\n                        />\n\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n\n    );\n\n}\n\nexport default Chart;","import ColorPalette from '../js/ColorPalette'\n\nexport default class AllAround extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"arc\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0},\"scale\":{\"x\":1,\"y\":1},\"rotation\":0,\"angleStart\":0,\"angleEnd\":6.283,\"angleOffset\":0,\"radius\":0.5}', '{\"type\":\"arc\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0.5,\"y\":0.5},\"scale\":{\"x\":1,\"y\":1},\"rotation\":0,\"angleStart\":0,\"angleEnd\":6.283,\"angleOffset\":0,\"radius\":0.25}', '{\"start\":0,\"end\":1,\"name\":\"All Around\",\"author\":\"Color Curves\"}');\n    }\n\n}","import AllAround from '../palettes/AllAround';\n\nexport const downloadCanvas = (canvas, filename) => {\n\n    return new Promise((resolve, reject) => {\n\n        // create an \"off-screen\" anchor tag\n        const link = document.createElement('a');\n\n        link.download = filename;\n        link.href = canvas.toDataURL(\"image/png;base64\");\n\n        // fire moust event to trigger download\n        const e = document.createEvent(\"MouseEvents\");\n\n        e.initMouseEvent(\"click\", true, true, window,\n            0, 0, 0, 0, 0, false, false, false,\n            false, 0, null);\n\n        link.dispatchEvent(e);\n\n        resolve();\n\n    })\n\n}\n\nexport const logoGen = (size) => {\n\n    const pal = new AllAround();\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = size;\n    canvas.height = size;\n\n    const lineWidth = size / 20;\n    const radius = (size / 2) - lineWidth;\n    const innerRadius = radius / 3.5;\n\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = '#000000';\n\n    const slices = 16;\n    const arcLength = - Math.PI * 2 / slices;\n\n    // fill inner circle with black\n    ctx.fillStyle = 'black';\n    ctx.arc(size / 2, size / 2, innerRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    for (let i = 0; i < 16; i++) {\n\n        //ctx.fillStyle = `hsl(${(i / slices) * 360}, 100%, 50%)`;\n        ctx.fillStyle = pal.hslValueAt(i / slices);\n\n        const start = i * arcLength;\n        const end = i * arcLength + arcLength;\n\n        ctx.beginPath();\n        ctx.arc(size / 2, size / 2, radius, start, end, true);\n        if (i === slices - 1) {\n            ctx.lineWidth *= 0.5;\n        }\n        ctx.arc(size / 2, size / 2, innerRadius, end, start, false);\n        ctx.fill();\n        ctx.stroke();\n\n    }\n\n    // smooth out inner and outer borders\n    ctx.lineWidth = lineWidth;\n    ctx.beginPath();\n    ctx.arc(size / 2, size / 2, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(size / 2, size / 2, innerRadius, 0, Math.PI * 2);\n    ctx.stroke();\n\n    return canvas;\n\n}","// libs\nimport React, { useState, useEffect, useRef } from 'react';\nimport { downloadCanvas } from '../lib/utils/canvas'\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\nfunction ExportImage(props) {\n\n    const [imgName, setImgName] = useState('');\n    const [imgWidth, setImgWidth] = useState(500);\n    const [imgHeight, setImgHeight] = useState(500);\n\n    useEffect(() => {\n        setImgName('colorcurve');\n    }, []);\n\n    const exportImage = (canvas, imgName) => {\n\n        // resize for export\n        canvas.style.width = imgWidth + 'px';\n        canvas.style.height = imgHeight + 'px';\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n\n        props.updatePalettes();\n\n        downloadCanvas(canvas, imgName, {\n            width: imgWidth + 'px',\n            height: imgHeight + 'px'\n        }).then(() => {\n            canvas.style.removeProperty('width');\n            canvas.style.removeProperty('height');\n        });\n\n    }\n    return (<>\n\n        <div className='row mt-3'>\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Name</label>\n            <div className='col-lg-4'>\n                <input\n                    id='export-image-name'\n                    className='form-control form-control-sm'\n                    placeholder='colorcurve.png'\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        setImgName(value);\n                    }} />\n            </div>\n        </div>\n\n        <div className='row'>\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Type</label>\n            <div className='col-lg-2'>\n                <select\n                    id='type-select'\n                    className='form-control form-control-sm'\n                    value={props.paletteType}\n                    onChange={(e) => {\n                        const newPaletteType = e.target.value;\n                        props.setPaletteType(newPaletteType);\n                    }}>\n                    <option value='continuous'>Continuous</option>\n                    <option value='discrete'>Discrete</option>\n                </select>\n            </div>\n            {props.paletteType === 'discrete' &&\n                <div className='col-lg-2'>\n                    <SmartInput\n                        labelWidth={.33}\n                        label='Num'\n                        step={1}\n                        min={1}\n                        max={32}\n                        maxDecimals={0}\n                        value={props.numStops}\n                        handleChange={(value) => props.setNumStops(parseInt(value))}\n                    />\n                </div>}\n        </div>\n\n\n        <div className='row'>\n\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Size</label>\n            <div className='col-lg-2'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='W'\n                    step={1}\n                    min={1}\n                    max={1080}\n                    maxDecimals={0}\n                    unitSymbol={'px'}\n                    value={imgWidth}\n                    handleChange={(value) => setImgWidth(parseInt(value))}\n                />\n            </div>\n\n            <div className='col-lg-2'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='H'\n                    step={1}\n                    min={1}\n                    max={1080}\n                    maxDecimals={0}\n                    unitSymbol={'px'}\n                    value={imgHeight}\n                    handleChange={(value) => setImgHeight(parseInt(value))}\n                />\n            </div>\n\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-5 d-flex'>\n                <button\n                    onClick={() => exportImage(props.exportCanvas.current, imgName)}\n                    type=\"button\"\n                    className=\"btn btn-primary flex-grow-1\"\n                >\n                    Download Image\n            </button>\n            </div>\n        </div>\n\n    </>)\n\n}\n\nexport default ExportImage;","// libs\nimport React, { useState, useEffect, useRef } from 'react';\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\nfunction ExportHex(props) {\n\n    const [hexArray, setHexArray] = useState([]);\n\n    useEffect(() => {\n\n        if (props.palette) {\n            const hexArray = new Array(props.numStops).fill(null).map((d, i) => {\n                return props.palette.hexValueAt((i + 0.5) / props.numStops);\n            });\n            setHexArray(hexArray);\n        }\n\n    }, [props.palette])\n\n    return (<>\n\n        <div className='row mt-3'>\n            <div className='col-lg-4'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='Num'\n                    step={1}\n                    min={1}\n                    max={32}\n                    maxDecimals={0}\n                    value={props.numStops}\n                    handleChange={(value) => {\n                        value = parseInt(value);\n                        props.setNumStops(parseInt(value))\n                        const hexArray = new Array(value).fill(null).map((d, i) => {\n                            return props.palette.hexValueAt((i + 0.5) / value);\n                        });\n                        setHexArray(hexArray);\n                    }}\n                />\n            </div>\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-12'>\n                <p>All Hex Values:</p>\n                <div className='code-block p-2'>\n                    <code>{hexArray.join(', ')}</code>\n                </div>\n            </div>\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-12'>\n                <p>\n                    Single Hex Values:\n                </p>\n                <div className='col-lg-12'>\n                    {hexArray && hexArray.map((d) => {\n                        return (\n                            <div className='row p-1'>\n                                <div\n                                    className='hex-square col-lg-1 col-6'\n                                    style={{\n                                        backgroundColor: d\n                                    }}\n                                />\n                                <div className='col-lg-2 col-6'>\n                                    {d}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n\n    </>)\n\n}\n\nexport default ExportHex;","// libs\nimport React from 'react';\n\nfunction ExportJS(props) {\n\n    return (<>\n\n            <div className = 'row mt-3'>\n\n                <div className = 'col-12 code-block p-2'>\n\n                    <code>\n\n                        {\"import ColorPalette from 'colorcurves'\"}\n                        \n                    </code>\n\n                </div>\n\n            </div>\n\n            <div className = 'row mt-1'>\n\n                <div className = 'col-12 code-block p-2'>\n\n                    <code>\n\n                        {\"const palette = new ColorPalette(\" + props.palette.exportPaletteParams() + \");\"}\n\n                    </code>\n\n                </div>\n\n            </div>\n\n            <div className = 'row mt-3 p-2'>\n\n                <div className = 'col-12'>\n\n                    For additional information on importing Color Curves, see documentation.\n\n                </div>\n\n            </div>\n\n    </>)\n\n}\n\nexport default ExportJS;","// libs\nimport React, { useState, useEffect, useRef } from 'react';\nimport Modal from 'react-bootstrap/Modal';\n\n// components\nimport ExportImage from '../components/ExportImage';\nimport ExportHex from '../components/ExportHex';\nimport ExportJS from '../components/ExportJS';\n\nfunction ExportModal(props) {\n\n    // component versions of numstops and palettetype\n    // do not affect the editor/global values\n    const [numStops, setNumStops] = useState(12);\n    const [paletteType, setPaletteType] = useState('continuous');\n\n    const [nav, setNav] = useState('image');\n\n    const exportCanvas = useRef(null);\n\n    const updatePalettes = (canvas, paletteType, stops) => {\n\n        if (nav !== 'hex') {\n\n            if (paletteType === 'continuous') {\n                props.palette.drawContinuousPalette(canvas);\n            } else if (paletteType === 'discrete') {\n                props.palette.drawDiscretePalette(canvas, stops);\n            }\n\n        } else if (nav === 'hex') {\n\n            props.palette.drawDiscretePalette(canvas, stops);\n\n        }\n\n    }\n\n    useEffect(() => {\n        if (exportCanvas.current) {\n\n            const numStopsVar = props.numStops || numStops;\n            const paletteTypeVar = props.paletteType || paletteType;\n            updatePalettes(exportCanvas.current, paletteTypeVar, numStopsVar);\n\n        }\n    }, [exportCanvas.current, props.palette, props.numStops, numStops, props.paletteType, paletteType, nav, updatePalettes])\n\n    return (\n        <Modal\n            size='lg'\n            show={props.show}\n            onHide={() => props.setShow(false)}\n        >\n\n            <Modal.Header closeButton>\n                <Modal.Title id=\"example-modal-sizes-title-lg\">Export Palette</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n\n                <div className='row'>\n                    <div className='col-12'>\n                        <canvas className='palette preset' ref={exportCanvas} />\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12'>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={() => {\n                                props.setPalette(props.palette);\n                                props.setNav('editor');\n                                props.setShow(false);\n                            }}\n                        >\n                            Open in editor\n                        </button>\n                    </div>\n                </div>\n\n                <nav className='mt-3'>\n                    <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n                        <a className={`nav-item nav-link ${nav === 'image' && 'active'}`} onClick={() => setNav('image')} id=\"export-nav-image\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-home\" aria-selected={`${nav === 'image'}`}>Image</a>\n                        <a className={`nav-item nav-link ${nav === 'hex' && 'active'}`} onClick={() => setNav('hex')} id=\"export-nav-hex\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-profile\" aria-selected={`${nav === 'image'}`}>Hex</a>\n                        <a className={`nav-item nav-link ${nav === 'js' && 'active'}`} onClick={() => setNav('js')} id=\"export-nav-js\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-contact\" aria-selected={`${nav === 'image'}`}>JS</a>\n                    </div>\n                </nav>\n\n                <div className='row'>\n\n                    <div className='col-lg-12'>\n\n                        {nav === 'image' &&\n                            <ExportImage\n                                updatePalettes={updatePalettes}\n                                exportCanvas={exportCanvas}\n                                palette={props.palette}\n                                paletteType={props.paletteType || paletteType}\n                                setPaletteType={props.setPaletteType || setPaletteType}\n                                numStops={props.numStops || numStops}\n                                setNumStops={props.setNumStops || setNumStops}\n                            />}\n\n                        {nav === 'hex' &&\n                            <ExportHex\n                                palette={props.palette}\n                                numStops={props.numStops || numStops}\n                                setNumStops={props.setNumStops || setNumStops}\n                            />}\n\n                        {nav === 'js' &&\n                            <ExportJS\n                                palette={props.palette}\n                            />}\n\n                    </div></div>\n\n            </Modal.Body>\n\n        </Modal>\n    )\n\n}\n\nexport default ExportModal;","// libs\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\n// components\nimport Canvas from './Canvas';\nimport Chart from './Chart';\nimport SmartInput from './smart-input/SmartInput';\nimport ExportModal from './ExportModal';\n\n// curves \nimport ColorPalette from '../lib/js/ColorPalette';\n\nfunction Editor(props) {\n\n  const config = [\n    {\n      id: 'arc',\n      category: 'geometry',\n      display: 'Geometry: Arc'\n    },\n    {\n      id: 'linear',\n      category: 'function',\n      display: 'Function: Linear'\n    },\n    {\n      id: 'polynomial',\n      category: 'function',\n      display: 'Function: Polynomial'\n    },\n    {\n      id: 'sinusoidal',\n      category: 'function',\n      display: 'Function: Sinusoidal'\n    },\n    {\n      id: 'exponential',\n      category: 'function',\n      display: 'Function: Exponential'\n    },\n    {\n      id: 'elastic',\n      category: 'function',\n      display: 'Function: Elastic'\n    },\n    {\n      id: 'back',\n      category: 'function',\n      display: 'Function: EaseBack'\n    },\n    {\n      id: 'bounce',\n      category: 'function',\n      display: 'Function: Bounce'\n    }\n  ];\n\n  const [paletteType, setPaletteType] = useState('continuous');\n  const [numStops, setNumStops] = useState(6);\n  const [paletteRange, setPaletteRange] = useState([0, 1]);\n  const [showModal, setShowModal] = useState(false);\n\n  // use default color palette and curve\n  const [hsCurve, setHsCurve] = useState(props.palette.hsCurve);\n  const [lCurve, setLCurve] = useState(props.palette.lCurve);\n  const [paletteCanvas, setPaletteCanvas] = useState(null);\n\n  // initialize refs\n  const paletteWrapper = useRef(null);\n\n  const updateCurveType = useCallback((curve, newType) => {\n\n    if (curve === 'hsCurve') {\n\n      props.palette.setHsCurve(newType);\n\n      setHsCurve(props.palette.hsCurve);\n\n    } else if (curve === 'lCurve') {\n\n      props.palette.setLCurve(newType);\n\n      setLCurve(props.palette.lCurve);\n\n    }\n\n  })\n\n  const updatePalettes = () => {\n\n    if (paletteType === 'continuous' && paletteCanvas !== null) {\n\n      props.palette.drawContinuousPalette(paletteCanvas);\n\n    } else if (paletteType === 'discrete' && paletteCanvas !== null) {\n\n      props.palette.drawDiscretePalette(paletteCanvas, numStops);\n\n    }\n\n  }\n\n  useEffect(() => {\n    updatePalettes()\n  }, [updatePalettes, paletteType, numStops, paletteRange, paletteCanvas])\n\n  useEffect(() => {\n    setPaletteRange([props.palette.start, props.palette.end])\n    setHsCurve(props.palette.hsCurve);\n    setLCurve(props.palette.lCurve);\n  }, [props.palette])\n\n  return (\n\n    <>\n\n      <div ref={paletteWrapper} className='material-static palette-wrapper sticky-top'>\n\n        <div className='row border-bottom'>\n          <div className='col-auto align-items-center'>\n            <h2>Palette</h2>\n          </div>\n          <div className='col-auto ml-auto d-flex'>\n            <form className='m-auto'>\n              <div className=\"custom-control custom-switch\">\n                <input\n                  type=\"checkbox\"\n                  id='pinned-switch'\n                  className=\"custom-control-input\"\n                  defaultChecked={true}\n                  onChange={(e) => {\n                    const sticky = e.target.checked;\n                    if (sticky) {\n                      paletteWrapper.current.classList.add('sticky-top');\n                    } else {\n                      paletteWrapper.current.classList.remove('sticky-top');\n                    }\n                  }}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"pinned-switch\">Pinned</label>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <form>\n\n          {/* PALETTE OPTIONS LINE 1 */}\n          <div className='row'>\n\n            {/* PALETTE TYPE */}\n            <label className='col-lg-1 col-2 col-form-label-sm' htmlFor='type-select'>Type</label>\n            <div className='col-lg-2 col-5'>\n              <select\n                id='type-select'\n                className='form-control form-control-sm'\n                defaultValue={paletteType}\n                onChange={(e) => {\n                  const newPaletteType = e.target.value;\n                  setPaletteType(newPaletteType);\n                }}>\n                <option value='continuous'>Continuous</option>\n                <option value='discrete'>Discrete</option>\n              </select>\n            </div>\n\n            {/* NUM STOPS */}\n            {paletteType === 'discrete' &&\n              <div className='col-lg-2 col-5'>\n                <SmartInput\n                  labelWidth={.33}\n                  label='Num'\n                  step={1}\n                  min={1}\n                  max={32}\n                  maxDecimals={0}\n                  value={numStops}\n                  handleChange={(value) => setNumStops(parseInt(value))}\n                />\n              </div>\n            }\n\n          </div>\n\n          {/* PALETTE OPTIONS LINE 2 */}\n          <div className='row'>\n\n            {/* PALETTE TYPE */}\n            <label className='col-lg-1 col-2 col-form-label-sm' htmlFor='type-select'>Range</label>\n\n            <div className='col-lg-2 col-5'>\n              <SmartInput\n                labelWidth={.33}\n                label='Start'\n                step={.01}\n                min={0}\n                max={paletteRange[1]}\n                maxDecimals={2}\n                value={paletteRange[0]}\n                handleChange={(value) => {\n                  props.palette.setStart(parseFloat(value));\n                  setPaletteRange([parseFloat(value), paletteRange[1]]);\n                }}\n              />\n            </div>\n\n            <div className='col-lg-2 col-5'>\n              <SmartInput\n                labelWidth={.33}\n                label='End'\n                step={.01}\n                min={paletteRange[0]}\n                max={1}\n                maxDecimals={2}\n                value={paletteRange[1]}\n                handleChange={(value) => {\n                  props.palette.setEnd(parseFloat(value));\n                  setPaletteRange([paletteRange[0], parseFloat(value)]);\n                }}\n              />\n            </div>\n\n          </div>\n\n        </form>\n\n        <div className='row'>\n          <div className='col-12'>\n            <Canvas\n              callback={(canvasRef) => setPaletteCanvas(canvasRef)}\n              className='palette editor-palette'\n              onResize={() => updatePalettes()}\n            />\n          </div>\n        </div>\n\n        <button\n          onClick={() => {\n            setShowModal(!showModal);\n          }}\n          type=\"button\"\n          className=\"btn btn-primary\"\n        >\n          Export Palette\n          </button>\n\n        <ExportModal\n          show={showModal}\n          setShow={setShowModal}\n          palette={props.palette}\n          numStops={numStops}\n          setNumStops={setNumStops}\n          paletteType={paletteType}\n          setPaletteType={setPaletteType}\n        />\n\n      </div>\n\n      <div className='row' id='charts'>\n\n        <Chart\n          title='Hue + Saturation'\n          setCurve={(type) => updateCurveType('hsCurve', type)}\n          curve={hsCurve}\n          config={config}\n          updatePalettes={updatePalettes}\n        />\n\n        <Chart\n          title='Lightness'\n          setCurve={(type) => updateCurveType('lCurve', type)}\n          curve={lCurve}\n          config={config}\n          updatePalettes={updatePalettes}\n        />\n\n      </div>\n\n    </>\n\n  );\n\n}\n\nexport default Editor;","import ColorPalette from '../js/ColorPalette'\n\nexport default class WarmMagma extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"exponential\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.66,\"y\":-0.58},\"scale\":{\"x\":1.61,\"y\":0.76},\"rotation\":0.84,\"variation\":\"in\"}', '{\"type\":\"sinusoidal\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.37},\"scale\":{\"x\":1,\"y\":0.24},\"rotation\":0,\"variation\":\"out\"}', '{\"start\":0.05,\"end\":1,\"name\":\"Warm Magma\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class BeyondBelief extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"exponential\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.88,\"y\":-0.84},\"scale\":{\"x\":1.848,\"y\":0.765},\"rotation\":10.556,\"variation\":\"in\"}', '{\"type\":\"sinusoidal\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.1,\"y\":0.25},\"scale\":{\"x\":1.02,\"y\":0.29},\"rotation\":-1.257,\"variation\":\"in\"}', '{\"start\":0.23,\"end\":1,\"name\":\"Beyond Belief\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class UnAmerican extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"polynomial\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.924,\"y\":-0.383},\"scale\":{\"x\":1.848,\"y\":0.765},\"rotation\":2.75,\"variation\":\"out\",\"exponent\":3}', '{\"type\":\"linear\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.25},\"scale\":{\"x\":1,\"y\":0.74},\"rotation\":0}', '{\"start\":0,\"end\":1,\"name\":\"Un-American\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class CandyPaint extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"exponential\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.924,\"y\":-0.45},\"scale\":{\"x\":1.848,\"y\":0.77},\"rotation\":0,\"variation\":\"in\"}', '{\"type\":\"linear\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.25},\"scale\":{\"x\":1,\"y\":0.5},\"rotation\":4.541}', '{\"start\":0.02,\"end\":1,\"name\":\"Candy Paint\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class GoldfishDeluxe extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"exponential\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.924,\"y\":-0.383},\"scale\":{\"x\":1.848,\"y\":0.765},\"rotation\":3.171,\"variation\":\"in\"}', '{\"type\":\"linear\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.05},\"scale\":{\"x\":1,\"y\":0.44},\"rotation\":2.69}', '{\"start\":0,\"end\":1,\"name\":\"Goldfish Deluxe\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class PhytoPlankton extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"exponential\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-1.12,\"y\":0.5},\"scale\":{\"x\":2.17,\"y\":0.765},\"rotation\":0.691,\"variation\":\"in\"}', '{\"type\":\"polynomial\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.44},\"scale\":{\"x\":1,\"y\":0.41},\"rotation\":6.974,\"variation\":\"in\",\"exponent\":3}', '{\"name\": \"Phyto Plankton\", \"author\": \"Color Curves\", \"start\":0,\"end\":0.72}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class TrixSky extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"exponential\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-1.31,\"y\":-0.383},\"scale\":{\"x\":1.848,\"y\":0.765},\"rotation\":5.81,\"variation\":\"in\"}', '{\"type\":\"linear\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.34},\"scale\":{\"x\":1,\"y\":0.5},\"rotation\":0}', '{\"start\":0,\"end\":1,\"name\":\"Trix Sky\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class PowerWashed extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"polynomial\",\"overflow\":\"clamp\",\"reverse\":true,\"translation\":{\"x\":-0.68,\"y\":-0.09},\"scale\":{\"x\":1.21,\"y\":0.25},\"rotation\":2.827,\"variation\":\"in\",\"exponent\":1.74}', '{\"type\":\"sinusoidal\",\"overflow\":\"clamp\",\"reverse\":true,\"translation\":{\"x\":0,\"y\":0.73},\"scale\":{\"x\":1,\"y\":-0.07},\"rotation\":0,\"variation\":\"in\"}', '{\"name\":\"Power Washed\",\"author\":\"Color Curves\",\"start\":0,\"end\":0.86}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class CoralScrub extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"linear\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.97,\"y\":0.11},\"scale\":{\"x\":1.8,\"y\":0.52},\"rotation\":0}', '{\"type\":\"linear\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.39},\"scale\":{\"x\":0.93,\"y\":0.27},\"rotation\":0}', '{\"start\":0,\"end\":1,\"name\":\"Coral Scrub\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class PolarBeyond extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"bounce\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-0.924,\"y\":-0.92},\"scale\":{\"x\":1.848,\"y\":0.45},\"rotation\":4.3,\"variation\":\"in\"}', '{\"type\":\"exponential\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0,\"y\":0.43},\"scale\":{\"x\":1,\"y\":0.19},\"rotation\":0,\"variation\":\"in-out\"}', '{\"start\":0.53,\"end\":0.87,\"name\":\"Polar Beyond\",\"author\":\"Color Curves\"}');\n    }\n\n}","import ColorPalette from '../js/ColorPalette'\n\nexport default class StockImage extends ColorPalette {\n\n    constructor() {\n        super('{\"type\":\"elastic\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":-2.49,\"y\":-0.383},\"scale\":{\"x\":1.848,\"y\":0.765},\"rotation\":0,\"variation\":\"in\",\"amplitude\":1,\"period\":0.3}', '{\"type\":\"arc\",\"overflow\":\"clamp\",\"reverse\":false,\"translation\":{\"x\":0.5,\"y\":-0.71},\"scale\":{\"x\":1,\"y\":5.66},\"rotation\":0,\"angleStart\":0,\"angleEnd\":1.319,\"angleOffset\":0.942,\"radius\":0.25}', '{\"name\": \"Stock Image\", \"author\": \"Color Curves\", \"start\":0,\"end\":1}');\n    }\n\n}","// libs\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap';\n\n// components\nimport Canvas from './Canvas';\nimport ExportModal from './ExportModal';\n\n// palettes\nimport WarmMagma from '../lib/palettes/WarmMagma';\nimport AllAround from '../lib/palettes/AllAround';\nimport BeyondBelief from '../lib/palettes/BeyondBelief';\nimport UnAmerican from '../lib/palettes/UnAmerican';\nimport CandyPaint from '../lib/palettes/CandyPaint';\nimport GoldfishDeluxe from '../lib/palettes/GoldfishDeluxe';\nimport PhytoPlankton from '../lib/palettes/PhytoPlankton';\nimport TrixSky from '../lib/palettes/TrixSky';\nimport PowerWashed from '../lib/palettes/PowerWashed';\nimport CoralScrub from '../lib/palettes/CoralScrub';\nimport PolarBeyond from '../lib/palettes/PolarBeyond';\nimport StockImage from '../lib/palettes/StockImage';\n\nfunction Presets(props) {\n\n    const [showModal, setShowModal] = useState(false);\n    const [selectedPalette, setSelectedPalette] = useState(null);\n\n    const presets = [\n        new WarmMagma(),\n        new AllAround(),\n        new UnAmerican(),\n        new BeyondBelief(),\n        new PowerWashed(),\n        new CandyPaint(),\n        new StockImage(),\n        new GoldfishDeluxe(),\n        new PhytoPlankton(),\n        new TrixSky(),\n        new CoralScrub(),\n        new PolarBeyond()\n    ];\n\n    return (<>\n        {presets.map((preset, i) => {\n            return (\n                <div\n                    onClick={(e) => {\n                        setSelectedPalette(preset);\n                        setShowModal(true);\n                    }}\n                    className='material palette-wrapper'>\n                    <h4>{preset.name}</h4>\n                    <h6>by {preset.author}</h6>\n                    <Canvas\n                        className='palette preset'\n                        callback={(canvas) => preset.drawContinuousPalette(canvas, 128)}\n                        onResize={(canvas) => preset.drawContinuousPalette(canvas, 128)}\n                    />\n                    <Canvas\n                        className='palette preset'\n                        callback={(canvas) => preset.drawDiscretePalette(canvas, 6)}\n                        onResize={(canvas) => preset.drawDiscretePalette(canvas, 6)}\n                    />\n                </div>\n            )\n        })}\n        <ExportModal\n            setNav={props.setNav}\n            show={showModal}\n            setShow={setShowModal}\n            palette={selectedPalette}\n            setPalette={props.setPalette}\n        /></>\n    );\n\n}\n\nexport default Presets;\n","// libs\nimport React, { useState, useRef, useEffect } from 'react';\nimport ColorPalette from '../lib/js/ColorPalette';\nimport 'bootstrap';\n\n// components\nimport About from './About';\nimport Editor from './Editor'\nimport Presets from './Presets';\n\n// styles\nimport 'typeface-poppins';\nimport '../styles/app.scss';\n\n// other\nimport logo from '../img/logo192.png';\nimport { logoGen, downloadCanvas } from '../lib/utils/canvas'\n\nfunction App() {\n\n  const [darkMode, setDarkMode] = useState(false);\n  const [nav, setNav] = useState('editor');\n  const [palette, setPalette] = useState(new ColorPalette());\n\n  return (<>\n\n\n    <nav\n      className={`navbar navbar-expand-lg navbar-dark ${nav !== \"editor\" ? \"sticky-top\" : \"\"}`}\n      style={{ backgroundColor: '#232F34' }}\n    >\n\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <img src={logo} className=\"logo\" onClick={() => setNav('editor')}></img>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className={`nav-item ${nav === 'editor' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('editor')} href=\"JavaScript:Void(0);\">Editor <span className=\"sr-only\">(current)</span></a>\n          </li>\n          <li className={`nav-item ${nav === 'presets' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('presets')} href=\"JavaScript:Void(0);\">Presets</a>\n          </li>\n          <li className={`nav-item ${nav === 'about' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('about')} href=\"JavaScript:Void(0);\">About</a>\n          </li>\n          <li className=\"nav-item dropdown\">\n            <a className=\"nav-link dropdown-toggle\" href=\"JavaScript:Void(0);\" id=\"theme-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              Theme\n            </a>\n            <div className=\"dropdown-menu\" aria-labelledby=\"theme-dropdown\">\n              <a className=\"dropdown-item active\" href=\"JavaScript:Void(0);\">Light</a>\n              <a className=\"dropdown-item disabled\" href=\"JavaScript:Void(0);\">Dark (coming soon)</a>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </nav>\n\n    <div className='container' id='app'>\n      <div className=\"tab-content\">\n        <div className={`tab-pane fade ${nav === 'editor' ? 'show active' : ''}`} id=\"home\" role=\"tabpanel\" aria-labelledby=\"editor-button\">\n          <Editor\n            palette={palette}\n            setPalette={setPalette}\n          />\n        </div>\n        <div className={`tab-pane fade ${nav === 'presets' ? 'show active' : ''}`} id=\"presets\" role=\"tabpanel\" aria-labelledby=\"presets-button\">\n          <Presets\n            setNav={setNav}\n            setPalette={setPalette}\n          />\n        </div>\n        <div className={`tab-pane fade ${nav === 'about' ? 'show active' : ''}`} id=\"about\" role=\"tabpanel\" aria-labelledby=\"about-button\">\n          <About />\n        </div>\n      </div>\n    </div>\n\n  </>);\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
{"version":3,"sources":["img/logo192.png","components/About.js","components/Canvas.js","components/smart-input/SmartInput.js","components/ChartControls.js","drawing/normalize.js","drawing/drawEndPoints.js","drawing/drawOrientation.js","drawing/drawCurve.js","drawing/drawBlankChart.js","components/Chart.js","utils/canvas.js","components/ExportImage.js","components/ExportHex.js","components/ExportJS.js","components/ExportModal.js","components/Editor.js","components/Presets.js","components/App.js","index.js"],"names":["module","exports","About","className","href","Canvas","props","canvasRef","useRef","useEffect","current","clientWidth","width","clientHeight","height","listen","window","addEventListener","undefined","onResize","callback","removeEventListener","id","ref","SmartInput","numberRegex","inputRef","useState","value","prevInputValue","setPrevInputValue","sendValueToInput","applyConstraints","isValidInput","toString","match","num","max","Math","min","maxDecimals","round","pow","sendValueToHandler","handleChange","conversion","parseFloat","handleUserInput","newValue","handleMouseOrTouchDown","startPosition","startValue","document","onselectstart","onMouseOrTouchMove","e","x","clientX","touches","stepDelta","step","onmousemove","ontouchmove","onmouseup","ontouchend","style","defaultStyles","display","minWidth","flexFlow","alignItems","color","border","onMouseDown","preventDefault","onTouchStart","flexDirection","justifyContent","flexGrow","flexShrink","flexBasis","labelWidth","cursor","fontSize","padding","margin","borderTopLeftRadius","borderBottomLeftRadius","label","onClick","setSelectionRange","length","onBlur","currentValue","onChange","target","type","flex","resetButton","resetAction","borderTopRightRadius","borderBottomRightRadius","String","fromCharCode","ChartControls","onParamChange","param","curve","setAngleStart","setAngleEnd","setAngleOffset","setVariation","setTranslateX","setTranslateY","setScaleX","setScaleY","setRotation","setReverse","setRadius","setOverflow","setExponent","setOvershoot","setAmplitude","setPeriod","overflow","setClampBounds","updateCurve","htmlFor","newCurveType","setCurve","onCurveChange","config","map","option","key","category","variation","exponent","overshoot","amplitude","period","radius","unitSymbol","PI","angleStart","angleEnd","angleOffset","translation","y","scale","rotation","nxCircle","canvas","nxSquare","nyCircle","nySquare","offset","drawEndPoints","nx","ny","surface","console","error","s","ctx","getContext","getCurveCoordsAt","clampStart","clampEnd","lineWidth","beginPath","fillStyle","arc","stroke","fill","moveTo","drawHsOrientation","rotatePoint","sin","cos","cx","cy","font","textAlign","textBaseline","measureText","p0","p1","p2","lineTo","fillText","drawLOrientation","drawHsCurve","alpha","prevCoords","start","end","i","coords","strokeStyle","drawLCurve","clamped","drawHsChart","fillRect","arcWidth","arcPadding","r","radiusEnd","gradient","createRadialGradient","addColorStop","drawLChart","fillRectGradient","createLinearGradient","Chart","updatePalettes","title","chartType","downloadCanvas","filename","Promise","resolve","reject","link","createElement","download","toDataURL","createEvent","initMouseEvent","dispatchEvent","ExportImage","imgName","setImgName","imgWidth","setImgWidth","imgHeight","setImgHeight","placeholder","paletteType","newPaletteType","setPaletteType","numStops","setNumStops","parseInt","name","w","h","body","appendChild","palette","drawContinuousPalette","drawDiscretePalette","then","log","removeChild","getElementById","exportImage","ExportHex","hexArray","setHexArray","Array","d","hexValueAt","join","backgroundColor","ExportJS","exportPaletteParams","ExportModal","nav","setNav","exportCanvas","stops","numStopsVar","paletteTypeVar","Modal","size","show","onHide","setShow","Header","closeButton","Title","Body","setPalette","role","data-toggle","aria-controls","aria-selected","Editor","paletteRange","setPaletteRange","showModal","setShowModal","hsCurve","setHsCurve","lCurve","setLCurve","paletteCanvas","setPaletteCanvas","paletteWrapper","updateCurveType","useCallback","newType","class","defaultChecked","checked","classList","add","remove","defaultValue","setStart","setEnd","Presets","selectedPalette","setSelectedPalette","presets","WarmMagma","AllAround","UnAmerican","BeyondBelief","PowerWashed","CandyPaint","StockImage","GoldfishDeluxe","PhytoPlankton","TrixSky","CoralScrub","PolarBeyond","preset","author","App","ColorPalette","data-target","aria-expanded","aria-label","src","logo","aria-haspopup","aria-labelledby","ReactDOM","render"],"mappings":"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","file":"static/js/main.eb942882.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.1cbe3163.png\";","// libs\nimport React from 'react';\n\nfunction About() {\n\n    return (\n        <div className='row'>\n            <div className='col-12'>\n                <div className='palette-wrapper'>\n                    <h2>Introduction</h2>\n\n                    <p>Color is an important element in design, data visualization, and art. The right palette can help convey a message clearly or bring a visual project to life.</p>\n\n                    <p>In particular, <i>continuous</i> color palettes are useful in digital applications where color reinforces a message. Data analysts use continuous palettes to convey stories through data, and generative artists (those who make art with code) use color to express the inherit beauty in mathematics and randomness.</p>\n\n                    <p>Color Curves makes it fun and simple to create unique color palettes for art and data projects.</p>\n\n                    <p>Instead of relying on color theory, image analysis, or \"expertise\", Color Curves allows anyone to generate limitless palettes using simple geometry. It is my hope in creating this tool that palettes will make their way into even more projects, delighting artists and viewers alike.</p>\n\n                    <h2>Inspiration</h2>\n\n                    <p>Color Curves was inspired by the pioneering computer graphics researchers who invented the HSL and HSV color spaces, as well as by the work of <a href=\"https://bost.ocks.org/mike/\">Mike Bostok</a>, who introduced me to continuous color palettes by way of the <a href=\"https://github.com/d3/d3-scale-chromatic\">d3-scale-chromatic</a> library.</p>\n\n                    <h2>Resources</h2>\n                    <p>\n                        <ul>\n                            <li><a href=\"https://github.com/mracette/color-curves-app\">Documentation</a></li>\n\n                            <li><a href=\"https://github.com/mracette/color-curves-app/issues\">File a bug or feature request</a></li>\n\n                            <li><a href=\"https://www.npmjs.com/package/color-curves\">NPM package</a></li>\n                        </ul>\n                    </p>\n                    <h2>Contact</h2>\n                    <p>\n\n                        Let me know what you think of Color Curves:\n                        <ul>\n                            <li><a href=\"mailto:markracette@gmail.com\">markracette@gmail.com</a></li>\n\n                            <li><a href=\"https://twitter.com/markracette\">twitter.com/markracette</a></li>\n\n                            <li><a href=\"https://instagram.com/rgb.ig\">instagram.com/rgb.ig</a></li>\n\n                            <li><a href=\"https://github.com/mracette\">github.com/mracette</a></li>\n                        </ul>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default About;","// libs\nimport React, { useRef, useEffect } from 'react';\n\nfunction Canvas(props) {\n\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n\n        canvasRef.current.clientWidth !== 0 && (canvasRef.current.width = canvasRef.current.clientWidth);\n        canvasRef.current.clientHeight !== 0 && (canvasRef.current.height = canvasRef.current.clientHeight);\n\n        const listen = window.addEventListener('resize', () => {\n            canvasRef.current.clientWidth !== 0 && (canvasRef.current.width = canvasRef.current.clientWidth);\n            canvasRef.current.clientHeight !== 0 && (canvasRef.current.height = canvasRef.current.width);\n            props.onResize !== undefined && props.onResize(canvasRef.current);\n        });\n\n        props.callback !== undefined && props.callback(canvasRef.current);\n\n        return () => {\n            window.removeEventListener('resize', listen);\n        }\n\n    }, [props.onResize, props.callback, canvasRef])\n\n    return (\n        <canvas\n            id={props.id}\n            className={props.className}\n            ref={canvasRef}\n        />\n    );\n\n}\n\nexport default Canvas;","// libs\nimport React, { useRef, useState, useEffect } from 'react';\n\nfunction SmartInput(props) {\n\n    const numberRegex = /^\\s*[+-]?(\\d+|\\.\\d+|\\d+\\.\\d+|\\d+\\.)(e[+-]?\\d+)?\\s*$/\n    const inputRef = useRef(null);\n    const [prevInputValue, setPrevInputValue] = useState(props.value);\n\n    useEffect(() => {\n        props.value !== undefined && sendValueToInput(applyConstraints(props.value));\n    }, [props.value])\n\n    const isValidInput = (value) => value.toString().match(numberRegex);\n\n    const applyConstraints = (num) => {\n\n        if (isValidInput(num)) {\n\n            props.max !== undefined && (num = Math.min(props.max, num));\n            props.min !== undefined && (num = Math.max(props.min, num));\n\n            if (typeof num === 'number' && typeof props.maxDecimals === 'number') {\n                return Math.round(num * Math.pow(10, props.maxDecimals)) / Math.pow(10, props.maxDecimals);\n            } else {\n                return num;\n            }\n\n        } else {\n\n            return num;\n\n        }\n\n    }\n\n    const sendValueToInput = (value) => {\n        inputRef.current.value = value;\n    }\n\n    const sendValueToHandler = (value) => {\n        // ensure handler exists\n        if (props.handleChange) {\n            // convert if necessary\n            if (props.conversion) {\n                props.handleChange(parseFloat(value * props.conversion));\n            } else {\n                props.handleChange(parseFloat(value));\n            }\n        }\n    }\n\n    const handleClick = () => {\n        const value = inputRef.current.value;\n        inputRef.current.setSelectionRange(0, value.length);\n    }\n\n    const handleOnBlur = (currentValue) => {\n        if (isValidInput(currentValue)) {\n            sendValueToHandler(currentValue);\n        } else {\n            sendValueToHandler(prevInputValue);\n            sendValueToInput(prevInputValue);\n        }\n    }\n\n    const handleUserInput = (newValue) => {\n\n        if (isValidInput(newValue)) {\n\n            newValue = applyConstraints(newValue);\n\n            // send to change handler\n            sendValueToHandler(newValue);\n\n            // store this value as the last valid value\n            setPrevInputValue(newValue);\n\n            // always send to input\n            sendValueToInput(newValue);\n\n        } else {\n\n            // always send to input\n            sendValueToInput(newValue);\n\n        }\n\n\n    }\n\n    const handleMouseOrTouchDown = (startPosition, startValue) => {\n\n        // disable selections while the mouse is down\n        document.onselectstart = () => false;\n\n        const onMouseOrTouchMove = (e) => {\n\n            const x = e.clientX || (e.touches ? e.touches[0].clientX : 0);\n\n            // capture the movement and compare to startPosition\n            const delta = parseFloat(x - startPosition);\n\n            // multiply the delta by the step\n            const stepDelta = delta * (props.step || 1);\n\n            // get new value\n            let newValue = startValue + stepDelta;\n\n            handleUserInput(newValue);\n\n        }\n\n        document.onmousemove = (e) => onMouseOrTouchMove(e);\n        document.ontouchmove = (e) => {\n            onMouseOrTouchMove(e)\n        };\n\n        // remove listeners\n        document.onmouseup = () => {\n            document.onselectstart = null;\n            document.onmousemove = null;\n        }\n\n        document.ontouchend = () => {\n            document.onselectstart = null;\n            document.ontouchmove = null;\n        }\n\n    }\n\n    return (\n        <div\n            className='smart-input border'\n            style={\n                (props.defaultStyles !== false) && {\n                    display: 'flex',\n                    minWidth: '0%',\n                    flexFlow: 'row nowrap',\n                    alignItems: 'center',\n                    height: '1.9rem',\n                    width: '100%',\n                    color: '#555',\n                    border: '1px solid #CCC',\n                    border: 'none',\n                    borderRadius: '4px'\n                }}\n        >\n            <div\n                className='smart-input-label'\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    const startPosition = parseFloat(e.clientX);\n                    const startValue = parseFloat(inputRef.current.value);\n                    handleMouseOrTouchDown(startPosition, startValue);\n                }}\n                onTouchStart={(e) => {\n                    e.preventDefault();\n                    const startPosition = parseFloat(e.touches[0].clientX);\n                    const startValue = parseFloat(inputRef.current.value);\n                    handleMouseOrTouchDown(startPosition, startValue);\n                }}\n                style={\n                    (props.defaultStyles !== false) && {\n                        display: 'flex',\n                        minWidth: '0%',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        flexGrow: '0',\n                        flexShrink: '0',\n                        flexBasis: typeof props.labelWidth === 'number' ?\n                            props.labelWidth * 100 + '%' :\n                            props.labelWidth,\n                        height: '100%',\n                        cursor: 'ew-resize',\n                        fontSize: '0.875rem',\n                        padding: '0px 12px',\n                        margin: '0',\n                        borderTopLeftRadius: '3px',\n                        borderBottomLeftRadius: '3px'\n                    }}\n            >\n                <span>\n                    {props.label}\n                </span>\n            </div>\n            <input\n                className='smart-input-text'\n                ref={inputRef}\n                onClick={handleClick}\n                onBlur={(e) => {\n                    const value = inputRef.current.value;\n                    handleOnBlur(value);\n                }}\n                onChange={(e) => {\n                    const value = e.target.value;\n                    handleUserInput(value);\n                }}\n                type='text'\n                style={\n                    (props.defaultStyles !== false) && {\n                        flex: '0 1 auto',\n                        minWidth: '0%',\n                        width: '100%',\n                        height: '100%',\n                        fontSize: '0.875rem',\n                        padding: '0px 12px',\n                        margin: '0',\n                        border: 'none'\n                    }}\n            >\n            </input>\n            {props.resetButton &&\n                <button\n                    type=\"button\"\n                    className=\"reset-input-button\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        props.resetAction && props.resetAction();\n                        handleUserInput(props.value);\n                    }}\n                    style={\n                        (props.defaultStyles !== false) && {\n                            display: 'flex',\n                            minWidth: '0%',\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            flexGrow: '0',\n                            flexShrink: '0',\n                            flexBasis: '2rem',\n                            height: '100%',\n                            cursor: 'pointer',\n                            fontSize: '0.875rem',\n                            padding: '0px 12px',\n                            margin: '0',\n                            border: 'none',\n                            borderTopRightRadius: '3px',\n                            borderBottomRightRadius: '3px'\n                        }}\n                >\n                    {String.fromCharCode(0x21ba)}\n                </button>\n            }\n        </div>\n    )\n\n}\n\nexport default SmartInput;","// libs\nimport React, { useState, useEffect } from 'react';\nimport { Curve } from 'color-curves';\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\n\nfunction ChartControls(props) {\n\n    const onCurveChange = (newCurveType) => {\n\n        props.setCurve(newCurveType);\n\n    }\n\n    const onParamChange = (param, value) => {\n\n        switch (param) {\n            case 'angleStart': props.curve.setAngleStart(value); break;\n            case 'angleEnd': props.curve.setAngleEnd(value); break;\n            case 'angleOffset': props.curve.setAngleOffset(value); break;\n            case 'variation': props.curve.setVariation(value); break;\n            case 'translateX': props.curve.setTranslateX(value); break;\n            case 'translateY': props.curve.setTranslateY(value); break;\n            case 'scaleX': props.curve.setScaleX(value); break;\n            case 'scaleY': props.curve.setScaleY(value); break;\n            case 'rotate': props.curve.setRotation(value); break;\n            case 'reverse': props.curve.setReverse(value); break;\n            case 'radius': props.curve.setRadius(value); break;\n            case 'overflow': props.curve.setOverflow(value); break;\n            case 'exponent': props.curve.setExponent(value); break;\n            case 'overshoot': props.curve.setOvershoot(value); break;\n            case 'amplitude': props.curve.setAmplitude(value); break;\n            case 'period': props.curve.setPeriod(value); break;\n            default: break;\n        }\n\n        // update clamping bounds\n        if (props.curve.overflow === 'clamp') props.curve.setClampBounds();\n\n        props.updateCurve();\n\n    };\n\n    return (\n\n        <div id='chart-controls' className='col-12'>\n\n            {/* FORM */}\n            <form>\n\n                <div className='form-group'>\n\n                    {/* CURVE OPTIONS LINE 1 */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Curve</label>\n                        <div className='col-lg-5 col-9'>\n                            <select\n                                id='type-select'\n                                className='form-control form-control-sm'\n                                value={props.curve.type}\n                                onChange={(e) => {\n                                    const newCurveType = e.target.value;\n                                    onCurveChange(newCurveType);\n                                }}>\n                                {props.config.map((option) => {\n                                    return <option key={option.id} value={option.id}> {option.display} </option>\n                                })}\n                            </select>\n                        </div>\n\n                        {/* CURVE VARIATION */}\n                        {props.curve.category === 'function' && props.curve.type !== 'linear' && (<>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Variation</label>\n                            <div className='col-lg-3 col-9'>\n                                <select\n                                    id='variation-select'\n                                    className='form-control form-control-sm'\n                                    value={props.curve.variation}\n                                    onChange={(e) => {\n                                        const value = e.target.value;\n                                        onParamChange('variation', value);\n                                    }}>\n                                    <option value='in'>In</option>\n                                    <option value='out'>Out</option>\n                                    <option value='in-out'>In-Out</option>\n                                </select>\n                            </div>\n                        </>)}\n\n                    </div>\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'polynomial' &&\n                        <div className='row justify-content-end'>\n\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Exponent</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"e\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={0.01}\n                                    value={props.curve.exponent}\n                                    resetButton={true}\n                                    resetAction={() => onParamChange('exponent')}\n                                    handleChange={(value) => onParamChange('exponent', value)}\n                                />\n                            </div>\n                        </div>}\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'back' &&\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Overshoot</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"s\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    value={props.curve.overshoot}\n                                    resetButton={true}\n                                    resetAction={() => { onParamChange('overshoot') }}\n                                    handleChange={(value) => onParamChange('overshoot', value)}\n                                />\n                            </div>\n                        </div>}\n\n                    {/* CONDITIONAL CURVE PARAMS */}\n                    {props.curve.type === 'elastic' && <>\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Amplitude</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"a\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={1}\n                                    value={props.curve.amplitude}\n                                    resetButton={true}\n                                    resetAction={() => { onParamChange('amplitude') }}\n                                    handleChange={(value) => onParamChange('amplitude', value)}\n                                />\n                            </div>\n                        </div>\n                        <div className='row justify-content-end'>\n                            <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='variation-select'>Period</label>\n                            <div className='col-lg-3 col-9'>\n                                <SmartInput\n                                    labelWidth={.2}\n                                    label={\"p\"}\n                                    step={0.01}\n                                    maxDecimals={2}\n                                    min={0.01}\n                                    value={props.curve.period}\n                                    resetButton={true}\n                                    resetAction={() => { onParamChange('period') }}\n                                    handleChange={(value) => onParamChange('period', value)}\n                                />\n                            </div>\n                        </div>\n                    </>}\n\n\n                    {/* CURVE OPTIONS LINE 2 */}\n                    <div className='row'>\n\n                        {/* CURVE DIRECTION */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='direction-select'>Direction</label>\n                        <div className='col-lg-5 col-9'>\n                            <select\n                                id='direction-select'\n                                className='form-control form-control-sm'\n                                onChange={(e) => {\n                                    const value = e.target.value === 'reverse';\n                                    onParamChange('reverse', value);\n                                }}>\n                                <option value='normal'>Normal</option>\n                                <option value='reverse'>Reverse</option>\n                            </select>\n                        </div>\n\n                        {/* CURVE OVERFLOW */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='off-grid-select'>Overflow</label>\n                        <div className='col-lg-3 col-9'>\n                            <select\n                                id='overflow-select'\n                                className='form-control form-control-sm'\n                                value={props.curve.overflow}\n                                onChange={(e) => {\n                                    const value = e.target.value;\n                                    onParamChange('overflow', value);\n                                }}>\n                                <option value='clamp'>Clamp</option>\n                                <option value='project'>Project</option>\n                            </select>\n                        </div>\n\n                    </div>\n\n                </div>\n\n                {/* CONDITIONAL ARC PARAMETERS */}\n                {props.curve.type === 'arc' && <div className='form-group'>\n\n                    {/* RADIUS */}\n                    <div className='row'>\n\n                        {/* RADIUS */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Radius</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='r'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.radius}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('radius', props.curve.radius) }}\n                                handleChange={(value) => onParamChange('radius', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* BOUNDS */}\n                    <div className='row'>\n\n                        {/* ANGLE START */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Range</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={<>{String.fromCharCode(0xfeff0398)}<sub>0</sub></>}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleStart / Math.PI}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('angleStart') }}\n                                handleChange={(value) => onParamChange('angleStart', value)}\n                            />\n                        </div>\n\n                        {/* ANGLE END */}\n                        <div className='col-lg-5 col-9 ml-auto'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={<>{String.fromCharCode(0xfeff0398)}<sub>1</sub></>}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleEnd / Math.PI}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('angleEnd') }}\n                                handleChange={(value) => onParamChange('angleEnd', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* ANGLE OFFSET */}\n                    <div className='row'>\n\n                        {/* ANGLE START */}\n                        <label className='col-lg-2 col-3 col-form-label-sm' htmlFor='type-select'>Offset</label>\n                        <div className='col-lg-5 col-9'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={String.fromCharCode(0xfeff0398)}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.angleOffset / Math.PI}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('angleOffset') }}\n                                handleChange={(value) => onParamChange('angleOffset', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                </div>}\n\n                <div className='form-group'>\n\n                    {/* TRANSLATION */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Translate</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='X'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.translation.x}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('translateX') }}\n                                handleChange={(value) => onParamChange('translateX', value)}\n                            />\n                        </div>\n\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='Y'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.translation.y}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('translateY') }}\n                                handleChange={(value) => onParamChange('translateY', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* SCALE */}\n                    <div className='row'>\n\n                        {/* CURVE TYPE */}\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Scale</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='X'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.scale.x}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('scaleX') }}\n                                handleChange={(value) => onParamChange('scaleX', value)}\n                            />\n                        </div>\n\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label='Y'\n                                step={0.01}\n                                maxDecimals={2}\n                                value={props.curve.scale.y}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('scaleY') }}\n                                handleChange={(value) => onParamChange('scaleY', value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* ROTATION */}\n                    <div className='row'>\n                        <label className='col-lg-2 col-form-label-sm' htmlFor='type-select'>Rotate</label>\n                        <div className='col-lg-5 col-6'>\n                            <SmartInput\n                                labelWidth={.2}\n                                label={String.fromCharCode(0xfeff0398)}\n                                step={0.01}\n                                maxDecimals={2}\n                                unitSymbol={String.fromCharCode(0x3c0)}\n                                conversion={Math.PI}\n                                value={props.curve.rotation / Math.PI}\n                                resetButton={true}\n                                resetAction={() => { onParamChange('rotate') }}\n                                handleChange={(value) => onParamChange('rotate', value)}\n                            />\n                        </div>\n                    </div>\n\n                </div>\n\n            </form>\n\n        </div>\n\n    );\n\n}\n\nexport default ChartControls;","/**\n * Converts x coordinates on a unit circle to x coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit circle\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit circle coordinate to one on the canvas\n */\n\nexport const nxCircle = (canvas, padding) => (x) => {\n\n    const width = canvas.width * (1 - 2 * padding);\n    const offset = canvas.width * padding;\n\n    return offset + width / 2 + x * width / 2;\n\n    }\n\n/**\n * Converts x coordinates on a unit square to x coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit square\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit square coordinate to one on the canvas\n */\n\nexport const nxSquare = (canvas, padding) => (x) => {\n\n    const offset = canvas.width * padding;\n    const width = canvas.width * (1 - 2 * padding);\n\n    return offset + x * width;\n\n}\n\n/**\n * Converts y coordinates on a unit square to y coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit square\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit square coordinate to one on the canvas\n */\n\nexport const nyCircle = (canvas, padding) => (y) => {\n\n    const height = canvas.height * (1 - 2 * padding);\n    const offset = canvas.height * padding;\n\n    return offset + height / 2 - y * height / 2;\n\n    }\n\n/**\n * Converts y coordinates on a unit square to y coordinate on a canvas\n * @param {number} canvas A canvas that represents a unit square\n * @param {number} padding The proportion of the canvas to reserve for padding on either side\n * @returns {object} Returns a function that converts a unit square coordinate to one on the canvas\n */\n\nexport const nySquare = (canvas, padding) => (y) => {\n\n    const offset = canvas.height * padding;\n    const height = canvas.height * (1 - 2 * padding);\n\n    return offset + height - y * height;\n\n}","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nconst drawEndPoints = (curve, canvas, padding) => {\n\n    let nx, ny;\n\n    switch (curve.surface.type) {\n        case 'unitCircle':\n            nx = nxCircle(canvas, padding);\n            ny = nyCircle(canvas, padding);\n            break;\n        case 'unitSquare':\n            nx = nxSquare(canvas, padding);\n            ny = nySquare(canvas, padding);\n            break;\n        default:\n            console.error('Invalid surface type. Must be \"unitCircle\" or \"unitSquare\"');\n            return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    let s, e;\n\n    if (curve.overflow === 'clamp') {\n\n        // use clamp start/end\n        s = curve.getCurveCoordsAt(curve.clampStart);\n        e = curve.getCurveCoordsAt(curve.clampEnd);\n\n    } else {\n\n        // use 0 and 1\n        s = curve.getCurveCoordsAt(0);\n        e = curve.getCurveCoordsAt(1);\n\n    }\n\n    ctx.lineWidth = canvas.width / 100;\n\n    ctx.beginPath();\n    ctx.fillStyle = \"lightgreen\";\n    ctx.arc(nx(s.x), ny(s.y), canvas.width / 100, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.fill();\n\n    ctx.beginPath();\n    ctx.fillStyle = \"palevioletred\";\n    ctx.moveTo(nx(e.x), ny(e.y));\n    ctx.arc(nx(e.x), ny(e.y), canvas.width / 100, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.fill();\n\n}\n\nexport default drawEndPoints;","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nexport const drawHsOrientation = (curve, canvas, padding) => {\n\n    const nx = nxCircle(canvas, padding);\n    const ny = nyCircle(canvas, padding);\n\n    const rotatePoint = (x, y) => {\n\n        const sin = Math.sin(curve.rotation);\n        const cos = Math.cos(curve.rotation);\n\n        const xRot = (x - curve.surface.cx) * cos - (y - curve.surface.cy) * sin + curve.surface.cx;\n        const yRot = (x - curve.surface.cx) * sin + (y - curve.surface.cy) * cos + curve.surface.cy;\n\n        return {\n            x: xRot,\n            y: yRot\n        };\n\n    }\n\n    const tickLength = 0.03 // proportion of canvas\n    const fontSize = 14;\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = canvas.width / 200;\n\n    ctx.beginPath();\n    ctx.fillStyle = 'black';\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    // +X\n    let width = ctx.measureText(\"+X\").width;\n    let p0 = rotatePoint(1 - tickLength, 0);\n    let p1 = rotatePoint(1 + tickLength, 0);\n    let p2 = rotatePoint(1 + tickLength + 2 * width / canvas.width, 0);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+X\", nx(p2.x), ny(p2.y));\n\n    // +Y\n    width = ctx.measureText(\"+Y\").width;\n    p0 = rotatePoint(0, 1 - tickLength);\n    p1 = rotatePoint(0, 1 + tickLength);\n    p2 = rotatePoint(0, 1 + tickLength + 2 * width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+Y\", nx(p2.x), ny(p2.y));\n\n    // -X\n    width = ctx.measureText(\"-X\").width;\n    p0 = rotatePoint(-1 - tickLength, 0);\n    p1 = rotatePoint(-1 + tickLength, 0);\n    p2 = rotatePoint(-1 - tickLength - 2 * width / canvas.width, 0);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-X\", nx(p2.x), ny(p2.y));\n\n    // -Y\n    width = ctx.measureText(\"-Y\").width;\n    p0 = rotatePoint(0, -1 - tickLength);\n    p1 = rotatePoint(0, -1 + tickLength);\n    p2 = rotatePoint(0, -1 - tickLength - 2 * width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-Y\", nx(p2.x), ny(p2.y));\n\n    ctx.stroke();\n\n}\n\nexport const drawLOrientation = (curve, canvas, padding) => {\n\n    const nx = nxSquare(canvas, padding);\n    const ny = nySquare(canvas, padding);\n\n    const rotatePoint = (x, y) => {\n\n        const sin = Math.sin(curve.rotation);\n        const cos = Math.cos(curve.rotation);\n\n        const xRot = (x - curve.surface.cx) * cos - (y - curve.surface.cy) * sin + curve.surface.cx;\n        const yRot = (x - curve.surface.cx) * sin + (y - curve.surface.cy) * cos + curve.surface.cy;\n\n        return {\n            x: xRot,\n            y: yRot\n        };\n\n    }\n\n    const tickLength = 0.03 // proportion of canvas\n    const fontSize = 14;\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = canvas.width / 200;\n\n    ctx.beginPath();\n    ctx.fillStyle = 'black';\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    // +X\n    let width = ctx.measureText(\"+X\").width;\n    let p0 = rotatePoint(1 - tickLength / 2, 0.5);\n    let p1 = rotatePoint(1 + tickLength / 2, 0.5);\n    let p2 = rotatePoint(1 + tickLength / 2 + width / canvas.width, 0.5);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+X\", nx(p2.x), ny(p2.y));\n\n    // +Y\n    width = ctx.measureText(\"+Y\").width;\n    p0 = rotatePoint(0.5, 1 - tickLength / 2);\n    p1 = rotatePoint(0.5, 1 + tickLength / 2);\n    p2 = rotatePoint(0.5, 1 + tickLength / 2 + width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"+Y\", nx(p2.x), ny(p2.y));\n\n    // -X\n    width = ctx.measureText(\"-X\").width;\n    p0 = rotatePoint(0 - tickLength / 2, 0.5);\n    p1 = rotatePoint(0 + tickLength / 2, 0.5);\n    p2 = rotatePoint(0 - tickLength / 2 - width / canvas.width, 0.5);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-X\", nx(p2.x), ny(p2.y));\n\n    // -Y\n    width = ctx.measureText(\"-Y\").width;\n    p0 = rotatePoint(0.5, 0 - tickLength / 2);\n    p1 = rotatePoint(0.5, 0 + tickLength / 2);\n    p2 = rotatePoint(0.5, 0 - tickLength / 2 - width / canvas.width);\n    ctx.moveTo(nx(p0.x), ny(p0.y));\n    ctx.lineTo(nx(p1.x), ny(p1.y));\n    ctx.fillText(\"-Y\", nx(p2.x), ny(p2.y));\n\n}","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nexport const drawHsCurve = (curve, canvas, padding) => {\n\n    const lineSegments = 128;\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n    ctx.lineWidth = canvas.width / 180;\n\n    // get functions to normalize coordinate systems\n    const nx = nxCircle(canvas, padding);\n    const ny = nyCircle(canvas, padding);\n\n    // set clamp bounds if necessary\n    curve.overflow === 'clamp' && curve.setClampBounds();\n\n    let prevCoords;\n\n    const start = curve.overflow === 'clamp' ?\n        curve.clampStart : 0;\n\n    const end = curve.overflow === 'clamp' ?\n        curve.clampEnd : 1\n\n    for (let i = 0; i <= lineSegments; i++) {\n\n        ctx.beginPath();\n\n        const coords = curve.getCurveCoordsAt(start + (i / lineSegments) * (end - start));\n\n        ctx.strokeStyle = 'black';\n\n        if (i === 0) {\n            ctx.moveTo(nx(coords.x), ny(coords.y));\n        } else {\n            ctx.moveTo(nx(prevCoords.x), ny(prevCoords.y));\n            ctx.lineTo(nx(coords.x), ny(coords.y));\n        }\n\n        ctx.stroke();\n\n        prevCoords = coords;\n\n    }\n\n}\n\nexport const drawLCurve = (curve, canvas, padding) => {\n\n    const lineSegments = 128;\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n    ctx.lineWidth = canvas.width / 180;\n\n    // get functions to normalize coordinate systems\n    const nx = nxSquare(canvas, padding);\n    const ny = nySquare(canvas, padding);\n\n    // set clamp bounds if necessary\n    curve.overflow === 'clamp' && curve.setClampBounds();\n\n    let prevCoords;\n\n    for (let i = 0; i <= lineSegments; i++) {\n\n        ctx.beginPath();\n\n        const coords = curve.getCurveCoordsAt(i / lineSegments);\n\n        ctx.strokeStyle = 'black';\n\n        if (curve.overflow === 'project' || !coords.clamped) {\n\n            if (i === 0) {\n                ctx.moveTo(nx(coords.x), ny(coords.y));\n            } else {\n                ctx.moveTo(nx(prevCoords.x), ny(prevCoords.y));\n                ctx.lineTo(nx(coords.x), ny(coords.y));\n            }\n\n            ctx.stroke();\n\n        }\n\n        prevCoords = coords;\n\n    }\n\n}","import { nxCircle, nyCircle, nxSquare, nySquare } from '../drawing/normalize';\n\nexport const drawHsChart = (curve, canvas, padding) => {\n\n    const nx = nxCircle(canvas, padding);\n    const ny = nyCircle(canvas, padding);\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n\n    // fill background\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // color wheel parameters\n    const arcCount = 256;\n    const arcWidth = - Math.PI * 2 / arcCount;\n    const arcPadding = arcWidth;\n\n    // other parameters\n    const cx = nx(0);\n    const cy = ny(0);\n    const r = nx(0) - padding * nx(0) * 2;\n\n    // fill chart gradient\n    for (let i = 0; i < arcCount; i++) {\n\n        const radiusStart = 0;\n        const radiusEnd = r;\n\n        const angleStart = i * arcWidth;\n        const angleEnd = i * arcWidth + arcWidth;\n\n        const gradient = ctx.createRadialGradient(cx, cy, 0, cx, cy, r);\n        gradient.addColorStop(0, `hsl(${360 * i / arcCount}, 0%, 50%)`);\n        gradient.addColorStop(1, `hsl(${360 * i / arcCount}, 100%, 50%)`);\n        ctx.fillStyle = gradient;\n\n        ctx.beginPath();\n        ctx.arc(cx, cy, radiusStart, angleStart, angleEnd + arcPadding, true);\n        ctx.arc(cx, cy, radiusEnd, angleEnd + arcPadding, angleStart, false);\n        ctx.fill();\n\n    }\n\n}\n\nexport const drawLChart = (curve, canvas, padding) => {\n\n    const nx = nxSquare(canvas, padding);\n    const ny = nySquare(canvas, padding);\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n\n    // fill background\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n\n    // fill chart gradient\n    const fillRectGradient = ctx.createLinearGradient(\n        nx(0),\n        ny(1),\n        nx(0),\n        ny(0)\n    );\n    fillRectGradient.addColorStop(0, 'hsl(0, 0%, 100%');\n    fillRectGradient.addColorStop(1, 'hsl(0, 0%, 0%');\n    ctx.fillStyle = fillRectGradient;\n    ctx.fillRect(\n        nx(0),\n        ny(1),\n        nx(1) - padding * nx(1),\n        ny(0) - padding * ny(0));\n\n}","// libs\nimport React, { useEffect, useRef } from 'react';\n\n// components\nimport ChartControls from './ChartControls';\n\n// other\nimport drawEndPoints from '../drawing/drawEndPoints';\nimport { drawHsOrientation, drawLOrientation } from '../drawing/drawOrientation';\nimport { drawHsCurve, drawLCurve } from '../drawing/drawCurve';\nimport { drawHsChart, drawLChart } from '../drawing/drawBlankChart';\n\nfunction Chart(props) {\n\n    const canvasRef = useRef(null);\n\n    const padding = .07;\n\n    const updateCurve = () => {\n\n        switch (props.curve.surface.type) {\n\n            case 'unitCircle':\n                drawHsChart(props.curve, canvasRef.current, padding);\n                drawHsCurve(props.curve, canvasRef.current, padding);\n                drawHsOrientation(props.curve, canvasRef.current, padding);\n                drawEndPoints(props.curve, canvasRef.current, padding);\n                break;\n\n            case 'unitSquare':\n                drawLChart(props.curve, canvasRef.current, padding);\n                drawLCurve(props.curve, canvasRef.current, padding);\n                drawLOrientation(props.curve, canvasRef.current, padding);\n                drawEndPoints(props.curve, canvasRef.current, padding);\n                break;\n\n        }\n\n        props.updatePalettes();\n\n    }\n\n    useEffect(() => {\n        canvasRef.current.width = canvasRef.current.clientWidth;\n        canvasRef.current.height = canvasRef.current.width;\n        updateCurve();\n\n        const listen = window.addEventListener('resize', () => {\n            canvasRef.current.width = canvasRef.current.clientWidth;\n            canvasRef.current.height = canvasRef.current.width;\n            updateCurve();\n        })\n\n        return () => {\n            window.removeEventListener('resize', listen);\n        }\n\n    }, [])\n\n    useEffect(() => {\n\n        updateCurve();\n\n    }, [props.curve]);\n\n    return (\n\n        <div className='chart col-md-6'>\n\n            <div className='material-static chart-wrapper'>\n\n                <div className='row border-bottom'>\n\n                    <div className='col-md-12'>\n\n                        <h2>{props.title}</h2>\n\n                    </div>\n\n                </div>\n\n                <ChartControls\n                    chartType={props.chartType}\n                    config={props.config}\n                    curve={props.curve}\n                    setCurve={props.setCurve}\n                    updateCurve={updateCurve}\n                />\n\n                <div className='row'>\n\n                    <div className='col-md-12'>\n\n                        <canvas\n                            className='chart'\n                            ref={canvasRef}\n                        />\n\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n\n    );\n\n}\n\nexport default Chart;","export const downloadCanvas = (canvas, filename) => {\n\n    return new Promise((resolve, reject) => {\n\n        // create an \"off-screen\" anchor tag\n        const link = document.createElement('a');\n\n        link.download = filename + '.png';\n        link.href = canvas.toDataURL(\"image/png;base64\");\n\n        // fire moust event to trigger download\n        const e = document.createEvent(\"MouseEvents\");\n\n        e.initMouseEvent(\"click\", true, true, window,\n            0, 0, 0, 0, 0, false, false, false,\n            false, 0, null);\n\n        link.dispatchEvent(e);\n\n        resolve();\n\n    })\n\n}\n\nexport const logoGen = (size) => {\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = size;\n    canvas.height = size;\n\n    const lineWidth = size / 20;\n    const radius = (size / 2) - lineWidth;\n    const innerRadius = radius / 3.5;\n\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = '#000000';\n\n    const slices = 16;\n    const arcLength = - Math.PI * 2 / slices;\n\n    // fill inner circle with black\n    ctx.fillStyle = 'black';\n    ctx.arc(size / 2, size / 2, innerRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    for (let i = 0; i < 16; i++) {\n\n        ctx.fillStyle = `hsl(${(i / slices) * 360}, 100%, 50%)`;\n\n        const start = i * arcLength;\n        const end = i * arcLength + arcLength;\n\n        ctx.beginPath();\n        ctx.arc(size / 2, size / 2, radius, start, end, true);\n        if (i === slices - 1) {\n            ctx.lineWidth *= 0.5;\n        }\n        ctx.arc(size / 2, size / 2, innerRadius, end, start, false);\n        ctx.fill();\n        ctx.stroke();\n\n    }\n\n    // smooth out inner and outer borders\n    ctx.lineWidth = lineWidth;\n    ctx.beginPath();\n    ctx.arc(size / 2, size / 2, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(size / 2, size / 2, innerRadius, 0, Math.PI * 2);\n    ctx.stroke();\n\n    return canvas;\n\n}","// libs\nimport React, { useState, useEffect } from 'react';\nimport { downloadCanvas } from '../utils/canvas'\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\nfunction ExportImage(props) {\n\n    const [imgName, setImgName] = useState('');\n    const [imgWidth, setImgWidth] = useState(500);\n    const [imgHeight, setImgHeight] = useState(500);\n\n    useEffect(() => {\n        setImgName('colorcurve');\n    }, []);\n\n    const exportImage = (name, w, h) => {\n\n        const canvas = document.createElement('canvas');\n        canvas.id = 'export-canvas';\n        document.body.appendChild(canvas);\n        canvas.width = w;\n        canvas.height = h;\n        canvas.style.width = w;\n        canvas.style.height = h;\n\n        if (props.paletteType === 'continuous') {\n            props.palette.drawContinuousPalette(canvas, 128);\n        } else if (props.paletteType === 'discrete') {\n            props.palette.drawDiscretePalette(canvas, props.numStops);\n        }\n\n        downloadCanvas(canvas, name).then(() => {\n            console.log('downloading', canvas);\n            document.body.removeChild(document.getElementById('export-canvas'));\n        });\n\n    }\n    return (<>\n\n        <div className='row mt-3'>\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Name</label>\n            <div className='col-lg-4'>\n                <input\n                    id='export-image-name'\n                    className='form-control form-control-sm'\n                    placeholder='colorcurve.png'\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        setImgName(value);\n                    }} />\n            </div>\n        </div>\n\n        <div className='row'>\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Type</label>\n            <div className='col-lg-2'>\n                <select\n                    id='type-select'\n                    className='form-control form-control-sm'\n                    value={props.paletteType}\n                    onChange={(e) => {\n                        const newPaletteType = e.target.value;\n                        props.setPaletteType(newPaletteType);\n                    }}>\n                    <option value='continuous'>Continuous</option>\n                    <option value='discrete'>Discrete</option>\n                </select>\n            </div>\n            {props.paletteType === 'discrete' &&\n                <div className='col-lg-2'>\n                    <SmartInput\n                        labelWidth={.33}\n                        label='Num'\n                        step={1}\n                        min={1}\n                        max={32}\n                        maxDecimals={0}\n                        value={props.numStops}\n                        handleChange={(value) => props.setNumStops(parseInt(value))}\n                    />\n                </div>}\n        </div>\n\n\n        <div className='row'>\n\n            <label className='col-lg-1 col-form-label-sm' htmlFor='type-select'>Size</label>\n            <div className='col-lg-2'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='W'\n                    step={1}\n                    min={1}\n                    max={1080}\n                    maxDecimals={0}\n                    unitSymbol={'px'}\n                    value={imgWidth}\n                    handleChange={(value) => setImgWidth(parseInt(value))}\n                />\n            </div>\n\n            <div className='col-lg-2'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='H'\n                    step={1}\n                    min={1}\n                    max={1080}\n                    maxDecimals={0}\n                    unitSymbol={'px'}\n                    value={imgHeight}\n                    handleChange={(value) => setImgHeight(parseInt(value))}\n                />\n            </div>\n\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-5 d-flex'>\n                <button\n                    onClick={() => exportImage(imgName, imgWidth, imgHeight)}\n                    type=\"button\"\n                    className=\"btn btn-primary flex-grow-1\"\n                >\n                    Download Image\n            </button>\n            </div>\n        </div>\n\n    </>)\n\n}\n\nexport default ExportImage;","// libs\nimport React, { useState, useEffect, useRef } from 'react';\n\n// components\nimport SmartInput from './smart-input/SmartInput';\n\nfunction ExportHex(props) {\n\n    const [hexArray, setHexArray] = useState([]);\n\n    useEffect(() => {\n\n        if (props.palette) {\n            const hexArray = new Array(props.numStops).fill(null).map((d, i) => {\n                return props.palette.hexValueAt((i + 0.5) / props.numStops);\n            });\n            setHexArray(hexArray);\n        }\n\n    }, [props.palette])\n\n    return (<>\n\n        <div className='row mt-3'>\n            <div className='col-lg-4'>\n                <SmartInput\n                    labelWidth={.33}\n                    label='Num'\n                    step={1}\n                    min={1}\n                    max={256}\n                    maxDecimals={0}\n                    value={props.numStops}\n                    handleChange={(value) => {\n                        value = parseInt(value);\n                        props.setNumStops(parseInt(value))\n                        const hexArray = new Array(value).fill(null).map((d, i) => {\n                            return props.palette.hexValueAt((i + 0.5) / value);\n                        });\n                        setHexArray(hexArray);\n                    }}\n                />\n            </div>\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-12'>\n                <p>All Hex Values:</p>\n                <div className='code-block p-2'>\n                    <code>{hexArray.join(', ')}</code>\n                </div>\n            </div>\n        </div>\n\n        <div className='row mt-3'>\n            <div className='col-lg-12'>\n                <p>\n                    Single Hex Values:\n                </p>\n                <div className='col-lg-12'>\n                    {hexArray && hexArray.map((d) => {\n                        return (\n                            <div className='row p-1'>\n                                <div\n                                    className='hex-square col-lg-1 col-6'\n                                    style={{\n                                        backgroundColor: d\n                                    }}\n                                />\n                                <div className='col-lg-2 col-6'>\n                                    {d}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n\n    </>)\n\n}\n\nexport default ExportHex;","// libs\nimport React from 'react';\n\nfunction ExportJS(props) {\n\n    return (<>\n\n        <div className='row mt-3'>\n\n            <div className='col-12'>\n                Import module\n                </div>\n            <div className='col-12 code-block p-2'>\n\n                <code>\n\n                    {\"import { ColorPalette } from 'color-curves'\"}<br /><br />\n                    {\"const palette = new ColorPalette(\" + props.palette.exportPaletteParams() + \");\"}\n\n                </code>\n\n            </div>\n\n        </div>\n\n        <div className='row mt-1'>\n\n            <div className='col-12'>\n                CommonJS\n            </div>\n            <div className='col-12 code-block p-2'>\n\n                <code>\n                    {`const ColorCurves = require('color-curves')`}<br /><br />\n                    {\"const palette = new ColorCurves.ColorPalette(\" + props.palette.exportPaletteParams() + \");\"}\n                </code>\n\n            </div>\n\n        </div>\n\n        <div className='row mt-1'>\n\n            <div className='col-12'>\n                HTML\n                </div>\n            <div className='col-12 code-block p-2'>\n\n                <code>\n                    {`<script src=\"http://unpkg.com/color-curves\"></script>`}<br /><br />\n                    {\"const palette = new ColorCurves.ColorPalette(\" + props.palette.exportPaletteParams() + \");\"}\n                </code>\n\n            </div>\n\n        </div>\n\n        <div className='row mt-3 p-2'>\n\n            <div className='col-12'>\n\n                For additional information on importing Color Curves, see the <a href=\"https://github.com/mracette/color-curves-app\">documentation</a>.\n\n                </div>\n\n        </div>\n\n    </>)\n\n}\n\nexport default ExportJS;","// libs\nimport React, { useState, useEffect, useRef } from 'react';\nimport Modal from 'react-bootstrap/Modal';\n\n// components\nimport ExportImage from '../components/ExportImage';\nimport ExportHex from '../components/ExportHex';\nimport ExportJS from '../components/ExportJS';\n\nfunction ExportModal(props) {\n\n    // component versions of numstops and palettetype\n    // do not affect the editor/global values\n    const [numStops, setNumStops] = useState(12);\n    const [paletteType, setPaletteType] = useState('continuous');\n\n    const [nav, setNav] = useState('image');\n\n    const exportCanvas = useRef(null);\n\n    const updatePalettes = (canvas, paletteType, stops) => {\n\n        if (nav !== 'hex') {\n\n            if (paletteType === 'continuous') {\n                props.palette.drawContinuousPalette(canvas);\n            } else if (paletteType === 'discrete') {\n                props.palette.drawDiscretePalette(canvas, stops);\n            }\n\n        } else if (nav === 'hex') {\n\n            props.palette.drawDiscretePalette(canvas, stops);\n\n        }\n\n    }\n\n    useEffect(() => {\n        if (exportCanvas.current) {\n\n            const numStopsVar = props.numStops || numStops;\n            const paletteTypeVar = props.paletteType || paletteType;\n            updatePalettes(exportCanvas.current, paletteTypeVar, numStopsVar);\n\n        }\n    }, [exportCanvas.current, props.palette, props.numStops, numStops, props.paletteType, paletteType, nav, updatePalettes])\n\n    useEffect(() => {\n\n        if (exportCanvas.current) {\n\n            exportCanvas.current.clientWidth !== 0 && (exportCanvas.current.width = exportCanvas.current.clientWidth);\n            exportCanvas.current.clientHeight !== 0 && (exportCanvas.current.height = exportCanvas.current.clientHeight);\n\n            const listen = window.addEventListener('resize', () => {\n                exportCanvas.current.clientWidth !== 0 && (exportCanvas.current.width = exportCanvas.current.clientWidth);\n                exportCanvas.current.clientHeight !== 0 && (exportCanvas.current.height = exportCanvas.current.width);\n            });\n\n            return () => {\n                window.removeEventListener('resize', listen);\n            }\n\n        }\n\n    }, [exportCanvas])\n\n    return (\n        <Modal\n            size='lg'\n            show={props.show}\n            onHide={() => props.setShow(false)}\n        >\n\n            <Modal.Header closeButton>\n                <Modal.Title id=\"example-modal-sizes-title-lg\">Export Palette</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n\n                <div className='row'>\n                    <div className='col-12'>\n                        <canvas className='palette preset' ref={exportCanvas} />\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12'>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={() => {\n                                props.setPalette(props.palette);\n                                props.setNav('editor');\n                                props.setShow(false);\n                            }}\n                        >\n                            Open in editor\n                        </button>\n                    </div>\n                </div>\n\n                <nav className='mt-3'>\n                    <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n                        <a className={`nav-item nav-link ${nav === 'image' && 'active'}`} onClick={() => setNav('image')} id=\"export-nav-image\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-home\" aria-selected={`${nav === 'image'}`}>Image</a>\n                        <a className={`nav-item nav-link ${nav === 'hex' && 'active'}`} onClick={() => setNav('hex')} id=\"export-nav-hex\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-profile\" aria-selected={`${nav === 'image'}`}>Hex</a>\n                        <a className={`nav-item nav-link ${nav === 'js' && 'active'}`} onClick={() => setNav('js')} id=\"export-nav-js\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"nav-contact\" aria-selected={`${nav === 'image'}`}>JS</a>\n                    </div>\n                </nav>\n\n                <div className='row'>\n\n                    <div className='col-lg-12'>\n\n                        {nav === 'image' &&\n                            <ExportImage\n                                updatePalettes={() => updatePalettes(exportCanvas.current, props.paletteType, props.numStops)}\n                                palette={props.palette}\n                                paletteType={props.paletteType || paletteType}\n                                setPaletteType={props.setPaletteType || setPaletteType}\n                                numStops={props.numStops || numStops}\n                                setNumStops={props.setNumStops || setNumStops}\n                            />}\n\n                        {nav === 'hex' &&\n                            <ExportHex\n                                palette={props.palette}\n                                numStops={props.numStops || numStops}\n                                setNumStops={props.setNumStops || setNumStops}\n                            />}\n\n                        {nav === 'js' &&\n                            <ExportJS\n                                palette={props.palette}\n                            />}\n\n                    </div></div>\n\n            </Modal.Body>\n\n        </Modal>\n    )\n\n}\n\nexport default ExportModal;","// libs\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { ColorPalette } from 'color-curves';\n\n// components\nimport Canvas from './Canvas';\nimport Chart from './Chart';\nimport SmartInput from './smart-input/SmartInput';\nimport ExportModal from './ExportModal';\n\nfunction Editor(props) {\n\n  const config = [\n    {\n      id: 'arc',\n      category: 'geometry',\n      display: 'Geometry: Arc'\n    },\n    {\n      id: 'linear',\n      category: 'function',\n      display: 'Function: Linear'\n    },\n    {\n      id: 'polynomial',\n      category: 'function',\n      display: 'Function: Polynomial'\n    },\n    {\n      id: 'sinusoidal',\n      category: 'function',\n      display: 'Function: Sinusoidal'\n    },\n    {\n      id: 'exponential',\n      category: 'function',\n      display: 'Function: Exponential'\n    },\n    {\n      id: 'elastic',\n      category: 'function',\n      display: 'Function: Elastic'\n    },\n    {\n      id: 'back',\n      category: 'function',\n      display: 'Function: EaseBack'\n    },\n    {\n      id: 'bounce',\n      category: 'function',\n      display: 'Function: Bounce'\n    }\n  ];\n\n  const [paletteType, setPaletteType] = useState('continuous');\n  const [numStops, setNumStops] = useState(6);\n  const [paletteRange, setPaletteRange] = useState([0, 1]);\n  const [showModal, setShowModal] = useState(false);\n\n  // use default color palette and curve\n  const [hsCurve, setHsCurve] = useState(props.palette.hsCurve);\n  const [lCurve, setLCurve] = useState(props.palette.lCurve);\n  const [paletteCanvas, setPaletteCanvas] = useState(null);\n\n  // initialize refs\n  const paletteWrapper = useRef(null);\n\n  const updateCurveType = useCallback((curve, newType) => {\n\n    if (curve === 'hsCurve') {\n\n      props.palette.setHsCurve(newType);\n\n      setHsCurve(props.palette.hsCurve);\n\n    } else if (curve === 'lCurve') {\n\n      props.palette.setLCurve(newType);\n\n      setLCurve(props.palette.lCurve);\n\n    }\n\n  })\n\n  const updatePalettes = () => {\n\n    if (paletteType === 'continuous' && paletteCanvas !== null) {\n\n      props.palette.drawContinuousPalette(paletteCanvas);\n\n    } else if (paletteType === 'discrete' && paletteCanvas !== null) {\n\n      props.palette.drawDiscretePalette(paletteCanvas, numStops);\n\n    }\n\n  }\n\n  useEffect(() => {\n    updatePalettes()\n  }, [updatePalettes, paletteType, numStops, paletteRange, paletteCanvas])\n\n  useEffect(() => {\n    setPaletteRange([props.palette.start, props.palette.end])\n    setHsCurve(props.palette.hsCurve);\n    setLCurve(props.palette.lCurve);\n  }, [props.palette])\n\n  return (\n\n    <>\n\n      <div ref={paletteWrapper} className='material-static palette-wrapper sticky-top'>\n\n        <div className='row border-bottom'>\n          <div className='col-auto align-items-center d-flex align-items-center'>\n            <h2>Palette</h2>\n            <button type=\"button\"\n              class=\"btn mb-8 btn-light btn-sm\"\n              style={{\n                \"margin-bottom\": \"8px\",\n                \"margin-left\": \"8px\"\n              }}\n              onClick={() => {\n                setShowModal(!showModal);\n              }}\n              type=\"button\"\n            >\n              Export\n          </button>\n          </div>\n          <div className='col-auto ml-auto d-flex'>\n            <form className='m-auto'>\n              <div className=\"custom-control custom-switch\">\n                <input\n                  type=\"checkbox\"\n                  id='pinned-switch'\n                  className=\"custom-control-input\"\n                  defaultChecked={true}\n                  onChange={(e) => {\n                    const sticky = e.target.checked;\n                    if (sticky) {\n                      paletteWrapper.current.classList.add('sticky-top');\n                    } else {\n                      paletteWrapper.current.classList.remove('sticky-top');\n                    }\n                  }}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"pinned-switch\">Pinned</label>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <form>\n\n          {/* PALETTE OPTIONS LINE 1 */}\n          <div className='row'>\n\n            {/* PALETTE TYPE */}\n            <label className='col-lg-1 col-2 col-form-label-sm' htmlFor='type-select'>Type</label>\n            <div className='col-lg-2 col-5'>\n              <select\n                id='type-select'\n                className='form-control form-control-sm'\n                defaultValue={paletteType}\n                onChange={(e) => {\n                  const newPaletteType = e.target.value;\n                  setPaletteType(newPaletteType);\n                }}>\n                <option value='continuous'>Continuous</option>\n                <option value='discrete'>Discrete</option>\n              </select>\n            </div>\n\n            {/* NUM STOPS */}\n            {paletteType === 'discrete' &&\n              <div className='col-lg-2 col-5'>\n                <SmartInput\n                  labelWidth={.33}\n                  label='Num'\n                  step={1}\n                  min={1}\n                  max={256}\n                  maxDecimals={0}\n                  value={numStops}\n                  handleChange={(value) => setNumStops(parseInt(value))}\n                />\n              </div>\n            }\n\n          </div>\n\n          {/* PALETTE OPTIONS LINE 2 */}\n          <div className='row'>\n\n            {/* PALETTE TYPE */}\n            <label className='col-lg-1 col-2 col-form-label-sm' htmlFor='type-select'>Range</label>\n\n            <div className='col-lg-2 col-5'>\n              <SmartInput\n                labelWidth={.33}\n                label='Start'\n                step={.01}\n                min={0}\n                max={paletteRange[1]}\n                maxDecimals={2}\n                value={paletteRange[0]}\n                handleChange={(value) => {\n                  props.palette.setStart(parseFloat(value));\n                  setPaletteRange([parseFloat(value), paletteRange[1]]);\n                }}\n              />\n            </div>\n\n            <div className='col-lg-2 col-5'>\n              <SmartInput\n                labelWidth={.33}\n                label='End'\n                step={.01}\n                min={paletteRange[0]}\n                max={1}\n                maxDecimals={2}\n                value={paletteRange[1]}\n                handleChange={(value) => {\n                  props.palette.setEnd(parseFloat(value));\n                  setPaletteRange([paletteRange[0], parseFloat(value)]);\n                }}\n              />\n            </div>\n\n          </div>\n\n        </form>\n\n        <div className='row'>\n          <div className='col-12'>\n            <Canvas\n              callback={(canvasRef) => setPaletteCanvas(canvasRef)}\n              className='palette editor-palette'\n              onResize={() => updatePalettes()}\n            />\n          </div>\n        </div>\n\n        <ExportModal\n          show={showModal}\n          setShow={setShowModal}\n          palette={props.palette}\n          numStops={numStops}\n          setNumStops={setNumStops}\n          paletteType={paletteType}\n          setPaletteType={setPaletteType}\n        />\n\n      </div>\n\n      <div className='row' id='charts'>\n\n        <Chart\n          title='Hue + Saturation'\n          setCurve={(type) => updateCurveType('hsCurve', type)}\n          curve={hsCurve}\n          config={config}\n          updatePalettes={updatePalettes}\n        />\n\n        <Chart\n          title='Lightness'\n          setCurve={(type) => updateCurveType('lCurve', type)}\n          curve={lCurve}\n          config={config}\n          updatePalettes={updatePalettes}\n        />\n\n      </div>\n\n    </>\n\n  );\n\n}\n\nexport default Editor;","// libs\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap';\n\n// components\nimport Canvas from './Canvas';\nimport ExportModal from './ExportModal';\n\n// palettes\nimport {\n    WarmMagma,\n    AllAround,\n    BeyondBelief,\n    UnAmerican,\n    CandyPaint,\n    GoldfishDeluxe,\n    PhytoPlankton,\n    TrixSky,\n    PowerWashed,\n    CoralScrub,\n    PolarBeyond,\n    // OnVacation,\n    StockImage\n} from 'color-curves';\n\nfunction Presets(props) {\n\n    const [showModal, setShowModal] = useState(false);\n    const [selectedPalette, setSelectedPalette] = useState(null);\n\n    const presets = [\n        new WarmMagma(),\n        new AllAround(),\n        // new OnVacation(),\n        new UnAmerican(),\n        new BeyondBelief(),\n        new PowerWashed(),\n        new CandyPaint(),\n        new StockImage(),\n        new GoldfishDeluxe(),\n        new PhytoPlankton(),\n        new TrixSky(),\n        new CoralScrub(),\n        new PolarBeyond()\n    ];\n\n    return (<>\n        {presets.map((preset, i) => {\n            return (\n                <div\n                    onClick={(e) => {\n                        setSelectedPalette(preset);\n                        setShowModal(true);\n                    }}\n                    className='material palette-wrapper'>\n                    <h4>{preset.name}</h4>\n                    <h6>by {preset.author}</h6>\n                    <Canvas\n                        className='palette preset'\n                        callback={(canvas) => preset.drawContinuousPalette(canvas, 128)}\n                        onResize={(canvas) => preset.drawContinuousPalette(canvas, 128)}\n                    />\n                    <Canvas\n                        className='palette preset'\n                        callback={(canvas) => preset.drawDiscretePalette(canvas, 6)}\n                        onResize={(canvas) => preset.drawDiscretePalette(canvas, 6)}\n                    />\n                </div>\n            )\n        })}\n        <ExportModal\n            setNav={props.setNav}\n            show={showModal}\n            setShow={setShowModal}\n            palette={selectedPalette}\n            setPalette={props.setPalette}\n        /></>\n    );\n\n}\n\nexport default Presets;\n","// libs\nimport React, { useState, useRef, useEffect } from 'react';\nimport { ColorPalette } from 'color-curves';\nimport 'bootstrap';\n\n// components\nimport About from './About';\nimport Editor from './Editor'\nimport Presets from './Presets';\n\n// styles\nimport 'typeface-poppins';\nimport '../styles/app.scss';\n\n// other\nimport logo from '../img/logo192.png';\n\nfunction App() {\n\n  const [darkMode, setDarkMode] = useState(false);\n  const [nav, setNav] = useState('editor');\n  const [palette, setPalette] = useState(new ColorPalette());\n\n  return (<>\n\n\n    <nav\n      className={`navbar navbar-expand-lg navbar-dark ${nav !== \"editor\" ? \"sticky-top\" : \"\"}`}\n      style={{ backgroundColor: '#232F34' }}\n    >\n\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <img src={logo} className=\"logo\" onClick={() => setNav('editor')}></img>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className={`nav-item ${nav === 'editor' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('editor')} href=\"JavaScript:Void(0);\">Editor <span className=\"sr-only\">(current)</span></a>\n          </li>\n          <li className={`nav-item ${nav === 'presets' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('presets')} href=\"JavaScript:Void(0);\">Presets</a>\n          </li>\n          <li className={`nav-item ${nav === 'about' ? \"active\" : \"\"}`}>\n            <a className=\"nav-link\" onClick={() => setNav('about')} href=\"JavaScript:Void(0);\">About</a>\n          </li>\n          <li className=\"nav-item dropdown\">\n            <a className=\"nav-link dropdown-toggle\" href=\"JavaScript:Void(0);\" id=\"theme-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              Theme\n            </a>\n            <div className=\"dropdown-menu\" aria-labelledby=\"theme-dropdown\">\n              <a className=\"dropdown-item active\" href=\"JavaScript:Void(0);\">Light</a>\n              <a className=\"dropdown-item disabled\" href=\"JavaScript:Void(0);\">Dark (coming soon)</a>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </nav>\n\n    <div className='container' id='app'>\n      <div className=\"tab-content\">\n        <div className={`tab-pane fade ${nav === 'editor' ? 'show active' : ''}`} id=\"home\" role=\"tabpanel\" aria-labelledby=\"editor-button\">\n          <Editor\n            palette={palette}\n            setPalette={setPalette}\n          />\n        </div>\n        <div className={`tab-pane fade ${nav === 'presets' ? 'show active' : ''}`} id=\"presets\" role=\"tabpanel\" aria-labelledby=\"presets-button\">\n          <Presets\n            setNav={setNav}\n            setPalette={setPalette}\n          />\n        </div>\n        <div className={`tab-pane fade ${nav === 'about' ? 'show active' : ''}`} id=\"about\" role=\"tabpanel\" aria-labelledby=\"about-button\">\n          <About />\n        </div>\n      </div>\n    </div>\n\n  </>);\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}